<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>第五周总结(4/29 - 5/05)与下周规划</title>
      <link href="/posts/85a455bed5d5/"/>
      <url>/posts/85a455bed5d5/</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉, 这个密码看着不太对, 请再试试." data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容.">  <script id="hbeData" type="hbeData" data-hmacdigest="8f6ef2a7d4facc66d6e7d78160d7a877f3d7e48a7fb864e63ad20adcadb54bfb">e673c8ca06aefc9fd566f76e908c707310684ae5b1521629cc5fde21209b08149440b265571a5a7ec46d02fbd8532beeb82a238ea588828539567ce9a75dc174b49773c4aa6b00588a520d0915ca8e3f54793cfd93f33c0a4eee66004549ad97e4fa2e967f3318874369148cbed3863b3ce275b16fc419fcc5f542e74b188a2309b8323a25e7315092778008831571e8c9ba3ecdad9ffd3127c25c7099abacd7385ee48de3dc0ce644425469d8bd051c1ac810d9d17999878d51068493b0bcc96eaa7eebb38e1c5cc50bf5791ae3b8f56fccd3417213f17917ba9dd6cd5357d9f9b5a2e5b61fdf48db4ed61341dd00b2ac501b236fcf12f501c67763163144195544f38824f72631b598eac4fea9539885015414a9a3d66d4fbd1cf16e956c75ab17359945cdb4e99252fe0be9d3e610c712b1b5f5e5c7e93f9075579b2e38533b3bd8583199f4059da85afb7766142146741a818f0f2988cea46b5d7a738a1ad00b23ec10b91cfed685a250efd886770fd85307962c3a227bb1a0f1ad6123b53396d868539b45619407e0807b623d87304f4796133f9aac9f70ebd3a8e2db0b7f468f5d74c36d46c23a8d5092304593b082ca8a907a1901a96c423193ff4d3d07ffdda903b2f5c2ffef0e5fd87313b759b7bcceaffcabc91cf7fc1f361c236e72485747facc4235a0a96a7dcc89ff3c8b26797b2803de0352a38e4569ad5cd2d5f7ec778ff0bd48dd457b056004350ba89a45cdc54e0a8211fd8c014966e7a746ed0ad3196a6724731c2d71ebc0f4d366c28a3d6493098bb34fc5d77bd8c06d016fac0e577037355057129a7d9eaafcb605da826cbbfa0d6cdfd43dac61b24ff6374d7c13c26b4ae6464c0ee81fd5ba77333fcf96603bc8c8e0e979a0f9d446e855f61e8c193c66e0d6dbf6dac6d91ce74928a84b19c42a129b1670c5f797eb7157495692c259f0cddbdb22c7b7a2624612938491ed3366684927ac3e114d0b393f42f34e61e84c9c1458b1c52f9caaa42b04a0129b625fe817f87978e82c138487ce148ee43c62de6405b1265c29a66392734c60b69e7cbac3c747f52b60a7f63d410da7f2c735329f98dd971b8fcb796fd4bddbc6cca3d92b1e7639bda1a4bfebc70c0d86621ab47b1b39edcc8a0f001dfba7bd75d7a6aa4d99381eed94f2bd94fac31c113db6826f4ee85a2b1d1a2bb596dc02739db7fb0e5c9d222a7e4afcdc299acb30b2fa518545bb2cd345adaa215c48df6a91898a7b81f256b150257b73044124fc31706376b8819608a8dd28762ea0052a7702f233bd51c59be266b073ea63ae9cd235164c2f43b6588e7fea0f51aaa8bfe0028f329b99699295fa770010c3934d0e1d584a8c4aedbd20d10780549aab24113abbf2a148717d34895ad2d9907f134ff8c292dffc638663f3b140e82f5e68d53ff36f9eb6e1fe9d0d0e56d966aec0fb9ff76fd3adc733b83374ff1c46888d5f33af965905e82c42eaecb1e71b906659ef870faff5338ce6e0d1a8a9b736186b5d93c1908c723b7146fc5857e5acc53669fe9b4e4ef7d2f19f2e9a1e3172bddb7f37d29a714a96794da8de5b5a644d47df45118babcc5b12769005e98157fb7ad306f6cb7376e68ec8</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-xray">      <input class="hbe hbe-input-field hbe-input-field-xray" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-xray" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-xray">您好, 这里需要密码.</span>      </label>      <svg class="hbe hbe-graphic hbe-graphic-xray" width="300%" height="100%" viewBox="0 0 1200 60" preserveAspectRatio="none">        <path d="M0,56.5c0,0,298.666,0,399.333,0C448.336,56.5,513.994,46,597,46c77.327,0,135,10.5,200.999,10.5c95.996,0,402.001,0,402.001,0"></path>        <path d="M0,2.5c0,0,298.666,0,399.333,0C448.336,2.5,513.994,13,597,13c77.327,0,135-10.5,200.999-10.5c95.996,0,402.001,0,402.001,0"></path>      </svg>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> 周志 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 加密 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第四周总结(4/22 - 4/28)与下周规划</title>
      <link href="/posts/e67d1afdd8f3/"/>
      <url>/posts/e67d1afdd8f3/</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉, 这个密码看着不太对, 请再试试." data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容.">  <script id="hbeData" type="hbeData" data-hmacdigest="ba97c0dab83c9509ae548b9af0e0fb00337364896604a55acbbd82ac0eb3a3d0">e673c8ca06aefc9fd566f76e908c707310684ae5b1521629cc5fde21209b0814dd28c6c18edca31e1555a8485cd273625e25395c9f1c3aea939741d0bfa2f12a0aeb4c1d8cc993704f2a677a3202850096330a427b75265891b1a548643f6866a2af112c9c35c420c639b21c412b0a309a6c516de92c941c8b5f75a220e6dc3c472b304eae7cdefa406c0769129f0eabf84ac5ce473a55fefb13320b8b35a288ba2ce2409078c405a791a52b8c6208996435723bb5a8702b9e928a187ceb98d5e3bdd7cd8483f34496f283cb4a10f3e45dbb744c8b968194b575695a51d47c4f2e28e534556c5f5df69844c3eb61f0b0b17ac7fe3b67a5c1c83bcf626c57954584e4b49e0c2e66d95148ed7ac80a4327ca27c4aab8246a73ef3a41c645939fe58d430d7c7c75f8408b0e53bfc632de8ffa343607066a76b2238da758611feb2bab70c2c9f85732c132affb395bd427ba38b3f658cc5e2ffcbe86ae3132bfd99697b1dba1b87f0f0097eba194fc7ffef7015b34700485afea89ba7ba7d04e8585ce8fb1cd9e48b69fd72f0f01bfe3781d01c74086401dfc9818435f1d979831c0f276414304e4c22418ecb28dd5722219c73d435b4b1fc6adcc43f9bcbe58e9db1c490f841ab3a9686c7fda8fdc13860ada1286184bdf0e71c630c5763cf988d2673a209eee41eb9d11120e6d0e61e052498e574ee87c16021b41729634752cc2bc5abf028b00682d0431ed977b41442730e6198c131a225a2e2de0072da2ab48edf003cd808ac10868d837f3e6eb7854cbd2d3dc7b772b13d2dcbf8ce740b870f9aa5241e68d6e3a4409a571bd71f58a36fa8a1e8011401419d5fc569c8e8de99aeeb5e570efa0fde28fc0c3db9da3946c3536fc9d92e9cb123659994df584ef38a38d4a6287744fa562e78cfaa29bec80c1b4866cac6f7ec7a880b52381996915395a5b3b0e176a56531db74e4d620f3e1042ac52cbeeeb4f5e5abba6a6b6870d68ef16a7349b897bc35918035d06a858dd1732a60df2d2b2dbaadd719e0eee2ddec5897a30cef5452f6c68791861f8ec8833466cd8ebec43347e62fab762583e31cbc1d8bc78e31c3b82922d894cfddbeaf5aa5bbfc636255d26b59ac4619e82487754f5964e36a4da582f1168ad72b59b8ac240fd3f2d9422cf0df999ea164fb1908117fe038ea4c6bc62f0c9301ad7b3387596eaf58a6596435a283d77bb34405f369ed20ea57331e6c8d6c1fcdf912b76fc30751bf1eb2f7ec4a0b1ee5d04b14b5694b81ba79d54a7c6ae7a6208579f743fe0cd4d7db63fde0c113607b838b44f3bb0a4f60e3efa53c73d2b0759b60c1c65e5694910ed266ad79d5cacd7b32170edfe3a14e3ee46ad4f5c3947c1d90bbd43a01b51548c56f874c95b725c69e7998743deec38ff24081f6d3b7b1369673f8ee19e5908b3b54c12ebdfc023d75eab88251424e50cb20d30395f971ecd1ef3fc15e4abe6badc7fb9f8811eab4999b2465910fa4c432c468c5487b18b5638d4635fcb6f1334e857a55e5ed9c9000f8984aaf4b4a0255419f5ac91cc5919fafde3640cb8174652cdeb2bbc7043596247d9060f60bf1177a30d8d2c80d5981312315eb53322d508242b1b7b075b090b57e340b89b5687ea36a790ccb6a2ca6c136939dc402472818e737e4d435f19b8d3122ed5ae60984df89da338faffb8ab86736efe42d44e7411fc1d8d0b824a8fad7e6c454e225152ec721951afafa1e4eb3a437c4e88791f0ee324dafeafffab0dc1e359e7aca3007db319a29953a4bec0485b1f40b20488904b6f96c17480c2a6a1fb83d066b8c09385f0e4bf615847e981dbfdd577cc4bf7bac4b72db5aa95f18cf8e8113398fda1ffbc9e2591ea26110a0175701c23ffaccd35ed3b80cd67c973630976c904fbc9d853679253ab46f5de1560ffd36f4e38e78b1d1f9100572988f41297ec02ed39ddfdc7e9cac1f4d836bdc2754ff77ed668e047d2dd663eeed3654ebdf1d80c6e9d35d729234fa650e38443b45bbc4f54fa6637f450cb358f727870e09435fd551e737d424e17dd4cb4035cb297a75ec45b4130b26ff8a86ec66fa4bbaacf73246086011810f6eaed4ae25ba6aa3017c51cdb02df09ece9bd8ad54c3cdf003c146b8db936c77a64b394fb3a69c467d67897e2cf0cd679ebee731efe08e5450eac595d0a0fdbe0972617ec34f952722314d66a603d427fd84b48587bd131806870a17af3b9f599f55a3e3d08e55284d63a9bdbebfb902c2240aaaf368081e2338e1a1d31267048f956df913e653fc85198556f93b19b2f6716c7ec16c9de8fee3fccf19146bc82fc399e018feae4424e2d731c331b19b2f2d79b501dcbf284c82dd26d532733a0f77e6d4aeaf911b0bb5ae99f24178657d957223641e92163408f24845218029b3a045c76ae6045918d71777f4988cf121f043d92678aa5cf139c13c74341094f8f2f3cff377e98e9e9d5bc44d09ee1affa82d570de79eb826ba049594f9ee1e42185e9d14a1fd61a5d224950f89d08cf934e797596f13126608894a5fd71c0da10bcb5cb494d81542c321170e0b2c10e6b697864957512b80e41259d1591b9ebe2b758bcf6a08d35e259c7e92cdcc1c377d2eece609d338253d6baf9c10ff05c912a6a582058e8343103b780bf6208335b745cdc451e1095c17d536d1dced1460821eb2829108dc38265336e2ee2a22c3be0d1497872d38ae45664c22aad8d607b019f0b0431c265b58ea543b16f5b636d70a0afdbbf48903107c249e21cd8accc2a4323928a100a23701af6ab979fb23e1b0d2000eee01baac2316b47f96371dea498ff871f478f6203459ec29e981a8053dc1e7883c3ab772a9d9afa90a5444a518c1b4a5d73226f6badb8b30ea55d155d6dd26fbaa7ea40d1696a6184ecf825b6c9b1444e874c6a395f74912783b4f87f3e6023cfe12a563aa0e41ca280</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-xray">      <input class="hbe hbe-input-field hbe-input-field-xray" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-xray" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-xray">您好, 这里需要密码.</span>      </label>      <svg class="hbe hbe-graphic hbe-graphic-xray" width="300%" height="100%" viewBox="0 0 1200 60" preserveAspectRatio="none">        <path d="M0,56.5c0,0,298.666,0,399.333,0C448.336,56.5,513.994,46,597,46c77.327,0,135,10.5,200.999,10.5c95.996,0,402.001,0,402.001,0"></path>        <path d="M0,2.5c0,0,298.666,0,399.333,0C448.336,2.5,513.994,13,597,13c77.327,0,135-10.5,200.999-10.5c95.996,0,402.001,0,402.001,0"></path>      </svg>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> 周志 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 加密 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>[AcWing]842. 全排列数字</title>
      <link href="/posts/2eede509a240/"/>
      <url>/posts/2eede509a240/</url>
      
        <content type="html"><![CDATA[<h1 id="AcWing-842-全排列数字"><a href="#AcWing-842-全排列数字" class="headerlink" title="[AcWing]842. 全排列数字"></a><a href="https://www.acwing.com/problem/content/844/">[AcWing]842. 全排列数字</a></h1><p>给定一个整数 <code>n</code>，将数字 <code>1 ~ n</code> 排成一排，将会有很多种排列方法。</p><p>现在，请你按照字典序将所有的排列方法输出。</p><h4 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式"></a>输入格式</h4><p>共一行，包含一个整数 <code>n</code>。</p><h4 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式"></a>输出格式</h4><p>按字典序输出所有排列方案，每个方案占一行。</p><h4 id="数据范围"><a href="#数据范围" class="headerlink" title="数据范围"></a>数据范围</h4><p><code>1 \le n \le 7</code></p><h4 id="输入样例："><a href="#输入样例：" class="headerlink" title="输入样例："></a>输入样例：</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">3<br></code></pre></td></tr></table></figure><h4 id="输出样例："><a href="#输出样例：" class="headerlink" title="输出样例："></a>输出样例：</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">1 2 3<br>1 3 2<br>2 1 3<br>2 3 1<br>3 1 2<br>3 2 1<br></code></pre></td></tr></table></figure><h3 id="算法思想"><a href="#算法思想" class="headerlink" title="算法思想"></a>算法思想</h3><p>此题，适合用来理解<code>DFS</code>。<code>DFS</code>可以用<code>树</code>模型来理解。</p><p><img src="https://bu.dusays.com/2024/04/19/6622634b9d95a.png" alt="image-20240419202755100"></p><h3 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">10</span>;<br><br><span class="hljs-type">int</span> n; <span class="hljs-comment">// 多少位数字</span><br><span class="hljs-type">int</span> path[N]; <span class="hljs-comment">// 装数字</span><br><span class="hljs-type">bool</span> st[N]; <span class="hljs-comment">// 在DFS的过程中，数字是否已经被用过了</span><br><br><span class="hljs-comment">// 参数:当前递归是确定第 u 位（从左往右看）</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">dfs</span><span class="hljs-params">(<span class="hljs-type">int</span> u)</span></span>&#123;<br>    <span class="hljs-comment">// 从图看出来的。</span><br>    <span class="hljs-comment">// 第一层确定第 1 位数字，第n层确定第 n 层的数字。</span><br>    <span class="hljs-keyword">if</span>(u == n)&#123;<br>        <span class="hljs-comment">// 确定完毕，输出</span><br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++)&#123;<br>            cout &lt;&lt; path[i] &lt;&lt; <span class="hljs-string">&quot; &quot;</span>;<br>        &#125;<br>        cout &lt;&lt; endl;<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    <br>    <span class="hljs-comment">// u &lt; n 的情况，在递归中</span><br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++)&#123;<br>        <span class="hljs-comment">// 这个数字，没有被用过</span><br>        <span class="hljs-keyword">if</span>(!st[i])&#123;<br>            <span class="hljs-comment">// 用一下，这个数字已经用过了，并且放入path里面展示</span><br>            st[i] = <span class="hljs-literal">true</span>;<br>            path[u] = i;<br>            <span class="hljs-comment">// 递归下一位</span><br>            <span class="hljs-built_in">dfs</span>(u + <span class="hljs-number">1</span>);<br>            <span class="hljs-comment">// 回溯的时候，恢复现场</span><br>            <span class="hljs-comment">// 因为有数字回退，回溯完，下一次递归需要使用新的path和st。</span><br>            <span class="hljs-comment">// path[i] = 0; 可以写，也可以不写，严格来说要写。</span><br>            st[i] = <span class="hljs-literal">false</span>;<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-comment">// 全排列数字n</span><br>    cin &gt;&gt; n;<br>    <br>    <span class="hljs-comment">// 从第 0 位开始（从左往右）</span><br>    <span class="hljs-built_in">dfs</span>(<span class="hljs-number">0</span>);<br>    <br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> AcWing </tag>
            
            <tag> DFS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>[AcWing]3766. 二叉树的带权路径长度</title>
      <link href="/posts/6049e4bb40ad/"/>
      <url>/posts/6049e4bb40ad/</url>
      
        <content type="html"><![CDATA[<h1 id="AcWing-3766-二叉树的带权路径长度"><a href="#AcWing-3766-二叉树的带权路径长度" class="headerlink" title="[AcWing]3766. 二叉树的带权路径长度"></a><a href="https://www.acwing.com/problem/content/3769/">[AcWing]3766. 二叉树的带权路径长度</a></h1><p>二叉树的带权路径长度(WPL)是二叉树中所有叶结点的带权路径长度之和，也就是每个叶结点的深度与权值之积的总和。</p><p>给定一棵二叉树 <code>T</code>，请你计算并输出它的 WPL。</p><p>注意，根节点的深度为 <code>0</code>。</p><h4 id="样例"><a href="#样例" class="headerlink" title="样例"></a>样例</h4><figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs coffeescript">输入：二叉树[<span class="hljs-number">8</span>, <span class="hljs-number">12</span>, <span class="hljs-number">2</span>, <span class="hljs-literal">null</span>, <span class="hljs-literal">null</span>, <span class="hljs-number">6</span>, <span class="hljs-number">4</span>, <span class="hljs-literal">null</span>, <span class="hljs-literal">null</span>, <span class="hljs-literal">null</span>, <span class="hljs-literal">null</span>]如下图所示：<br>    <span class="hljs-number">8</span><br>   / \<br>  <span class="hljs-number">12</span>  <span class="hljs-number">2</span><br>     / \<br>    <span class="hljs-number">6</span>   <span class="hljs-number">4</span><br><br>输出：<span class="hljs-number">32</span><br></code></pre></td></tr></table></figure><h4 id="数据范围"><a href="#数据范围" class="headerlink" title="数据范围"></a>数据范围</h4><p>二叉树结点数量不超过 <code>1000</code>。<br>每个结点的权值均为不超过 <code>100</code> 的非负整数。</p><h3 id="算法思想"><a href="#算法思想" class="headerlink" title="算法思想"></a>算法思想</h3><p><code>从根结点到各叶结点的路径长度</code> * <code>相应叶节点权值</code> 之和。</p><p><img src="https://bu.dusays.com/2024/04/17/661fc561aba08.png" alt="image-20240417204932311"></p><h3 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Definition for a binary tree node.</span><br><span class="hljs-comment"> * struct TreeNode &#123;</span><br><span class="hljs-comment"> *     int val;</span><br><span class="hljs-comment"> *     TreeNode *left;</span><br><span class="hljs-comment"> *     TreeNode *right;</span><br><span class="hljs-comment"> *     TreeNode(int x) : val(x), left(NULL), right(NULL) &#123;&#125;</span><br><span class="hljs-comment"> * &#125;;</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">dfs</span><span class="hljs-params">(TreeNode * root, <span class="hljs-type">int</span> depth)</span></span>&#123;<br>        <span class="hljs-keyword">if</span>(!root) <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>        <br>        <span class="hljs-comment">// 只结算叶子结点的</span><br>        <span class="hljs-keyword">if</span>(!root -&gt; left &amp;&amp; !root -&gt; right) <span class="hljs-keyword">return</span> depth * root -&gt; val;<br>        <br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">dfs</span>(root -&gt; left, depth + <span class="hljs-number">1</span>) + <span class="hljs-built_in">dfs</span>(root -&gt; right, depth + <span class="hljs-number">1</span>);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">pathSum</span><span class="hljs-params">(TreeNode* root)</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">dfs</span>(root, <span class="hljs-number">0</span>);<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> AcWing </tag>
            
            <tag> 二叉树 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第三周总结(4/15 - 4/21)与下周规划</title>
      <link href="/posts/e3b1009c0e89/"/>
      <url>/posts/e3b1009c0e89/</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉, 这个密码看着不太对, 请再试试." data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容.">  <script id="hbeData" type="hbeData" data-hmacdigest="889028f094df5c939f4119464b37a90c4f3c744f2967972bdf73dcb2153d99e6">e673c8ca06aefc9fd566f76e908c707310684ae5b1521629cc5fde21209b0814d2b442d5d57a8a1951978d9635e2a48b4ded424e00212e73fc5a3d8aba0ecae59698a3711542c20c3ddcab60165cfc56be82b5c60b0812e64082439dc1fdd18fe5db88e3baba417f4a1537df105e8702028de40e40817343b03654b548d7079c96160c52d602c9e2bdafeeb15e69919d159096053356a84a17c8833b394fa79d06932aa0d4979f14e1a11ce96fe9f29d398054b676644f7b3105e64a9ef1153818f9eb19cad9deabad3579d8cf2cda24525d34fbf4132c2195bdfa591a786f06cd4883b750a10e1e75b3107d92ebe01cccce7b36e2f6d7de0b2d6fef14b49b4a352373cea646ec8b7c5bcf94228a261f24fb036e4c25db5758d72924878ce91e1930a454ee0ef97c926dbf965e1ded2bffd86de66984127894ca8ebc7576fbf6fc1a13af54d3bd1fbcff9e4dbb51be0a6ccc189b08f6566e7ada89682b2006e300f7fc661e9a2cdae977c0ce163f8832c52405b82aa98bad124ad852b619364c5af4d34a1da58caf436ab5156a60e46518ef07e49f265f7fe822326d692d3c4e1b3b9cf3bbfaf912ab50eaa5b422f163bb3cad0192f44122dd37246a8b5326f0fa6a682a875fb461e72809b8777f2a5c76c75957f032338edeb590626dd02e63128536f6cc847e62cb7356c92ff3c9b74a6ae26d8f7dd6d2905a325c7afab5a9f2aa412f81d88dcbbe350129360f101c76ad4192453224987161f718151a0a4f77dd4b7a6331966b45707daec6f243aced6c6acd7ea5e15823b3b7ad56ec90dd5cafae95be2e4515956ff180775c5f347aa38ace25fd8139b8b034d26d1e953fe2c18bfd22321f6eda1ea552608564745cd925f3bdf1c7dc11f909e5bfec206519383f2733b81ba9e73a8723a5eda47ffca8b28e80af63e71c5fb4514a05cab3af59c5d0bb09ded30c8880b8920968f6e88c5d95c255ebefce94c004b45cf26db2e25a839b86e5f03921aecd17eeb67d5474fb05b10390556734ad897d27d68b1471f43c57fb5a34b839e87ff9b015fb8dd0c788c3d47db0a12d537c3f74f3e946ecceed521d74679cca5c187a8f0cbec116f7d025e51422ff859e50dd13ef5936d354345c042b732f651a58a9f2634777408db0d526908d65596306f3ab2fa11a253b1bb62a77bedb02d642b657ebe178dfa0b1a66b5384d7c7b6e10a0c11ed938b37a817b1768c83d8468542795d98b55cd60cbb9cd8ac0ef5675a3b50125efeb023a76b14fa4ba1f4b42c8d4e029e822529bc5c5f8b99412e981368225d222f305d63b32b51920e4cfe018e6dd73d48b060bc321688df2d97b949c3c5760655a46aec1fa32da01cd3f1526d70273734d4ebf18bb15b53febe57f0b45775bc1f20b9f185a5cf99e98829de089e4fb24cd425d0912d94512f4c6937846bb0c9772b02d26ebae11ef5d84afb85cdaeefef71cb3212997875755cf6fe552d17940a1c1c0d454067e1983daa2aabcb20b855ef0ecbe21fa26f34e970e22c060c04f329053c299e3ad28617f36abc235604a4691ca7a33d6db0a94432530d2d2e0d11d7655f2d30fc5967e8fefd513a4b706c12c93c7bc2144af605a5edcc9e5a8951ba90e2cfbd5d076ea9cb9218d78ed15ab1e837f1750dd626292f67267d57a6cd1bf2ca28eeaaa6e48523f0c8bf4b17b972495730418bec6821710075cf2910fa8772cae7d9550da9cdab124c1876ba6caeb1840b70e1f80ab56731f4bd82a694fc1567cebc73bae0d37dfba3f78e29d1767cfe6a9b3eca0d8928e6e2ed30a905f33e47ea97c9c9fb47fc982ed4695d39f2039daa1815f6e2398ce8c551ee29bd805dfdc24ef5de8fe0eb38f52da5ec942af292be0867aa6c919ff3579d4c0243ce3fe50e5630455399638226c74b824a443e194cf097bf1b5e103ed573061ec03affbcd43b2ee54e3b83ffd52880f7de3af0f935fa1862951adfaab2150033b5371ab52d4ba7b623bf018af295eba0d4401d28724ada9435662568af085deedaa1c1ecf3782a5c0ecd667069d08faefd08df091c00a1466f64692eb321b0cb13fd8df1d41ab4b5551336bdcbbfd9cde398d02620c20b94ad68999d5518456509f63c165e6260d5c402dbbb5a6452e429cf24df0cd6bc2b1187d8a49ea96e6a734ad03e53edf161516f4b51af0861b582c32af60134762c53f64d14ce5173b21ec110b737e6ffa3bf21fcc19943b2ba81683d15669849b06ef6873a3a128427b09e9b26d7a14f13ec48a6ee637c1de932461a817f5fe84964bf122c970832ae70e0a927fa0af3f4a5730059c9a127776133e4d3a37e4c42f2978435fbbfabe1deb617c27e3172f44b5c9c0c56507f8231ef60da3cbfad4db2da21286a85095ce4f3d1479eb0e4aeef427026dff40c7f5746a42557d19358a15eebed1ce59f3e8ca6a01a42c79b078711a00eca2fcc4d9c76398182b70b5ed3a946f073652e5b2a91acc3a0af094f9d45a3e60afc899112d175bbf5e1caaccb53828322e7df22600ef5e743a714e084eeb87adc1ef006f55471409c5e988515215f714ff36f54b16be8abc92f871cf9047b296cf19f866f8efee0f98b43fc38ba82a54c63940fcd97a802f34ffdbf96ed2260c0b18551fa40f0f844d58ea12f720436014e0da9655632da6283557207dfd54f79b86ee4e83985a33abef998e95a4f6704d6a7939d8d2b1a37e40c820993ff7bbb90f0b6465ffe8e0bc75b7eb84fdc386011d70f6abe93cef24d38e5fa0226b548fd73f9ead572b517209743c4afb0297142bf6763e971d2e3e13f8012d7457cc1c552d41f1e6d95f9a5e1034e248288e764d9a59586f20bd555dbe371297d3c43888d25</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-xray">      <input class="hbe hbe-input-field hbe-input-field-xray" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-xray" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-xray">您好, 这里需要密码.</span>      </label>      <svg class="hbe hbe-graphic hbe-graphic-xray" width="300%" height="100%" viewBox="0 0 1200 60" preserveAspectRatio="none">        <path d="M0,56.5c0,0,298.666,0,399.333,0C448.336,56.5,513.994,46,597,46c77.327,0,135,10.5,200.999,10.5c95.996,0,402.001,0,402.001,0"></path>        <path d="M0,2.5c0,0,298.666,0,399.333,0C448.336,2.5,513.994,13,597,13c77.327,0,135-10.5,200.999-10.5c95.996,0,402.001,0,402.001,0"></path>      </svg>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> 周志 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 加密 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第二周总结(4/8 - 4/14)与下周规划</title>
      <link href="/posts/132dfe66ee9d/"/>
      <url>/posts/132dfe66ee9d/</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉, 这个密码看着不太对, 请再试试." data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容.">  <script id="hbeData" type="hbeData" data-hmacdigest="54fe2eb614a4591dc0cd6fe3205b343a0602da356c2f286c39f766fb72e3c01d">e673c8ca06aefc9fd566f76e908c707310684ae5b1521629cc5fde21209b081440615059111ca942f2f251783284cea21ced08223624de214a5926aa8247bbc65092b6fa39ead19508aadcef5c3ee7a74d96a50ab26d770064aaf5ad89e02666fd3875200aac86754786dc68c87fd99773d3ed6484b498670cf5bab6d4ca163cc26468b034a4cbf9a4075d9008f2a1be4e9bebec9471a0ba8f5c7019651ee02b12603bbad4d408b406e6192cd007e1df7ecca6b62378ea269660b3068680d556b08d2ea294f6a5cf704345237f062cfbf0d3bb5e12ef0e47483a84aca890060f153846ab2f8a2d8a3358bed91fd2d70b1241960386a35b583260aa91fa52afa1af665824335ed939705d8960ea0a1f2fc21ec127c74686bf1979993b38d73f52457fe101003e6337aefea82aec510888f2eeb4a6c64cb48584c10e4ca84f7975e7718d2bb6602075350dac64ef0d41b22c4453d794b235d72d73ffb98cab0e6d1c8622900282a552f4604ca8c55927ae18111e59a94af7758324519ac76f91d15072b8d1b1a485845dbf258d5c705a01f77a7b26bfb3852637fa8ee0568f4fea2578678cc7b707381a6ba27929616dcb0fb95abbd1e5216db5406c3fe0a24c85cba8f849138361e4fd4ffb02802936fdfacfbeb34357e12479a176b0888dd600577468b45198139b891c74ec7897ba18c866518c0af7f0c13e7e8bb9ddac70d064e569ac7c6005f531f9c0c5902a6a23b803d82585662fbd9e7007f1cd07461ac1cb0e4963afe83ec972e91d09a436de834061fafeecd29614325152dc873ff173a0045797dcf08cec55c074ba7c2e48e364c5311700af4e267a7042f04444e8070556b0ff5c9c5b3d62fe55b6fc12f1bc7aa47ec066203f5b9be0b563c29edd4c6ed120c2e63ed274a0945416d412f69dd888dfe48e1301b704268702837b5d80ba7fb30000b0468c00fec10cf527d8fb9ae5747bb6d3c51325ea3b80427f381a06b5dbb8c190fe265cde516e6aa8f6a371d39f80783c1c97070f9a1eea37378ad83e1c7b18ff07b6ee1623ab7b397072fd5777a5154d18bd52277eca8917ddea946f592743fc9f0557a9ce95519c69f062e541cf274783a83db2855f4efc5d73b240ee9f4661a9dc1a01c3a5169af7548bbf94c86ff4c7b8b56c0b954a5fc037e762a74a803d8f3cb96389cdb5e58a67dc952310e8298eee4af7537001d8e98fa3ba51ce71e6b79703922f44e8942e2760d2635d39ecf87d2b449fee0969aa14a9a7526bd258326b7cdee8820331f9d37553b660aa77885d9e5d8bbae44656834d8345771d085568fdaca22028219602963d2c599cea4939c4ada03b623c94a7186d1d04fc25d0916f45ccf1204c7e5b96b4ea44eec17eafc64ba79d02bb1861486f0298878891775f43808d0499467c7c007daa13a08ab54f53206d233c9bb4e7efe52f1f6a907c80f55bab2608dfb075ef06ae600119e9b5050f2c18d143e84ad399cdfe5be3ca1d6e36263c633a1184af2d0b4e0c461d20d345e25a32b55508724f1ad2a72be4988d3ee4abb24aaf10e2652de0849a846b1cede2c62ff7a597100260f672b6842858ccdb15043f493c3bb80985e4e177413e11ea6f27a3e638bbd0f66e4ad8c97750da1544f9ff299e41cb6c24e34ac1501c39b64063d966112e48ff1e7219feeb0ab993e54503090296a2ff964423e1efe583a0d207916e24268849d92418011169a4d575aecbec61fdf1258dc5c86ef6025e471e645d76d47fa099ab51ddec424af319ee9e9511642c3123a1bba417e13f332256e592f43de9fa4be10a13e8e7f8269957a75a9f80212f7c82605770862ac9984f56a5c1e86797d6748f998ab8834c784fe49669d2a9e04bf102f855ff62bbd0a3bb32cdc331e3c3c04c9d097933d5cd3e2a38a04519ae0f70b381ef9332c95ae89d6a2f28834c5fd2f5883d3faa55e03bb7d7149da6a926a915962eeca8052de806383d32b7e7c2f422c7717d3116cf43c347c4f0440f202431c07fb2ab9019dcaf8357008940df91f5d0c3d6039a1271edbbf0988a7dae9fee20838e712884bfa3f9089b75ea4c6dda9565f5c1801e4deabe393699132ef06f5bab8c5f92165a9abbd1627140647656be6965df2779cd967aeed81d3f3001b206cc458363488e0e0ce420bd3d6f08736187d90d35ed0e69cbcaa5847a3ec508adc18d5993329801150c66198b764c1a2bacb01a08234c916733bcec55d03f0ad872d39852fa08c6956696f536d160c3b747d070d875f4529cc35b4bd9f12befd915fb245dc3aedfea68ce449a74f15b88dca186bb014581461b6a4242b0ae2273645388b138cf7e4de58e70c0da7440b36457d699de671f073f3ca3c4b6d045f9acbe1cbfa343efb61c9333e8099d56176a8c04d201cfffa7c5120871a7ca3e04b9184a928a9d6c80b1ffc1538c638cbfa6fb20233a30ab1fbc8a1e1b9e4ef6657aee2aa8727415f0ca0d3aff4533bc47a938519c513bdbf0b347713457dc0d8a3da2fb3c2643e37dab70a5896221ffbaac1d7d1c7db0d0a679eae65d600bfafa3bcdd83fd11b1cf689d3550b458acf78d19b6d06b672b05201cad5553e8135d259bc311a31ca9c08779d6aa8a2ae18f94b82b3f5788fe3a7133332905d9af2ae3ee409277e3e6e6384c96dc52a10660460f04c5cca986c6c734064643276bb165567df21301186d2cb9424d8af44c80421a1d0245840841d06803a3ccf08a1c15b6e9795994f73ae5e9f108ec753f7e62a8e8bbe67e12e0e6d1f88607e7554b1729389e7b5bb1e772e52e6659a64c3746f59bfb474de41a2990e00da0f4b4e7279df56b84cec0aa101a409009ca6a738f97751ed1e57db5a3983a94072514dafc4f6c946fe82f5113bccdef304e9e9a8826ec785bd9cc7a091278dbbba6634d3a5d977d11178677a28641ebb24a2ec196ef256a2ec1f41865b28ed56962e270a0de0e077a12b9be6bce7ed33b41e166b8a69774e331680a456dfbbc5ae781ec09e0acd1df726f482b322de99c4734cfdccd384329cdf5f4d620040d8bd8226871538aa805f3e82a75f7ae508d0db8f236f110076a5ae35b6c4c2bbb2a51478de6338554ccf5983bbb8b2e01ca733f737a87773389c7363337a6ae75eb2c074f2b963e418a8f52cb108dd8cf3cd4016e6651b3883b034e2ce966afbeeb3738bf4820a4f8bbe640e4a817e676f925b6c7967530b3c8eddc5b6976c85a65f58936a895243fe8fe5d010f1679988a7d371a2bb5482332529466e3f3b767479fc0f18ffee2c109214c9e701d2114dd8a50802af2ca42e00a081007eec36cd229604002ad85e617b4013ad3bcc47d96020fa7a109379c7db93bf0e43367dd333c779472b2634e8eab0663364d1c36189f55a8ef8c28fd2bea3eaad11da958373f0c4ceac6de422f90666c203604ff386f79d6b43aa0623656bfa1910ec823a0c21b1bcd2356a11950435f6a9f69e733eaab9ce12fb5c09b31ba859072c8127107a820f0246d67ed962eebc7aaf9ada4683730012d6e28c99f918ba4df68d5a1d43ec1c91f841ae0a7f53e6ecb1406bb0cb6882831d03519be1bbd3c59eed93b6f252774683e75d448d5e39246465d942931eebd3d04c845c3807a33282b7e8fe6847dda7e591421ef46258fb18c5254883608c9d08f4618bdff30929178c68521858d35b13a4a8c6e91e888dfccdc7b964d1df1b80d3a6a345660382ef4b99628a858e98495c87be8d3f300e0fa466a61c9e999d278dc7f98fb316ef4220393b917b153d43f51fd78462c8d1f74bc9e1092bcbc972f72fdaffafe675709ba29866e6736aeed1b0f1045f16deeb8df7937f76ba739fd07d36bf42bb3cc52c073d4092e90254140f989ff7ab5a9ec438e1eea29a0f4b0577ef6f975d6dd306119d2a52f346464dac4d10f915ce70a3cf174a7a40d709ebf56f26e0f3bb1771b65bb887664be161cf07322ea171279ecc45d813dcbc09360f8c4728fcaa435ceb8d74c936730bd8f3bd10960879e91a3b49b9f5dcabe369555ac4d1fc23108fec294da25dbc9cd4218d001068e74af077f57c20d23ca4fd500a776a9eea66e7231c05f473b781c9dcbf3bd6a876ac78a043932eeea47f4170e7b7d873a5ff4a487e9a072155871d586607f2a0de5dba4e2e876c0ead06c46c111e2c10cab8ec3c9c05ba6905c13861149285a0447c97e221d0123e99a5ac0c6262c4d7168cce0dc058601744258155f29ea66517b421f114d4553f99992fa2e72af5ac384f71631a61cfe2cdc50e1f7143cedcea599f59772342780c60e6fc5e4ee9267cce6440a1a81e6b4a10e05b1ecc0f9573ef12f36b7e5247cd54d9b2b15734ea95d014d7baa76e4f2d53b8dcddf07013175371b748da7f3ba8607b63bae07a41835b99c393d0a40947af1d28e34079dd8a987c64259c214eff4e940b502a8cc45283299ae3753af178e3c13291790742269b927c752ae91fdac1ae5c3fbc03a70d7716da5da65c8b4fe5f7b803b587e694c49b2d0c1c2ddd7cdd51d5a160c3f6eaa08201af37abf31f09426644f917c5b2c71379d947eca8edd94f72e0342e89b687859843c8b5e2c4aa223e42da03948907eeba994bd808606e7f4408e1282855283df579f6ad695a1f19e88f173ab8e33098da2415d813f570064d60e3c79a0cf537eb0901de1cbd8443b4b956d09919cbbf90c52fc732879c15b36c8b44421f600ab45f46204f38a3064d10e56b6516ad3feccee903004c1917f33c4b1521c94d83e26ac2f79a221ecfb06cda65ca67951296d024f799c0ca63be49df268265351735a2a3a16b8add3685cd9a0dc623d539f2db894588f8e74ffb4fc0cc382f91616c1d6b5e3a223e7f13ef1b748c7cc841e02447eb0092adb0f3c5689b9852b1d6644955124507a314558d36d8db50e54381c829136a49152c1642031648d58981afac98fdd68b263db1a79faf5d0662f5c3b0f81f798153ab03286d302978accb33428e20b3c4b01d1e56f59c72ab3ac985fdf4c7148f7b8f70cfb1e7fdbba9f3a5bc0e6f53f008b5194791f6aa5afefbc8b0a0310bc5b51c5bf9b648e2588aa604c583a960cdcae4214283a1397df8a7b901f413dcce91811d72d47c6b8afdb6315b78be3dc3e8a7183ec87630fe054d52b0f6ac0a9d1d4080a0caaa36e2256dd254850eb4d285fefc2cf2abc029d2ef5ee0fdaab1336b1aa413ae3fafec79ef08497ef26b0ce7234cdc0e77bc</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-xray">      <input class="hbe hbe-input-field hbe-input-field-xray" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-xray" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-xray">您好, 这里需要密码.</span>      </label>      <svg class="hbe hbe-graphic hbe-graphic-xray" width="300%" height="100%" viewBox="0 0 1200 60" preserveAspectRatio="none">        <path d="M0,56.5c0,0,298.666,0,399.333,0C448.336,56.5,513.994,46,597,46c77.327,0,135,10.5,200.999,10.5c95.996,0,402.001,0,402.001,0"></path>        <path d="M0,2.5c0,0,298.666,0,399.333,0C448.336,2.5,513.994,13,597,13c77.327,0,135-10.5,200.999-10.5c95.996,0,402.001,0,402.001,0"></path>      </svg>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> 周志 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 加密 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>[AcWing]3765. 表达式树</title>
      <link href="/posts/4d1178f3e0bb/"/>
      <url>/posts/4d1178f3e0bb/</url>
      
        <content type="html"><![CDATA[<h1 id="AcWing-3765-表达式树"><a href="#AcWing-3765-表达式树" class="headerlink" title="[AcWing]3765. 表达式树"></a><a href="https://www.acwing.com/problem/content/3768/">[AcWing]3765. 表达式树</a></h1><p>请设计一个算法，将给定的表达式树(二叉树)转换为等价的中缀表达式(通过括号反映操作符的计算次序)并输出。</p><p>例如，当下列两棵表达式树作为算法的输入时：</p><p><img src="https://bu.dusays.com/2024/04/04/660e9c3f2bab7.png" alt="QQ截图20210708095213.png"></p><p>输出的等价中缀表达式分别为 <code>(a+b)*(c*(-d))</code> 和 <code>(a*b)+(-(c-d))</code>。</p><p><strong>注意</strong>：</p><ul><li>树中至少包含一个运算符。</li><li>当运算符是负号时，左儿子为空，右儿子为需要取反的表达式。</li><li>树中所有叶节点的值均为非负整数。</li></ul><h4 id="样例："><a href="#样例：" class="headerlink" title="样例："></a>样例：</h4><figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs coffeescript">输入：二叉树[+, <span class="hljs-number">12</span>, *, <span class="hljs-literal">null</span>, <span class="hljs-literal">null</span>, <span class="hljs-number">6</span>, <span class="hljs-number">4</span>, <span class="hljs-literal">null</span>, <span class="hljs-literal">null</span>, <span class="hljs-literal">null</span>, <span class="hljs-literal">null</span>]如下图所示：<br>    +<br>   / \<br>  <span class="hljs-number">12</span>  *<br>     / \<br>    <span class="hljs-number">6</span>   <span class="hljs-number">4</span><br><br>输出：<span class="hljs-number">12</span>+(<span class="hljs-number">6</span>*<span class="hljs-number">4</span>)<br></code></pre></td></tr></table></figure><h4 id="数据范围"><a href="#数据范围" class="headerlink" title="数据范围"></a>数据范围</h4><p>给定二叉树的非空结点数量保证不超过 <code>1000</code>。</p><p>给定二叉树保证能够转化为合法的中缀表达式。</p><h3 id="算法思想"><a href="#算法思想" class="headerlink" title="算法思想"></a>算法思想</h3><p>很容易想到这是基于树的<code>中序遍历</code>的算法，难点在于加括号的时机。</p><p>通过观察发现，除了根节点，每棵子树都一直在重复做的事情：</p><p><img src="https://bu.dusays.com/2024/04/04/660e9c45e6e6b.png" alt="image-20240404195438756"></p><p>那么就会有</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs c++">ans += <span class="hljs-string">&quot;(&quot;</span>;<br><span class="hljs-built_in">dfs</span>(root -&gt; left);<br>ans += root -&gt; val;<br><span class="hljs-built_in">dfs</span>(root -&gt; right);<br>ans += <span class="hljs-string">&quot;)&quot;</span>;<br></code></pre></td></tr></table></figure><p>在中序遍历之前需要加上括号。</p><p>可是，有特殊情况：</p><p><img src="https://bu.dusays.com/2024/04/04/660e9c5cd7fef.png" alt="image-20240404201019068"></p><p>那么就需要特殊处理。</p><p>当碰到叶子结点的时候就不需要加括号了，直接输出结点值就行。<br>也就是说：<code>只有叶子结点两边不加括号</code>。</p><h3 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Definition for a binary tree node.</span><br><span class="hljs-comment"> * struct TreeNode &#123;</span><br><span class="hljs-comment"> *     string val；</span><br><span class="hljs-comment"> *     TreeNode *left;</span><br><span class="hljs-comment"> *     TreeNode *right;</span><br><span class="hljs-comment"> * &#125;;</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    string ans;<br>    <br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">dfs</span><span class="hljs-params">(TreeNode * root)</span></span>&#123;<br>        <span class="hljs-keyword">if</span>(!root) <span class="hljs-keyword">return</span>;<br>        <span class="hljs-comment">// 遇到叶子结点</span><br>        <span class="hljs-keyword">if</span>(!root -&gt; left &amp;&amp; !root -&gt; right)&#123;<br>            ans += root -&gt; val;<br>        &#125;<span class="hljs-keyword">else</span>&#123;<br>            <span class="hljs-comment">// 非叶子结点</span><br>            ans += <span class="hljs-string">&quot;(&quot;</span>;<br>            <span class="hljs-built_in">dfs</span>(root -&gt; left);<br>            ans += root -&gt; val;<br>            <span class="hljs-built_in">dfs</span>(root -&gt; right);<br>            ans += <span class="hljs-string">&quot;)&quot;</span>;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-function">string <span class="hljs-title">expressionTree</span><span class="hljs-params">(TreeNode * root)</span> </span>&#123;<br>        <span class="hljs-comment">// 处理根节点的特殊情况，直接处理左右子树</span><br>        <span class="hljs-built_in">dfs</span>(root -&gt; left);<br>        ans += root -&gt; val;<br>        <span class="hljs-built_in">dfs</span>(root -&gt; right);<br>        <br>        <span class="hljs-keyword">return</span> ans;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> AcWing </tag>
            
            <tag> 二叉树 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第一周总结(4/1 - 4/7)与下周规划</title>
      <link href="/posts/216a02683518/"/>
      <url>/posts/216a02683518/</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉, 这个密码看着不太对, 请再试试." data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容.">  <script id="hbeData" type="hbeData" data-hmacdigest="0e0c679d7feafcc9d0c2aa66f93997a13d827a30477d5d0f72ff0812234a3cb6">e673c8ca06aefc9fd566f76e908c707310684ae5b1521629cc5fde21209b0814870b88c966fecb0cc2e967028af3411eee7300cb80bbf274f423dd19658f7505c530642711d548c2dc40e28f93eae2df7482b8d7f287346b0700bc0a6340105e6ea3aede3f037af485f18b8b3bed1367387e302de213c7661d9311e5de8feb9732ca67c4573b20edc8ef5bc3525464e85c21b047d751374412e1463cf3a1916e8dc86e753f6a76827c450ce814391ede13b13708368897ddf751d3ad12d75ab7133e419f45a4daba29d4481590da59f287b85f357d28fca03170453ea227274644608fd462f2583ae33283f8743e5b57ebae9650ba1c2c522a73c49277e7f818b4431fbe5ff793fea52c249e7afcef85a308419edb0fefad03f15809f45519fe8c7a8708c35d74100c7086b7ad28972b1e75ca4016ebebf8ddae22c333e262e490409525fb7934949c1986f5bf59394f88d55a073260d2e9b32bad061280a3c3f7547da3daf47cc63cb300bee14abb49bcd0f7bd1f45058ce82fd0046ac77c135f286d65eaf6d5ed12ed7924e83ad033f13b2385c6fb254d67f5bb56f986d6920740ed912071ee156e64bdc2b418fe3a02f1d35744e03b1643bac3e1f27329e2b2c087e123e026353bf929e9e6606b5f7dbf9dac23db4275a990b4f63f422a32d1c82c115b6f038cf05bdb7d0b63e1af02405c17e5b5afcbdcbe549229ee0dfd451cf3a4da25d9f9b857eab388167c95d0396598c5e8da793e6889421792e10ee2a97328e78910dc679a18fd4ee0caca158b028754a4a0eae729875bffa3313f6f74dc7f3ac84d2dd6a1dddeadd6254eff498178e35afc40bbb0ed400aba75744d10837c389dfbb2313239650c73edaa70eb81b48c2929d57e7cb58888ee62da4a49d54745011b231d6913f20f4b4aad9755bc5ffe1322783604e37930b4125a7b12d0a397946f687a57cbee171764684ea69c1d0f7f1ac89d2929449466af2c2a90ee603de2c8547af4249ce635ce40ab3f9a509e5ca2cdfbabfb6f486f17f5033203745892373a04bb569a30b14e2d4bd5d5cbe2d53bd24edd801a51b06bbd28189e8c41ef9b2ec399a8fab257c23bbe98ec4d70f688b1d59c40eb229ac8aaeabdd02733ae8e083a1ff7b1dc9e58dbb4d9dcca755c95b39d01e057f06e24faabcb8fed7ab3758adc9013dfb9c1c8b9a4f28fae3dca392cfd84f7eb96a2d5849295e77c2d2f5b0a042d88dbb9db9e1d9d6376f8fe4775e1feb304dc9cd17672d9b90660b3936554039277744e40d248b436296ee908fecc9a2399d97e31d0318488deb60437a0ac1f1cf87d716c2df7fb79138188ea830dc4190da8139ef770a591f99bb8c4101872f9cb49de48b7470d64e17509d117a02420badf97e2a6785abb3433ebe1516912c02bc897956f2bf9a582534892ff7ad14bc4b8a936f36a60bd0f3cbf29118f4354127c00d1a1e9112f1e062551e3adcea9cb59e17349194e2f6a5467260be116b37a19ff20fddd3488f3231ef37859c69eddef5444225941eca15cce22dfd117a18d4cfa0d916584169a7602ce347edda5a803d76c2cb9ff7ff9b407a6c89d04227d896dd0694e676540ffc43d99606c194bc843c3283205f188834040d1b8f67f118fc7a53fbd1a92d62af6de5725cf3cca1942a2233e595be09e68d43afe709f1ac6c4c782c27f1c338f8cb1d91e354986a867def22dbd2cb6cf362609fabc464e6210a579abeccad63874985184b19ef62703957ab2eb0f20957c6bf1d489b0d2e0b2704bd958c46606e0beb0279cb9c571225a46bd7c1504e878f1822224e394362546d8fdd8ee76f68bd7e75c37ec7e488e25919244030f7cdf67f7bbcb40c6f2828e1967bf9b125d403619a3887af06751dcb3f1860425db9eaad334b330d2cf3674cb7e0e791d50f2e019a7484321be621f9add7aea8c74a90d81405771b067764f85cf874647a419b4957e3411ba824fe80be6fac4591b2ff31d6089edcc32c16d9d682255cf8026a5c3b4d97668b2411ea145e1ba346e8bc442895fb218a970da23c87fed093c33131d21600aca663bdf2f5e95620b857aa13d9d110bd76ed824f3b74d96a495568ff6fbd97d9938656f7b1b99ca3e1f764d228cb603b1ddb83de65353a13b51a118e0cdfbabcba5845577af9d7ff5919b4677afcc898aede7d585f616688a671b594af7afad2918e3b08df08ff2add06b3a23bcd6a7460a49d591905f3ac6dc609c749293025a2aeb20b06757667e2abfc8146cde114763f43c4287c495a4246f48a50c0853ab049bece83cdaed9e536ebb76ae18afb400ab539ad95a81f89f56092e19e9bc77a0bb9fdabf2ec2e949d40d6774deab16cd1ba93293993d4b73e8d4d53ffa347040ba62af15621da3b26f0949e5630e8f7eb58983e681f8774bea20f17e85e6870dd1a16227babe00ae8dc9a6fa4e03ebb07d4affd666b1eae87c79707445102ce2a5f631be9a634ebd95d8fda953feb569fbac61dc05e0fbf54a3624a390170fca78a148a9d01ad3fc3a743e2f4ea1173a9f28b3db4752690517f78e99bf2ac444d10ae0e71f9ec54bf9bce0a5654d0770dcf81f7175e9a7f1d8e9fdf5ba9fefe32f83aa8eaebf056061011b26b59a0e5d6437cae171f8c9febcd1ab79ebcb77329f0689ece6f4c87aba14548466c1f44b6afffa34e94bb1c30fdb7121937840b23ac0e42c2d1ee867821e1a5de98875b60e16b28aad7912e5e088b12ebf6e6c4c3a9d074dc4f3bf96ac79979051a514bd266b7fe07d050380d82d7d0c4355254dbd2569144e8629ac7fe6913db449d28af15846ebfad03b923edb4ec6adcd925f333cbb5a1a42f258e19e0f1f9c0377d75b469daaef5e7e368698aaa0bf5f27711a78684a8b51be1485fb48fbc5bae67682562d43f85dfc56d19e3dd96c926f19a7ab4c5d963b37f1af5bc0d4bce17c09125c6fd6d1336aaed5f02acd1c4b6b5d5dde44f3d01bf806b473661368664fb054cfae7b1552194c3c2335209b5857ff0fe4e8c77e0b655e4fad1b15b0234ddf4a11907af50dd17d7ef9a02e0607bf3c033ca34cc28be0eb849cfb64342ac0728c61562194506803a3082371253e304f4f00da52fb8d1105b13092e9261108446f9ec1f35fa43b49fa138ddc7ad8a3280aa499c9f61c572f8826392061bbc4372174fb6d6f2f6f77adf947fe27634bfa5f16562b78b0bb958f145ef012131f41bba37c1fecda639ccabaf074e890c8c1e6263fae5ae453783fecc511a4f170887fb48ca0eaf3e75205d868a3c788629b8b6000740d98f67a7aa0b550826c06430afbbd6f35877367d3e74ce95397ff6ddf1ed65cee771d9b22a2fe17f97e00fb9d4279657d01cc33cc1331c6c001777cc7892b855d3b14003e1e9df3c65d491ea8c4b58956b2d3b0f4cb6315a3c0cef2a83cbf81c3eb3e5c1ed8a02addbb74d337d9fa40387cdd215e342591eee13c8689e265c38d73c9039bd6267a06fcf8867f038780eb53a04ff743e8433c47f3e4178d2baa5f884e32d0475643e311c08056e820169305c52304db20ee34a1f41d8a8e1edead8eddceef5bf8fc1fb6f850c62605749c32d428925839cbd398b183cf22cf0bea285b8bcc524b2aee6c5c9daca2e82fc306accdbb8bd41c2c9e3841a99b7fda56ca282cb7863df41153c95d55e19dcc9397681945bf44d34809b8a10ad5f4a956758847b26453558ba1503e180be88c70adc465690d3fc9268db6f324cceef38a4e4de46fadcd687680956171035015b5283adfbc70563eb42fc38317ed2f588c56f39ee21bc2c54b3188cbd4cdb12e3cc59995d2677353ff823b1f3319f232e740c3de89f0cafc44e62b48865154188c7143a952d83f858408506600d648c9</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-xray">      <input class="hbe hbe-input-field hbe-input-field-xray" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-xray" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-xray">您好, 这里需要密码.</span>      </label>      <svg class="hbe hbe-graphic hbe-graphic-xray" width="300%" height="100%" viewBox="0 0 1200 60" preserveAspectRatio="none">        <path d="M0,56.5c0,0,298.666,0,399.333,0C448.336,56.5,513.994,46,597,46c77.327,0,135,10.5,200.999,10.5c95.996,0,402.001,0,402.001,0"></path>        <path d="M0,2.5c0,0,298.666,0,399.333,0C448.336,2.5,513.994,13,597,13c77.327,0,135-10.5,200.999-10.5c95.996,0,402.001,0,402.001,0"></path>      </svg>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> 周志 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 加密 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>美好的每一天～不连续存在～</title>
      <link href="/posts/ca2f7778875d/"/>
      <url>/posts/ca2f7778875d/</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉, 这个密码看着不太对, 请再试试." data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容.">  <script id="hbeData" type="hbeData" data-hmacdigest="f68918f87055a0d47fc2dc672cdb6f5409a0963f5aba9ff9bd5d6110370d3731">e673c8ca06aefc9fd566f76e908c7073bf122394db4047bcd924ce9ea37328240a38cdea58412a376dfb2c4084c8672e19e7fec2a499cc6cfafe0f544c575fc22968d157ace4fc995bc36c6fc521fa9124d0e79762ed71cfa3cbcfcd4f2370559b60818db7bb6248fa9ec9043fefa6ddd9daae6953ba901f3b971678481dcee1f13ad850e842de09a7c3163f96bfe109ca867b2dc83bcc21ac84d0a70d21b8084f6fc776f65dda5936baf3f89ed826708fa0111450ebbd723630f4858f9b52d4dd1aa605d1fe5ea68f715459a4654df40881da453aa694a3fb0de34b8a3ec0c8dce4495c591ac913f37de8ba201526361352d7c161af77bb1058e56adc7ce2a7bffbfce3dcde47bf495993af096840be3bc84addc5ff934878ba7ded3174baa97d74a6c200dbd8350fcdd0563c0fb71f0779028acf0b6987c59f5be9d8b40d78e1f83910af085d290f461c002d47cb650291f0b0838af5457877960f94bbb7d37e684d9a957cf73ff2a8131baf0860e594c83df1e20b554be188ad14e685bca8f18fc7a5ea63c98c078873d9ff1996cc9f6b694313d4d34a3936c46b8e987cf350381c26d5bba90e8f188819843872c38321f463a0af6c26f162228b995481d97218ab7c70c1802e49d9ffb2fc3a99a0f4d94412cfae73501e3036a9de2d19512724defc1c5be6fc89a489dd340453362a4e734d7c4ae050b7f3af45009146e67fc807bddb5742e1a15f4aff8c8c866aa4f6b0aaf2de85faa9fc4c0704bb125b768fb1688758ad898db8c2244459186ca8c8a7a6a620738a5eda2e3f46c642a4fb7d5215a2577d00d4d72d33cbbdb0c8b30e9887cc7a7af67655c510c5ad6d1bb94af0d9df7bb6ec27afd8280256786afddd48ac242bc24d5412b874251fa2c25ec61e705b506a9063e60f8d7a71c160d55a6ac8c896facf3c97b991bcb3cb16491e68eccc48cc52908ae6da136d3ab140c5061e1649b453c59ed4bde8bbfd50632dcd00bf40283cf1500720caa7c4b9417cc4e01e0547423488339da47078070d3778982e5735f2cba06162c4b2159e5f80d58fb3ce96a376d6067470d78d57f353acbbdd95f28cb6516a4dc7de7494ecabb6701e670d2681a6b5799c4657c07eb0d2076e83ee9b574f73d62b8a1a422fee27e2c098e8567f9490b2d233091ac07f893ff14bd86f9f785bfa3ff50c0c1bc117a1c1a0c14ba45a7c05c06eda901de9e73771fb2267f5a57d3d427d7bb430b2c45ad758569f05a5920ff6eae253f181575b94585f6df99320dda002ba81a8c9314accd896ce5ed31f291fb45b0132b94b2706ea550d4f0b6993f4d81c9a55f57e5e27370dad1086ef1bdea0b31cbcfed1cecfc746b8e227601b7f4f4fbb208c2030da66da3628ced6c1941166bb86ba58b85ec98d851f5c48e157f5749798638b6e3ef5a5b7923944825fe95fee854904bc3eba9c1f21f63393322295624502147c85f1b9444bf716d145eed242817be2d945e5edf6cd90871605f45f9dfed2d391a38e5bbe62083ef3aaa94470b77857e42064fbcdb32d489faf13fb37adcb03e60ef3cadca6296f582325729275969b8a1e6bcb773e7eea43ae81aefb7cfb1f1209f988b1bdc6033c8c960c5fb0d2db6d1b72fdb3d07083a7cc62d8ea75eaf4c2b82cd60f71a7c49ffb390c32f1dd73cc62392fddb0c40f905c7ea1688ca0c935cffd388f6ef06e32e5c6edf95410d776468acd15df477b27bba5923dd5c7329fc2fd79cba8764862794c468a1bf5e94e4d6f4b489eb0052a61aa3040077cbd24bfdff4dda5f58a2e45505fb63ef59df751d7447a304c28d6718fd04e5cca9b7ed3bf7ffd20c761cd37c2818f383ce2190decf57d1d5ec350d933b9b7f2e4a027d1602cfa2ab41a6a0303ec68c3f3848576a11b56d481045436336b8161577dca49418ed2f47be7441263991e06297499c1c0e7211777d2d1aea7db8e81dead6935d397590b917695a857dc059fd2b51ee9eb6148bca9f78e88adbda89f776e2d339627983354ff206f171e95bf5142a584e0c17541f9be0eb9e1721a45013a7d35c2a4f7c7e5e4b520c9e25dc0fce02369bfec9b7fe02eaf0fd5beac2d7513eb1ec6e34dc0e806118e625b960e73fdc7520b16a7475f6855e36767e4fd9fdcd932a5864d48ee4e74d741fefe7b7944c8c42c17b744d9b0fd917236f51a892c04a263a5e6f22c260cb65eab989e5957d25a86ba336af238eb032e2369ab4bd0d8f6431b16bde1af3ff658c4a1a936a53a227b4082d718e58169fded573e42edaf0f2ec9d367c0f29f9e179d7010ae942c9535dbe080f011a4e684803a7670fe562df277ad331da882a97a71d0ecbb4a7836616bf4f2004cea9fc6ad545adbfa8a704136a6dfee75a4fdd77bbde1b1e4c4f054d7047b6a9e40e2f96992c588faa3061878877211bf4a84f876faf0788be05d9b81a5725b5fa18de68dbab51ada39279977294c475a13c9814546f098e8053c753980006d8729ffa5abced131be42af896a1eec9c181b11f8b188a4fbaa29444050138d15b6c3729463019926d9c25de25845b25fe8d1fc96cc184e2fc9ea8624a5102adb214a146408cf574c653eaec739912358cc3adac71a2c354440ce7807f2aec235867b7eecd573d82f49b6b78b985483cb0086940f1bcfd0cb4ea40f902a6468cdd7483915b3041ea939e165952f9d240bd69973af597421ed330aaa836406f404e39b48114f11975a003da37b20f56be9b5352cd4b7195b885511d27c09ed60111b5fe3f3f28f8566302a50d8d9f283d30a2f086430f1ffaec560831c568a5e22596156ee14814898b3f2cc3adf25baebdb949658c35fed882c2340eee44c46fa60d5367a851e09c2cb75e4c4298253b96608089865dbbb4c74d5bd0c292c3487ac278c7370eb9dbe5fb9799b3346f16fac64c7acce8963f3b60f05298560ae7fc3a21e86c338911a2bd9205d121af359ca5e411f1de9a4ac9a0db47cdd64d76084cc5c003a5d6c4b75cd21672778ceb276b3d44ecde1f41bf9277738bf77da506b52c83b9b8ef3277b42a20071756d9def8edcfa1226b56b4e6a557a67e21ab82674f70cda70c0abaf4b12ee5f2cd21a1a06f68c78a62697fb94863d293eda5de31d69850b9dc45e512efc7b152e9926797358e6065ad592e3244d544fd44bb1f37da463fa81a27a387644e3bc483f4771870fb364125269aa502051ec3bff27e5298f07ac0f8e9789ec6bfd356764a43b81da9f990b7a94de4a299621c11197565493a6ec1d20a13e8b78967aac3d469bfd87d4b2bff4a0f533e5b9858e8fa61edff786966e1b82b5a98c20cb8a10ff4276fd415950aff18e5c02704c30f0413f57893a3a87fe2d7a00b0f8bbac3e3235a32dc7541315282aea42bf7445a5f7e0765ae2ff0a5cc5e832314283af39377548dbed44e6240570a4acb9084ab09ca3d24210ad06709e892d241a0cef27514a54c9e0cacfdd243d47c0244e547cfc643b56b62a99eb403e69701a85454a5a1e35b2066b57d623e9061e0a9f86bd54e528f0466ecdc61bbeab7ae7ac2b227125eb1518207dabba68e01b17f8a9112864dedd7587ceb38b7ee9c1592c25324682265637ed23b1c1cc867f6cdd05d1ceb6bca80892596b2322e8697e30ba5efc6405d7f386eff8a457fd9fac3d533e4c45de2e692ec567debcd4506badfd472e650eee4b95c5afa29532ace0fdd4be0a61ce65245d9f6816010d61b600f13ac92cc308feaffcd9cb4fdc0e13ea931432e486af64cb01c3fe7f7d1e5daa29e8248c1071921c54953b380dd4994d07927002e552383a29049f47179c45a1d4ab7ca9c921e4960b39562cdb9934c426f0d7afa113e11b14b1addfdce36c35b52d767e815bc7f3365df43bfa3da8d69594c20092859c2e67e81221fb61ebf9597d2f2db292b641d3eab1ff76b79049883216bc9a0b063b72961daad292f203899f8b270fa30f82ea98bb28016a6e3fc03aaf8e2e31f401d342eca2b03ff5bdf160ff73b8ab9da5d97ec2298f4183e355e8ae1a8250174931c5511ef1e2b059207bb2ceb38110fbed69a24f86d17defaa4ae6ab94d4963a357685acd97ef183a54e17cc8908aa75aeb3b1322a222d5c2a72369316dd20976a80f57b34d1b2eedba0c7338bb7ed4f02e58653f184733f09b0a61d8b018ed926c372e723523a5245d814652befc24a2bf3cb1e70a807780cf7feec44d5524388727034d1438ec9397f7b8475105126494a048c9214815199609c8550824344544c09e833a641f2e5462a39959de0aa2c704993f714cd94bb69979e1ce17b3ab395a70cbea8f924c8afa21d601490be3a70fa7947ee1ae98fe68dbd69aa3275c90b4e87e94f40d16e8dbf7563d660dcd2ae7d12aa35b826d7acd68ecd1b61aa304c366bc32c3dc6f6f20ac04e406afbae20785ae85e89c4c1fd42d6a828e9927c5a1929e07c982706d684de0eeb1f9fa21404a33e5b6f4e9f39cfb314c6eb5973678250fe7f7d99369ea9f52227a5ac74bdb6e3719add9b3d7cffa58025b3cb73e38bf5025577b696f6012d22a21bd67ad3c200bf02057f4ca6ab139d117660987153dfc7cc70c62c273cf354afda434e68bd02f83a2054dc70402f5b7409a64d461bf45b747c14458cc16ebc824f8e09e555776a50c030b5a47a42494464ffcac96205603aed1dbc5974715956150e98f7b3c2aed2828a315955dfd9095fdafd9d092b9b51f4eb97e472c37452338b99e402728025eec407dbc44cbce0f4589e5ab2f664af7ef6513c64e04e94f922459bc621cf429a98b2812723d920d7f3c3f732eca99616882829816a4d93ce58d8b5e4c15b98ae8dedc09f4e88ef02a7fcdb447858a0b94cf56b77ca6c82b5c1026f47d3b9608996117329c3ee53aec63713850a092f90c6f4f96f75512a73d9833324bc15ee504b0ab93a862354db36c3dcf88782a159c77ac083b7958f73e34022fb8ca3b78464d3f2d2d2c2a09b227f739a5834df88689a44228171f978d98c9d0e3f444bf8de433bd737e7a9d325b80be0297f59b922e202116759df911d6974ed75e5006d5900c629512c6bccd4fd0bb86d242a1e1fac47e110a70a645d8cd51d8094d4979aa3ec3d157ecf015def2bc3e25268ddba587e369ce009dc2074dc5471d8f9b3d655bb5824a790252efccde02173c2e59f5042ed199546a65fe38c9e36933f7b300d3c093a95ea95df443ddf70beddd03368e2f195bee68abaa9f51f75c5552cfb2f2838cb2e47ce129d81823ed42d9a69e856f8be295b2cf97fe5e8355b3e0432cc665001661c938abeb511f8366becc88982d438e13c55bee5a4c4c904c9bef0968dd89beea313394d4f06582e1aa4fabb4ba97c49a9644b54d09ef12c1afc6f1d5efd356f0567b7d9656c2527c5814123f0b75a2b10b9ad09f6bfbe3488c0e6813d82b41061dd2cb462feae975e2729efc441841ee87a5b4e3c8754187b8ca6ac3660eaa1f5d15b7f7934b53665fdc2fc318007e457505898df2a4929515c52b9673084f09d96c687248e5c536edc38423de39878df1c81fc61e25a2a9503e840a37a4089f94b18fc3a53ccb1b8723231e2a6f1ab9712bd32caf4f36d2abbc18f6437abaf1ff311351f55cfcb1c74fb5339dcc8637df11b6a5b8bc01ad4564edba2f13af7b4c9ae8d8f4c8c1bf4a0319f884f1d2b5031a9999e8257d997e5b937f1271a72225854e45e794dba43d16f0b36ac9249387e029fd098326114844548408aa6eaaad977b6a4b48369b6fd78a7dd5bc287b42e81d544ce156d9100dce6c6c3ac874392beb9552469b6de4b2d5b09051d621a148af4e115789e967a37383ecc457b06a593dbc0febc47b6e3190ee08c16620cba0a78e260ee023a2aa8d2e73bb6ab81ef73bc7b04e48cd84e97a6927c3493b5ff8bb9e90599a42d073f4e3046ad61bcae7e614fd40c041044bc4329fd6770b0fa6f249c8e886833ce4aec7656032fcb5205971e8ad3cc27627b15d81d135dabbfbc776293433d6fcf3a1157217f344fc288d4c2af9caee8f531be9a9657a9cc1c73498ddfe23be88e886051e7d425bf759895ec06bd5837cc5b045de0b7756ec9050e9d4e1bc6dbfe93de48c777bf75fe1221c0861a24329c1d686e91e79203a742d47eea53a6b33861ec1b835a48d42b2fd2e0d381f26408ee42c462c66ad706990cef92766456e3d29a69ab1e6da8950d9dddb455c72fc6773e6cbc8911464557ffc2b3a4f9408abd605d0d0166ef63c1b8e0363ccde5f7da389d322a2877b6a561ced6dfe95820e29e5a9c2e408075547b2889117db049596720df9b76b941413685bb3a80898ca902d271c31be55152c6ca6c259507068018eb796d5fb32d66a6e84eea38dcd9968ca0e810a3ff9dcd5ae1383a6e72babd0cd051f7943723426ba30ddd967d36fcd5b0ff2dcd69d8cbe1334135d6887a89982acc993c82ba580a6d04caff2dd75254af585e8306a720daa661dbb8e88f68f620b18cb61e7cba1ee22c4218adeeeb69e7b7e4c633ccc1adb79199208622a2b609e772e42d605a6feaeddc5acb497f0a6b968ffec9d945a0cc739be22c3bce0b3cb9fe74a5f5a1988b33c3d6aa964bf2663142be0f244d4c2a4f90a06e26413e40cae8dbb4cf06feae7b89ad769fee01f7fe12741c51ec3526f4caf98f1837dd371162983b76f0cac33a3cc8c350040a65e181782ee91d1df02d8fdd00d598c61a6ea668417cede1363fc8ea185c196d910d4c1a95e379b3d30a461723f5aefe19ff693b5b0c0efbe025f335d28b3d0e18ee41886afd96a17d48c794c85007686288e278bb1de439f210c0942bf42ddd26328c2d28bdf43e200a1756e905a45471ad65763f7ed3a31edd81e42121c19ca4bd976d978bcdcf95c2fd0818fdd066bb2e8bb53c9b3b2cb893c440413d3dabf08df73d2e09b83ec7bbd270293373c86c7cfdd22d2d1554c750e5a366578d7d9077ba30a09153d2c28c79d0d281a8a47b0b57575df4cc6e9e699d335d91f04d69193fb9b1fad49ebc024291972db0a7bb04c2f5565820af2b81e8c64f25c9aef13dd2bec3b4f97870ddbc61a0d9ee05f2727fecdc8418d0244715045a7ea98252114771acce4c14de905bdbc9dff5ca0de40189a21841cbb36ee170d1ed2fc7d8a640b5bd23c7b53ced87a4ff8fa295c8acfc1c7eec7837c946445c60c291415c577994ffb185d936bf2cd0d21573aca51737b82ebc10b267e6d85ffd1523e34e8e8a60d2bdee2369b5a6793c4b78a90de2e2ea14652c7f34e8b9df6a836f45a64cb816400615a5b08599b4a3c96070d13be676189d60b91a7e956c69dc3f47aa8c713aac6982b68f3e74fdf3b1a99e5cadbba51cc201bdfb3593d468b969e669b693d2aa9f3901b1a396531e30b127542406cfe6a7be342572b5bf456f6b9dca7b7692e7ffda68dc0ba7a0337bf61ed983843982c62a3731b4057ae4f150d1b08dacb3dbf9fd76130782b0f4ba6e499d15aba917be60263e374a8b0eee2cdfd89a46cb2eb0152050d153e7b59c93cdf153e1efb68039b24743eceb8c25bbab7c986f2542524f60f494558e1ec1c7950f728acca32737dac6da5ecbf08efce4a88e2680cdf4c30890e633f395b4f3d7df5143af636c52505f4ca071e22dae606b8e346f9d98fafa44582d568f6cde829fc0247bbd5518701ee692e1ba06d2b681ea170b08056e566407557952fe5e01b83599db8d5aada03276adb2d350cb83980b24bd0eb553b1ec894a8da8bb3754e5c333bf8f6a8d36fd15bfc9914bd33295400350c98b6a2549c73f84a796eb4dc545414ad947ef37a0207c92954d30d47e62a50daf4a7d71bebd17b3cb0118333d054a413f68069d5f6a8196134eaf0cf88cf83b9e8d9efcd376b9612070d2d7085f08e712498a57c5abf880bd57fa58c3a2dd06c9567fd9559e76d8092b22162e582c2e565d766723ebca61d98f77b786b106e6993c0022602e33cca91689297ea0c63878c03491a6f734cfbc7ca61d61cfe02c9cb75b1dcd2e7d64688f43f39d37b3b5fa6e53941a1162f7089cccf61cc175d5d4d2f9653485867ee82a8f3fbb85628c25d5baa9832d9565c73aed7c148a80161638db484a9bca9f4adf5bba0050aa873aa33642f7df2542e81291553980a80647cd66d6a709271d0d3dd684fc6b93c9ba8ffae268a15ece7f769acb4867170d95872461ee9beaa49f6cafc909ee10b48d8d189e109b30dba0b898fb0d09a677de83b721c9995eb0b671a64acba057513667f2a369bc0d1cf18bc049de28c7509c30b2e7d79bf8de8fb69c643683c3a1cf7f7a9812999cfae998fe6f1a4e27a27ebc706b1bbf2b59d248c48eb183ed1780f080027e34f4d926acbed00253fe2d6cb7f05a6c16a854ab1b146607b0c088c2e800c9f5adfb3fe9f12d228c39faa165de21eb65ae75d0eb57218236c5220e00570fa47208109ebd34a3eacf965a564ea69d4b32531f552e8673e381fc30e64b50bb605c99220da21ad760c3c6f1bd275055ddd46ebde4fae5cbdcbfdc56de61bcc589352254497764cc1267db0828e1f18b9d06fce54b4af7893ca4a03ed02d64669a24f84784933abf2c089bd2b6a4c6a5d05218de3126be177f50870c506508077e91ca9e63d11a3a0aefecc842ec11beaa3c620dd0fba7f4956f835b58569f91cf5e8a637472ffdbd1a9b7a32eb7757fe8875501c89b1f500f13e90f3879eb64e00b2913c92da911c246108a92e72d457694bc9630977b2eb1a348465007aea1dfed06ed267804019bbf3a7c15cac42c33552c43e5117d239d49bc69681446f60af154c3b1550e8f03e447d1ce3acd89b7e9facbd76ca06ac0149a7b14063070b5a8675225eb05b81936caee2442bc85b39fa25ad505255c96e5b66f1821dcfe1307a2d1d90b8271445b1ef63009758c6dd608bcd855653c4e13260394a52b01bf4d33437011220f7c9167086c32b56c7ae66819d8777eb02490b0305890989f9f32ffa9c16bcecf7d44ba4f2c427f5112ee63ecadba684ff4ec793065ee658a1561d4752cb9e8d91970c7d960fb323f58824e5acff7f13d2db21d3931beb94f795161073c8acd68412f6fbddae27afd11062d4317a2de4d7518a8cf095fc8d36e683f4572ff5ce51e8079eddf8f211163e4642104b3f2ed0380e080fe30d6d00866c2dbce5c691804493de10bdf8b1b620b8a42ed27ebc414beeb824fee2ddec3e37e273ec4d288c7f5544ec108920b2f59716914e82c3c9f34b9b679b4b71805a446141ccaeba0bdde93c15b0cda8c3ef54caab18bc3885b5b5a6d8d176cf962ed928de5bc58c73b853f4048fa4c59d8d6c13b113441b6ef38d78ea2b3ec2a308d69cb79890b3bef8a04682b5e41448a5a1d789cf67a1dfdec36f430374417fc5332968e628d159a49f9865ff430a5d33887a1e024e74ef44ebcc76e6f0142a88d355c13770627a1b6545fdd388ed0a8701967f7c8167a15cf66f45bf9f64bd5ede31853e6e92b828e71398b65d3e4cc9539922e0798e59d6805d812ccd17182f282762e23c21fd3bf8070f118ff37b9ac7342eecf60f9b4b1775ef6e2e838db6d9f90ebc04443f8bb2e42ad4802676d5f6a2922d441c35577c9dbd1b17d3601028373d0bdfcd26d07c40fcbd872fa8c1272d2f5da51d0c98fd21076514596eaf0b86975289a162b1b36a20fcfd69786f2be6d780f35d3f9416a29289a8ce91c582fe27bb68907e0c18cde18d546f3c4dae832505f281d1d08ed2f24dea74aee5507264c1c7c2383f596574312b0095cd46a33433a0451e96e2b9d767dc48b268a5a7bc1becfaf39f765f7b5d69e68f8fda4f0776520e4acdd01168777ecb09293447e1beaea28daea82a5d1ec792191e55962506f5a055d99bf770f1248afbb6d4ddb0faacc81568179ab3879c809f3119dc4c8ae496100ab9485f9105e2412765703a8ed6d92783ca1dbda9e56e0865e4a40773ea875e6e87ec5be7697e7566f05f00c8af1e70d61db40fcc18c473e7fffe0112e5793010504eb58579f92f8583bc69e4d89c69205a06eb135b337c04e6189dfeab9641bcde871efb41d67a61bd3f59d91ec85c3e15b90cb7135d45c3b0f1a52e98f8b848f5d15066201ebaef41504d2de24ecf18939f53844c31c10a11174d557e427a3227b7e491c7e210f8282216a34e97223516227a2923c1c1770b0326b0e3dbca83ea211e8dee5c90acd8017269f2b6aff3847a0510f813cea68e3b58b1c616f3935e599ddfe196ae193f584db88bc81e17e9b78a87fa81c83ccd2f9e93b6fdccbe1ec3f2ece098643e5c530ae48876a6566f3812b99129718560adad24decac710657ed5cdddef818fdd10ffd420edeea6d430d6dd47cc91d13ea9de942a11c97803dc0b3ed282b2d9e0835c28da9a5269c2df12eaf743b1b07d85faf2720a00cf15d7d511c9937f411c8378f257e5b44005720461bac09b1d8c0ac440c149970058ae4314ea6cbf9d47e32b6c9e7b72e2a1074463ac4ceea53be56dac736bb2076de3b652d1a2316678246646329b5e68506ae3ddf6f2c298a4eb0f29960e0ca1747a492583d1f3d240b76e2a03377b93bf8bc79643238be0a566004cd7372db857fca7f71923dfe3d4acdd29a8dd91e18be2479a17d64b49f01e3ca849771c49986bec2e4307392080d364f29d1f36e1b5be913d0788970de844dd929e9756fea590c65c858d2532feb6ee89fa27683c539425936c764587520c48589e74882613ac8736a7dfef5c9edd840baad8c80fc6397b482c85f87bb835eeedd814eae7b3360f5eb3da30abf82c8e86ca3f17c38194d32acc965e39b5942bd9bd1bf74b4bd3190a18d78facffb6bde46bf3694c339b016c16d017ff136ced95d9a7b286885dc3c82e69336da177f5c411a1534638409d4ec3d4fc737efdb2a53ec8adf505e899c5aaf8223f9dc3cc35102e9453902c7f8d12338ec66c854162cd4197b22c634c0e2d6920e1b4b783f55d775071bb937469889d440acb7d81e835eee41879532dcf9cf9b2795503bfb0882b32f21f0b5838ce51246e78054a9eec1b41049874bb633524192637743819d50db1b2f75e87564ccb221a7a713d98c8561e32d5440e18d303668964a06404e6bff5c94ccc9616df42d552404165f704cf39683d98153dcbb67a797ee2a4134f8b2786cea09819ba18dab8b532ef0ec590f48af4972870e76647a7b40452dbcf33cfde31cb0ae164ff556d74a3fbfb78c962d04dfc3da197d245b746566adde24219ab62e7b33a456211963ffe79d19d5306fa69cff0e981e86264cbe62c23b79bdabae1b4b285ef66b5097fb5fca6659b9a3316d1bc819f09a388de68dfaa22a246ded012b00657ce48d3e9b6f2cee811a0349f89ab2d2da0ab7a063b11684e0fe01e4e95c6e7485a3266431eb86f52121b85e93db5183602680b38739150e73af79ff131b2ba612681b1d49b9913bab15b872ed98960a421fe63a932e196be78c706787338fb7d67d6886875a8738b5032df82fce3dbf0bbb9e0d96ca4be7668f6351ce3ce82743b7cbdc86de93699b106a0813fb0ff25329c072e16df0825a0540e7d3e61bbf36c17e0f95f4ae8dad385e94f5c4c197cc34842317477da7ab07c59ff15b30516a9062a383a0df0439453b6e927e2e2d43522ca5631229d12fc9fa27032de80d553d8cccb43ba04821a2869c53a28f5b1efba0fa6c4f87101037c4a0be7b85bef22c4d8cf4efbd86a757175b479c6fdcb2ac78a7bad016de344cabc28f23dc7fb22269fad957f4f583629eebaae8f6e9b1bede7285121aa5a7709c9b2c24f0ee3f57ef858b0344c4ae698228cded2b04d7db0d7d576ec863dbfeb7ac0ef9bf962950c21436ba66d05aeb7c3699eec489825d01ba73ddb057ffe5b2974f4497622df552534fa0d5b0d975df733f316221c400ed3e5a811d88114aa418744a447f42b5b6c5ea2febf8fea9f94a938c0f9ed74f3c2a66e016e452503f4e8778329f55092ff2c95fdf93a85705185c824d80ee443dde54b0adeda1114674945af9d2ade15a55573a8ab10629c1d8e1e43f19b27e9929d49bcb787c86e4e6bf63d47e3f1bd4067c3e4eef4b91b528e4b6f02182e3ddbc812eb715242141e4aac347dc8a6b1b4ec00c5255a3a116c07d6e02d3f1ee584f7efe4a14866f901a85a1fe2b02b0a1bcd8cad6d3652cf3ee68f45eb808c0d76572c8c84dfaeafe793a4f8ea6cfa258b82e74e9533a94660f74e0e0024d733bcb7e49ecef3d2a5674b6a9d89b5f5327917375b505be6dfc4d678dfc2bff52b4f20ff4c5941809b74293a5020858ae322d5285fc96bb3a8aa2b1b9f3add6afa58f1a30a99e88b6171ba78838169447133fbb37ff23017f9520464ebf7bc21bdde4346f03d1d69f41096be0b3381d6b162f362bb77c98a87081929cf3cdd9de8e</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-xray">      <input class="hbe hbe-input-field hbe-input-field-xray" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-xray" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-xray">您好, 这里需要密码.</span>      </label>      <svg class="hbe hbe-graphic hbe-graphic-xray" width="300%" height="100%" viewBox="0 0 1200 60" preserveAspectRatio="none">        <path d="M0,56.5c0,0,298.666,0,399.333,0C448.336,56.5,513.994,46,597,46c77.327,0,135,10.5,200.999,10.5c95.996,0,402.001,0,402.001,0"></path>        <path d="M0,2.5c0,0,298.666,0,399.333,0C448.336,2.5,513.994,13,597,13c77.327,0,135-10.5,200.999-10.5c95.996,0,402.001,0,402.001,0"></path>      </svg>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> 周志 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 加密 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>周志汇总</title>
      <link href="/posts/acdb8d5c9b7b/"/>
      <url>/posts/acdb8d5c9b7b/</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉, 这个密码看着不太对, 请再试试." data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容.">  <script id="hbeData" type="hbeData" data-hmacdigest="457178e2b061434e20a7328357619ccccb01909e2d79f019109beaf16a2bf380">e673c8ca06aefc9fd566f76e908c7073bf122394db4047bcd924ce9ea3732824180a4f1db344e311487ba241f1b16c4587f75b861f83fe634c4c300b5ce9c13f6ab2dc51be3173e872c5b9303aab66b98f2d10c9186f542c60bdf6e9e018902100efec3c9b0d9e25eb662a6738083cac0144094eaf56dff4f3d0dac07a1d8fde55b12b81cafe45e830d294450db7709fb63d8646cd7dbfc68602c1aa7bd817e8f76fdfc74c1277e320a30180efe06403a97e6f934d084e4d24a4b565f7c367414397784ed156c305a7ffd132f0e9754e52f1377dc9ab7b8c82e80eb332a9499cad7e6433e805342202368e93c755a7afccbd65b77c0be4e4d18f65b7b251eb790731125c3f694c853c1f69b5e5df409f5bfd03d0949ba954eb996b0623e80bb1ba55a0fcbf1124aba367eca4d5273a2853ae153eb861f18cccc9de081e15f3fdee3195620f6f7f415a7c86f033937b748de82d7f0c9fae37b4882190a3b6dca92202b2d28d07a2a4fa623336ffc9483be1b7b60644593122b61456f3296175f8acac9ddfdfefa420c67c3f063702dbc614d95d49c95d548e1e77d39fdf6eee41b2dc2c79e17a12a021f5166cc9270ec4b3afbeb3e46ae99b1f558961228e7ab7c26f1f33dfec514a525ffa53da17b920e7d71c4ab55378b8d4ffab137706da1bb7b837ec5c15398b66fc0c47b930e8587cea57746eaf2f238ef15f31f03838ffcd40b210347625623f90bd7f4388cf801756e759ba337bab9712a18ba91a92198ce53d51f4d6226f4b3910e0c29a04d2cf04fbd3fc503394d6260482eb681a0b6725bc19b1d3ab3f9588029494893ef2a0bbeeae8df0c09a9ab4cec0196b7456784f64c8949d3445e1b66b2498c1e41a18e005d0a736420a9bcc099520e0a708cc80cc435302ad2dbb09605ea947005199136277c4a5669834488d0742cb6c7b111dbdec1ee66d7fde127e69716789c913d4d0bdf77244e89fd7c5afe3c4403fc2ac7b2e201be680aab46d455ec3ec6a6b087ea4c89475b065ae1273f9ff80b3f371a9b6a126d4c8a2dae839fcf58585516e8d85f671d01b5ce847165bdef1873ff3c3ac6bd684ce142aa520cbfae06b46b99ed28b4c76bc3309cfda46ac8beda582e77c746cfc03f60ac0ca3c3aac831e1719ee6db6c0d81c133592fb517205cd0b8318aaa16972b29e6cfdf5d9bad937491bb334436190329f9cbc9cdcc5cd68209ebfdc0b5bdb1b33a4e013c57adede375b20313fd6a16f0ad58e526e51d5612198b3a975f4e67d28e21e7fd90cee4b8bcfe9a08d1af07f30351bd6b0fbf09d1bb68940b172c2d926e8f6c83dd62f50828231c6d7069906f35252b2ae2d5ac6dc625caa50b69808c8c6e35563f6413356df81fa87a943249397a31dff4ae97332db591ed65eb68a2bae3c66fde4c968257063b3c85895ed22a788c6c19be43555e388199d6f7eba58f0913a05665af896587f4e58e4f3dc2376b9046ded71d9a3ce9c265d7bab2a0b2e0eea0aeaeccb0a07959db7d8bc3af1504a50cd20406e6e37009282d7dcad530635e8f1c324c146a73b6cadee415b4c56421dca12742e8397a5e9a1b7516ede3e9ee9f2d33ac732ae0c9f6912af111fff7395fcf806daec48aad313ea4dfe54f9e6109662b43e636ea142bb87513f73cee5b999348b58e971bcd6949d30276986d7219505e69b6f67e3d6cf8e3e0394cb39aaf942a6fdc50c2d1aae1486eb04102c69a965760cc315ab25292834a69258e6715fc49f1ed66339633d4fd70c47dace1042ce0262d28ba6e9ac86e2f5fd2360316edacda8f09bbf9bb963f39eee89df3a935b65126f5f20df1d900f8bbb7250901a0e4747d341483de1561a7217dbd407ab5d7e39391df6bb26f7088330594de530d66fab7b5f9018f29a7d7e02552f90908e354f23d01805e82ba6c45a79b28d8b81606b644d0f7b5783bdb492673c7d0adb6d5b03a36933a4a54f2769414f563f903128fbc49a4172928a985bee689041d15ac0b54af18cef8c9d33ee09bccdb43a379652ab8652a665a649820d110b285ac582d640047aec2b2dcd6c81be148b064471eca8078057bedc564e3d82fad4d936755e9bc1fb83844018bc324860cba116f6b1604795d5d77e05050ed3f69ef89dd052aa9d62230b955f90cef67f32f5dfd6b0c1d076e39f9f3a330fd2060cc82587f89281c21339ce5e7ca5861c4b4bb0ac9810a29f20fc987246a36af00355464e0b297e479dfc544bbf7e230084b5d85a0f57e75786d70f48e1ab6221bc73cfa7a5b33cea6372ddf1395fa4f8967e3c2babaa0fd0f6359ebadfbcb5e0f2bb35749f5fa584b7690dccc3a6264a0e1e701183d7e4459f0c1eee793ebf34cdb56761f2df388a6df20286f179092294dcf0b65975c5be6c3edf131700c6d2151a871e0c930cd460c9073dd39e8fba5a5b311828d4e7536535fe520e9b915cb9f4cd55be248b4c9122c14d562175e5c696c5dc447df0a710a399307744b20a07e5ee9297ede9b0edcfe506bdf60d7ab562313f6bfb3534c995189b2ca09d256323818d0b4c1669355c926bca3ff75d3e19bdb6637078a828fc558b0f818dee94c028ab60329d83a17b01e53e7ec67e198251c1f502529f0cb2aac72e71cfc154f840f16ce3684a70b9c4222a185bb9a77b31116e736c9766f0a3d3f3cfe837f4961da614882dbe9b3acf9bcd5181969d0757f3bdba744f989a10ea793843a9513a41317368392a3d61b9f7856db89b61e68d2d1d91c3e016e6227b38cc5e037b5305a92bf417d5a61965dee3d54109820ad9a1603dce472fe5f2305f7946d9283bfd63c43cabeac3cacce7d9c6d32a72b333fc6819a2568fe81e04ea4e1fe4d7ba3b46108518998db3e91de7a7edb4752e9b9245848d7bb20a4259d2e0fd35eae248ab30eb26f716d92453bcb551351add557338217f24d246d32db65a46224cd8655e0d0559a31193e13d2aa3c5b9896887eb6023fbb45dd75a9c4c3c7362d76da445a272186219194235f3eada51a733b412716ebafaa78f0a6945ade9f35729a929ffcaeb5f039b55f03b183a7a8389609c0120350b8d23901e9bec526077599242093ae495b01825b0443878afdde40140e27329a74c5b9d8baa711c4b9326d97045131592b337989de9ece810e3fb805ff680ea819e618c9c0281ff091a69aadb3f4e52a8482cd90752cf64d1370469fd057ab64cdf3604c146c048b13371b1d78a94fdb68607173719af59037564e76099b0f51b2c3263476b22c420fb3483e22645d188de837d040a77c6255964cad6f52374f3bf1db297697a4b1eb15dd8df047a398f7ad2f7475ab4a6713c993e15123802b7cc30e81cdef049477f8fcf6bebf3b22602c915f83cb6af4e74be68d12fe40ad3d5c35d191a3ac10a19a337db7cfcf42bc7136ea11ca3dbe747046b3b9d18a2ef3b261735eefbedf9fc844218e51bb297fbb3fc3d02345079b52145b46782f4cfbda57a1f171277df28f1557684f8b4f9e527f5216de56d22071703df26e40c5c03220b8df37c8134b21fdd0560d620494c5e83d0f25cbb8b2fa4c055f9a76a080b0d153a7137d47055e598fe646d99121bb27bee5c6e3f186e5d9278ca8d7516514685b3f364c26a02511d17543453e6494b415ba41933f93cfffd9c6803929fd09735a4ab9482918165f9ac08707020af6b4e0577df78431d17accb691831703dfbcb0668f24f373d97071c44bfe20be64779fe3a93558bd44f52a9e63b31496e223eab8977a3af1d7449e2a32c9db004481854d8cdbfef9e8614546d89ceef6fd0033f24ee2ac78a35fab7bbdb83899fc801146ab58292e636eee70b2e5f93ce8c474d86f6cb2247f1a50098e3972c5e99abb3489377b6f935f88aff259d0dc70ac6349fc3e167788431c6e284bd40e388b5741634a682428bd8132d00cc02a5ec625af3eb6db99c5bfd5dd38c5a070fc47ef211fb11ef5e284de153e18521f5c4317c02026b4b6fad02f372ac6e522f92b2918ad38617635262eb1504981324f2f565bb66d1c1f846e2a3ba743510f3402e356ff0a7ea5f328f2889211509e18f60572e670d9b60de4c6dde6ac42190f670015fb6f88d677b58</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-xray">      <input class="hbe hbe-input-field hbe-input-field-xray" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-xray" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-xray">您好, 这里需要密码.</span>      </label>      <svg class="hbe hbe-graphic hbe-graphic-xray" width="300%" height="100%" viewBox="0 0 1200 60" preserveAspectRatio="none">        <path d="M0,56.5c0,0,298.666,0,399.333,0C448.336,56.5,513.994,46,597,46c77.327,0,135,10.5,200.999,10.5c95.996,0,402.001,0,402.001,0"></path>        <path d="M0,2.5c0,0,298.666,0,399.333,0C448.336,2.5,513.994,13,597,13c77.327,0,135-10.5,200.999-10.5c95.996,0,402.001,0,402.001,0"></path>      </svg>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> 置顶汇总 </category>
          
          <category> 周志 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 加密 </tag>
            
            <tag> 置顶汇总 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>图-基于邻接表实现</title>
      <link href="/posts/de48a254d011/"/>
      <url>/posts/de48a254d011/</url>
      
        <content type="html"><![CDATA[<h3 id="邻接表"><a href="#邻接表" class="headerlink" title="邻接表"></a>邻接表</h3><p>使用<code>邻接表</code>作为我的<code>图论算法</code>的基本模板。</p><p><code>图论算法</code>可以使用<code>邻接表</code>和<code>邻接矩阵</code>来作为地基。<br>我选择王道书上的邻接表作为我的模板原因有：</p><ol><li>若要使用<code>邻接矩阵</code>，我有 y 总 的模板。并且也契合，因为可以使用一个<code>二维数组</code>来简化类似邻接矩阵</li><li>我如果是出题人，要指定数据类型，我会选择邻接表，因为考生肯定会优先选择二维数组。</li></ol><h3 id="邻接表的类型描述"><a href="#邻接表的类型描述" class="headerlink" title="邻接表的类型描述"></a>邻接表的类型描述</h3><wavy>我似乎理解错《数据结构》这门考试科目的含义了。它应该重视的是理论，而不是代码的实现，我花费了大量的时间在代码上，这是错误的！因此我打算停更...</wavy>]]></content>
      
      
      <categories>
          
          <category> 考研笔试自用算法大题模板 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 考研笔试自用算法大题模板 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>二叉树</title>
      <link href="/posts/00977ebe8687/"/>
      <url>/posts/00977ebe8687/</url>
      
        <content type="html"><![CDATA[<h3 id="二叉树"><a href="#二叉树" class="headerlink" title="二叉树"></a>二叉树</h3><p>使用<code>链式存储</code>。</p><p>因为书上的大题使用的都是<code>链式存储</code>。所以我也采取这样的方式，作为我的算法模板。</p><h3 id="二叉树的类型描述"><a href="#二叉树的类型描述" class="headerlink" title="二叉树的类型描述"></a>二叉树的类型描述</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">struct</span> <span class="hljs-title class_">BiTNode</span>&#123;<br><span class="hljs-type">int</span> data; <span class="hljs-comment">// 数据域</span><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">BiTNode</span> * lchild, * rchild; <span class="hljs-comment">// 左、右孩子指针</span><br>&#125;BiTNode, * BiTree;<br></code></pre></td></tr></table></figure><h3 id="先序递归建树"><a href="#先序递归建树" class="headerlink" title="先序递归建树"></a>先序递归建树</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">// 先序递归建树</span><br><span class="hljs-function">BiTree <span class="hljs-title">CreateBiTree</span><span class="hljs-params">()</span></span>&#123;<br>BiTNode * root = (BiTNode *)<span class="hljs-built_in">malloc</span>(<span class="hljs-built_in">sizeof</span>(BiTNode));<br><span class="hljs-type">int</span> ch;<br>cin &gt;&gt; ch;<br><br><span class="hljs-keyword">if</span>(ch == <span class="hljs-number">-1</span>)&#123;<br>root = <span class="hljs-literal">NULL</span>;<br>&#125;<span class="hljs-keyword">else</span>&#123;<br>root -&gt; data = ch;<br>root -&gt; lchild = <span class="hljs-built_in">CreateBiTree</span>();<br>root -&gt; rchild = <span class="hljs-built_in">CreateBiTree</span>();<br>&#125;<br><span class="hljs-keyword">return</span> root;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="先序遍历"><a href="#先序遍历" class="headerlink" title="先序遍历"></a>先序遍历</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">// 先序遍历</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">PreOrder</span><span class="hljs-params">(BiTree root)</span></span>&#123;<br><span class="hljs-keyword">if</span>(root)&#123;<br>cout &lt;&lt; root -&gt; data &lt;&lt; endl;<br><span class="hljs-built_in">PreOrder</span>(root -&gt; lchild);<br><span class="hljs-built_in">PreOrder</span>(root -&gt; rchild);<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="中序遍历"><a href="#中序遍历" class="headerlink" title="中序遍历"></a>中序遍历</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">// 中序遍历</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">InOrder</span><span class="hljs-params">(BiTree root)</span></span>&#123;<br><span class="hljs-keyword">if</span>(root)&#123;<br><span class="hljs-built_in">InOrder</span>(root -&gt; lchild);<br>cout &lt;&lt; root -&gt; data &lt;&lt; endl;<br><span class="hljs-built_in">InOrder</span>(root -&gt; rchild);<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="后序遍历"><a href="#后序遍历" class="headerlink" title="后序遍历"></a>后序遍历</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">// 后序遍历</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">PostOrder</span><span class="hljs-params">(BiTree root)</span></span>&#123;<br><span class="hljs-keyword">if</span>(root)&#123;<br><span class="hljs-built_in">PostOrder</span>(root -&gt; lchild);<br><span class="hljs-built_in">PostOrder</span>(root -&gt; rchild);<br>cout &lt;&lt; root -&gt; data &lt;&lt; endl;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="先序遍历的非递归算法"><a href="#先序遍历的非递归算法" class="headerlink" title="先序遍历的非递归算法"></a>先序遍历的非递归算法</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">// 先序遍历的非递归算法</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">PreOrder2</span><span class="hljs-params">(BiTree root)</span></span>&#123;<br><span class="hljs-comment">// 需要使用辅助栈，模拟递归</span><br>SqStack s; <span class="hljs-built_in">InitStack</span>(s);<br><span class="hljs-comment">// 遍历指针p</span><br>BiTNode * p = root;<br><br><span class="hljs-comment">// p不空 或者 栈不空 循环</span><br><span class="hljs-keyword">while</span>(p || !<span class="hljs-built_in">EmptyStack</span>(s))&#123;<br><span class="hljs-keyword">if</span>(p)&#123;<span class="hljs-comment">// 一路向左</span><br>cout &lt;&lt; p -&gt; data &lt;&lt; endl;<br><span class="hljs-built_in">Push</span>(s, p);<br>p = p -&gt; lchild;<br>&#125;<span class="hljs-keyword">else</span>&#123;<span class="hljs-comment">// 出栈，并转向出栈结点的右子树</span><br><span class="hljs-built_in">Pop</span>(s, p);<br>p = p -&gt; rchild;<br>&#125;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><wavy>关于先序遍历的非递归算法：<wavy></p><ol><li><code>根左右</code>，先根的性质，决定了在<code>一路向左</code>的过程，是可以<code>边输出边入栈</code>的。</li><li>模拟递归回溯，也就是<code>else</code>部分，此时已经完成了<code>根左</code>。现就只要出栈，并转向出栈结点的右子树。</li></ol><h3 id="中序遍历的非递归算法"><a href="#中序遍历的非递归算法" class="headerlink" title="中序遍历的非递归算法"></a>中序遍历的非递归算法</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">// 中序遍历的非递归算法</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">InOrder2</span><span class="hljs-params">(BiTree root)</span></span>&#123;<br><span class="hljs-comment">// 需要使用辅助栈，模拟递归</span><br>SqStack s; <span class="hljs-built_in">InitStack</span>(s);<br><span class="hljs-comment">// 遍历指针p</span><br>BiTNode * p = root;<br><br><span class="hljs-comment">// p不空 或者 栈不空 循环</span><br><span class="hljs-keyword">while</span>(p || !<span class="hljs-built_in">EmptyStack</span>(s))&#123;<br><span class="hljs-keyword">if</span>(p)&#123;<span class="hljs-comment">// 一路向左</span><br><span class="hljs-built_in">Push</span>(s, p);<br>p = p -&gt; lchild;<br>&#125;<span class="hljs-keyword">else</span>&#123;<span class="hljs-comment">// 出栈，并转向出栈结点的右子树</span><br><span class="hljs-built_in">Pop</span>(s, p);<br>cout &lt;&lt; p -&gt; data &lt;&lt; endl;<br>p = p -&gt; rchild;<br>&#125;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><wavy>关于中序遍历的非递归算法：<wavy></p><ol><li>与<code>先序遍历的非递归算法</code>类似，不同的是<code>什么时候访问结点</code>。</li><li><code>左根右</code>，决定了必须要找到最左边的结点再回溯。</li><li><code>else</code>部分，也就是模拟递归回溯过程，必须要先<code>出栈</code>再拿着那个结点的值访问。</li></ol><h3 id="后序遍历非递归算法"><a href="#后序遍历非递归算法" class="headerlink" title="后序遍历非递归算法"></a>后序遍历非递归算法</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">// 后序遍历的非递归算法</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">PostOrder2</span><span class="hljs-params">(BiTree root)</span></span>&#123;<br><span class="hljs-comment">// 需要使用辅助栈，模拟递归</span><br>SqStack s; <span class="hljs-built_in">InitStack</span>(s);<br><span class="hljs-comment">// 遍历指针p</span><br>BiTNode * p = root;<br><span class="hljs-comment">// 还需要借助一个指针r，记录最近访问过的结点</span><br><span class="hljs-comment">// 因为回溯的过程中，可能是从左边回溯，也可能是从右边回溯</span><br><span class="hljs-comment">// 从左边回溯，那么根结点就没被访问过。</span><br><span class="hljs-comment">// 从右边回溯，那么根结点被访问过。</span><br>BiTNode * r = <span class="hljs-literal">NULL</span>;<br><br><span class="hljs-comment">// p不空 或者 栈不空 循环</span><br><span class="hljs-keyword">while</span>(p || !<span class="hljs-built_in">EmptyStack</span>(s))&#123;<br><span class="hljs-keyword">if</span>(p)&#123; <span class="hljs-comment">// 一路向左</span><br><span class="hljs-built_in">Push</span>(s, p);<br>p = p -&gt; lchild;<br>&#125;<span class="hljs-keyword">else</span>&#123; <span class="hljs-comment">// 转右</span><br><span class="hljs-built_in">GetTop</span>(s, p);<br><span class="hljs-comment">// 右子树存在，且右子树还没被访问过</span><br><span class="hljs-keyword">if</span>(p -&gt; rchild &amp;&amp; p -&gt; rchild != r)&#123;<br>p = p -&gt; rchild;<br>&#125;<span class="hljs-keyword">else</span>&#123; <span class="hljs-comment">// 否则出栈</span><br><span class="hljs-built_in">Pop</span>(s, p);<br>cout &lt;&lt; p -&gt; data &lt;&lt; endl;<br>r = p; <span class="hljs-comment">// 标记为最近访问过的结点</span><br>p = <span class="hljs-literal">NULL</span>; <span class="hljs-comment">// 重置p，这样下次循环会直接弹出栈顶元素。</span><br>&#125;<br>&#125;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><wavy>关于后序遍历的非递归算法：<wavy></p><ol><li>指针<code>r</code>：回溯的过程中，可能是从左边回溯，也可能是从右边回溯。<code>∴</code> 从左边回溯，那么根结点就没被访问过。从右边回溯，那么根结点被访问过。根结点被访问过，说明该直接从栈顶弹出一个元素。</li></ol><h3 id="层序遍历"><a href="#层序遍历" class="headerlink" title="层序遍历"></a>层序遍历</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">// 层序遍历</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">LevelOrder</span><span class="hljs-params">(BiTree root)</span></span>&#123;<br><span class="hljs-comment">// 辅助队列</span><br>SqQueue q; <span class="hljs-built_in">InitQueue</span>(q);<br><br><span class="hljs-built_in">EnQueue</span>(q, root);<br><br><span class="hljs-keyword">while</span>(!<span class="hljs-built_in">EmptyQueue</span>(q))&#123;<br>BiTNode * t; <span class="hljs-built_in">DeQueue</span>(q, t);<br>cout &lt;&lt; t -&gt; data &lt;&lt; endl;<br><br><span class="hljs-keyword">if</span>(t -&gt; lchild) <span class="hljs-built_in">EnQueue</span>(q, t -&gt; lchild);<br><span class="hljs-keyword">if</span>(t -&gt; rchild) <span class="hljs-built_in">EnQueue</span>(q, t -&gt; rchild);<br><br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 考研笔试自用算法大题模板 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 考研笔试自用算法大题模板 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>顺序队列</title>
      <link href="/posts/54e3f3a21b91/"/>
      <url>/posts/54e3f3a21b91/</url>
      
        <content type="html"><![CDATA[<h3 id="顺序队列"><a href="#顺序队列" class="headerlink" title="顺序队列"></a>顺序队列</h3><p>顺序队列，以<code>循环队列</code>为主。</p><p>因为好写，所以采取它作为我的模板。</p><h3 id="顺序队列的类型描述"><a href="#顺序队列的类型描述" class="headerlink" title="顺序队列的类型描述"></a>顺序队列的类型描述</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">define</span> MaxSize 50</span><br><span class="hljs-keyword">typedef</span> <span class="hljs-type">int</span> ElemType;<br><br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">struct</span>&#123;<br>ElemType data[MaxSize]; <span class="hljs-comment">// 存放队列元素</span><br><span class="hljs-type">int</span> front, rear; <span class="hljs-comment">// 队头、队尾指针</span><br>&#125;SqQueue;<br></code></pre></td></tr></table></figure><h3 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">// 初始化队列 </span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">InitQueue</span><span class="hljs-params">(SqQueue &amp; q)</span></span>&#123;<br>q.front = q.rear = <span class="hljs-number">0</span>; <span class="hljs-comment">//初始化队头、队尾指针</span><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="判断队列是否为空"><a href="#判断队列是否为空" class="headerlink" title="判断队列是否为空"></a>判断队列是否为空</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">// 判断队列是否为空</span><br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">EmptyQueue</span><span class="hljs-params">(SqQueue q)</span></span>&#123;<br><span class="hljs-keyword">if</span>(q.front == q.rear) <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="入队"><a href="#入队" class="headerlink" title="入队"></a>入队</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">// 入队</span><br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">EnQueue</span><span class="hljs-params">(SqQueue &amp; q, ElemType x)</span></span>&#123;<br><span class="hljs-comment">// 队满,报错</span><br><span class="hljs-keyword">if</span>((q.rear + <span class="hljs-number">1</span>) % MaxSize == q.front) <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br><br><span class="hljs-comment">// 入队</span><br>q.data[q.rear] = x;<br>q.rear = (q.rear + <span class="hljs-number">1</span>) % MaxSize;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="出队"><a href="#出队" class="headerlink" title="出队"></a>出队</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">// 出队</span><br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">DeQueue</span><span class="hljs-params">(SqQueue &amp; q, ElemType &amp; x)</span></span>&#123;<br><span class="hljs-comment">// 队空, 报错</span><br><span class="hljs-keyword">if</span>(<span class="hljs-built_in">EmptyQueue</span>(q)) <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br><br><span class="hljs-comment">// 出队</span><br>x = q.data[q.front];<br>q.front = (q.front + <span class="hljs-number">1</span>) % MaxSize;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="获得队头元素"><a href="#获得队头元素" class="headerlink" title="获得队头元素"></a>获得队头元素</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">// 获得队头元素</span><br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">GetHead</span><span class="hljs-params">(SqQueue q, ElemType &amp; x)</span></span>&#123;<br><span class="hljs-comment">// 队空，报错</span><br><span class="hljs-keyword">if</span>(<span class="hljs-built_in">EmptyQueue</span>(q)) <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br><br><span class="hljs-comment">// 获得队头元素</span><br>x = q.data[q.front];<br><span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 考研笔试自用算法大题模板 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 考研笔试自用算法大题模板 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>顺序栈</title>
      <link href="/posts/15d79a1a4b3e/"/>
      <url>/posts/15d79a1a4b3e/</url>
      
        <content type="html"><![CDATA[<h3 id="顺序栈"><a href="#顺序栈" class="headerlink" title="顺序栈"></a>顺序栈</h3><wavy>顺序栈比较好写,因此我使用它作为我的算法模板</wavy><h3 id="顺序栈的类型描述"><a href="#顺序栈的类型描述" class="headerlink" title="顺序栈的类型描述"></a>顺序栈的类型描述</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">define</span> MaxSize 50</span><br><span class="hljs-keyword">typedef</span> <span class="hljs-type">int</span> ElemType;<br><br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">struct</span>&#123;<br>ElemType data[MaxSize]; <span class="hljs-comment">// 存放栈中元素</span><br><span class="hljs-type">int</span> top; <span class="hljs-comment">// 栈顶指针</span><br>&#125; SqStack;<br></code></pre></td></tr></table></figure><h3 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">// 初始化栈</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">InitStack</span><span class="hljs-params">(SqStack &amp; s)</span></span>&#123;<br>s.top = <span class="hljs-number">-1</span>; <span class="hljs-comment">// 初始化栈顶指针</span><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="判断栈空"><a href="#判断栈空" class="headerlink" title="判断栈空"></a>判断栈空</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">// 判断栈空</span><br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">StackEmpty</span><span class="hljs-params">(SqStack s)</span></span>&#123; <br><span class="hljs-keyword">if</span>(s.top == <span class="hljs-number">-1</span>) <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="入栈"><a href="#入栈" class="headerlink" title="入栈"></a>入栈</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">// 入栈</span><br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">Push</span><span class="hljs-params">(SqStack &amp; s, ElemType x)</span></span>&#123;<br><span class="hljs-comment">// 看栈是否已满,报错</span><br><span class="hljs-keyword">if</span>(s.top == MaxSize - <span class="hljs-number">1</span>) <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br><span class="hljs-comment">// 入栈</span><br>s.data[++s.top] = x;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>; <span class="hljs-comment">// 成功</span><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="出栈"><a href="#出栈" class="headerlink" title="出栈"></a>出栈</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">// 出栈</span><br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">Pop</span><span class="hljs-params">(SqStack &amp; s, ElemType &amp; x)</span></span>&#123;<br><span class="hljs-comment">// 判断栈是否为空</span><br><span class="hljs-keyword">if</span>(<span class="hljs-built_in">StackEmpty</span>(s)) <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br><span class="hljs-comment">// 先出栈，再减</span><br>x = s.data[s.top--];<br><span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="获得栈顶元素"><a href="#获得栈顶元素" class="headerlink" title="获得栈顶元素"></a>获得栈顶元素</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">// 获得栈顶元素</span><br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">GetTop</span><span class="hljs-params">(SqStack s, ElemType &amp; x)</span></span>&#123;<br><span class="hljs-comment">// 空栈，报错</span><br><span class="hljs-keyword">if</span>(<span class="hljs-built_in">StackEmpty</span>(s)) <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br><span class="hljs-comment">// 获取栈顶元素</span><br>x = s.data[s.top];<br><span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 考研笔试自用算法大题模板 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 考研笔试自用算法大题模板 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>浅尝治光师沃卡74110耶加雪菲手冲咖啡</title>
      <link href="/posts/89001a5236dd/"/>
      <url>/posts/89001a5236dd/</url>
      
        <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>最近又买了两款<code>治光师</code>的咖啡豆。</p><p><img src="https://bu.dusays.com/2023/09/11/64ff1c3e0aee9.webp" alt="Screenshot_20230911_214426_com.taobao.taobao"></p><p><img src="https://bu.dusays.com/2023/09/11/64ff1c53bc299.webp" alt="IMG_20230904_174607"></p><h3 id="过程记录"><a href="#过程记录" class="headerlink" title="过程记录"></a>过程记录</h3><p><img src="https://bu.dusays.com/2023/09/11/64ff1cbb12663.jpg" alt="IMG_20230910_035340"></p><p><img src="https://bu.dusays.com/2023/09/11/64ff1d1fb1cfc.webp" alt="IMG_20230910_035309"></p><h3 id="主观评价"><a href="#主观评价" class="headerlink" title="主观评价"></a>主观评价</h3><p>冲好后，是红茶和柑橘香味。<br>高温表现为：酸质明亮，甜感十足，但还是酸更为突出。</p><p>温度低一点，甜感增强许多。</p><p>低温时，轻微泛苦，甜感更强，但失去香味，茶感还未失去，有点像吃了烂果子的甜感。</p><p>总体评价：中高温很好喝，让人想一直喝。</p>]]></content>
      
      
      <categories>
          
          <category> 生活 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 生活 </tag>
            
            <tag> 咖啡 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>浅尝辛鹿号码系列手冲咖啡</title>
      <link href="/posts/9d745f9baaa9/"/>
      <url>/posts/9d745f9baaa9/</url>
      
        <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>之前买了<code>辛鹿SOE耶加雪菲</code>，然后我去评论了它的风味描述，店家看到了找我售后，表示他们很抱歉。作为顾客，我觉得辛鹿的这个价格，本身我对他家的豆子就不报有很大期望，我基本上是将<code>辛鹿</code>作为行业性价比龙头来看待的，因为学生党时代，我买过辛鹿的咖啡豆，因为便宜，但是味道也就不多提了。</p><p>店家这次给我补偿了一些豆子希望我尝尝，然后表示歉意，所以我还是写一篇评测。</p><p><img src="https://bu.dusays.com/2023/08/08/64d1fa8d9e1e8.png" alt="image-20230808161911377"></p><h3 id="过程记录"><a href="#过程记录" class="headerlink" title="过程记录"></a>过程记录</h3><p>首先上场的是：<code>辛鹿02意式拼配</code>。</p><p>闻起来就知道是深烘系列了，一如既往的焦味，能喝出些许酸味，整体风味均衡。</p><p>应该算是经典老咖啡风味了。</p><p>总体评价：老咖啡、性价比高。</p><p>然后是：<code>辛鹿04精品罗布斯塔</code>。</p><p>闻起来有种不一样的味道，不是纯烟熏味，更多的是大麦茶的味道，而且气泡超多。</p><p><img src="https://bu.dusays.com/2023/08/08/64d22c610c730.webp" alt="IMG_20230808_194509"></p><p><img src="https://bu.dusays.com/2023/08/08/64d22c60a1944.webp" alt="IMG_20230808_194519"></p><p>喝起来绝了！这尼玛纯纯<code>大麦茶</code>！喝一口，剩下的就不喝了。</p><p>总体评价：大麦茶，不推荐！</p><p>在喝完大麦茶之后，现在是：<code>辛鹿05精选蓝山风味</code>。</p><p>第一口下去纯苦，多喝几口，有浅烘的些许热带水果风味。总体挺均衡，风味不突出。</p><p>总体评价：均衡，均衡得想笑。</p><p>最后，是：<code>辛鹿06精品庄园圆豆</code>。</p><p>闻起来好像是浅烘，呜呜呜，连续喝了那么多深烘，人要死啦。尝尝这个豆子怎么样吧。</p><p>额，喝起来是中烘，风味其实感觉像<code>中烘的耶加雪菲</code>，个人感觉比<code>05</code>好喝，起码这个有风味。</p><p>总体评价：中烘耶加雪菲？性价比高，还行。</p>]]></content>
      
      
      <categories>
          
          <category> 生活 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 生活 </tag>
            
            <tag> 咖啡 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>浅尝四人咖啡粉红佳人手冲咖啡</title>
      <link href="/posts/b8bb6e256940/"/>
      <url>/posts/b8bb6e256940/</url>
      
        <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>这次事件挺有意思的，起因是我给了<code>四人咖啡果丁丁</code>一个中评，然后客服来问我要不要售后，退货也行，我表示不需要，并且表示下次要购买他家的<code>粉红佳人</code>，他说给我先送点喝喝，我起初以为给我补发<code>30 g</code>豆子尝尝鲜，谁知道他家诚意满满，发了<code>100 g</code>。</p><p>不过喝了之后，我表示很不错，他家也是发了一个修改评价，我也是改成了好评+空评价。</p><p><img src="https://bu.dusays.com/2023/08/08/64d1ed5b9ac47.webp" alt="Screenshot_20230808_151607_com.taobao.taobao"></p><h3 id="过程记录"><a href="#过程记录" class="headerlink" title="过程记录"></a>过程记录</h3><p><img src="https://bu.dusays.com/2023/08/08/64d1edc1c17af.webp" alt="Screenshot_20230808_151830_com.taobao.taobao"></p><p><img src="https://bu.dusays.com/2023/08/08/64d1ede675129.webp" alt="IMG_20230808_145826"></p><p><img src="https://bu.dusays.com/2023/08/08/64d1edd1322eb.webp" alt="IMG_20230808_145904"></p><h3 id="主观评价"><a href="#主观评价" class="headerlink" title="主观评价"></a>主观评价</h3><p>你知道什么是<code>花香</code>吗？你知道什么是<code>蜜桃</code>吗？我小啜第一口，全是<code>蜜桃和花香</code>，而不是<code>酸或甜</code>。我怀疑店家给我的是<code>A1</code>品质的豆子，几乎喝不出什么负面的味道。</p><p>中高温，蜜桃风味明显，随后才是酸和甜的草莓风味。低温，酸味开始突出，但是蜜桃风味不减，甜感增强。</p><p>继治光师伊迪朵水洗耶加雪菲之后，又一让我眼前一亮的豆子，很惊艳。</p><p>总体评价：蜜桃、草莓、高品质、性价比高、推荐。</p>]]></content>
      
      
      <categories>
          
          <category> 生活 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 生活 </tag>
            
            <tag> 咖啡 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>浅尝治光师野草莓手冲咖啡(整活)</title>
      <link href="/posts/0e42f4daeb32/"/>
      <url>/posts/0e42f4daeb32/</url>
      
        <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>买了<code>治光师</code>的另一款咖啡豆，这款咖啡豆是意式拼配，中深烘焙的。之前喝的差不多都是浅烘，不知道这下风味转变能不能接受了呢，应该问题不大，毕竟以前黑咖我都是不加糖的，主打一个不怕苦。</p><p><code>治光师</code>店铺也九周年了，送了一些小玩意，虽然没啥用，姑且也算送了？</p><p><img src="https://bu.dusays.com/2023/08/03/64cb3337d9470.webp" alt="IMG_20230801_181148"></p><h3 id="过程记录"><a href="#过程记录" class="headerlink" title="过程记录"></a>过程记录</h3><p><img src="https://bu.dusays.com/2023/08/03/64cb32d81bb8a.webp" alt="Screenshot_20230803_114348_com.taobao.taobao"></p><p><img src="https://bu.dusays.com/2023/08/03/64cb33549edd7.webp" alt="IMG_20230803_114019"></p><p><img src="https://bu.dusays.com/2023/08/03/64cb335dd702a.webp" alt="IMG_20230803_113927"></p><h3 id="主观评价"><a href="#主观评价" class="headerlink" title="主观评价"></a>主观评价</h3><p>豆子看起来棕亮的，冲好之后闻了一下，一股烟熏味，感觉梦回高中了。</p><p>果然，一口下去就知道<code>老咖啡</code>了。整体喝起来十分不错，不对我口味的是那烟熏味！即使是手冲也能感觉到它油脂丰富（别和我说没压就出不来油脂，我说有就有），它入口绵滑，虽然带有烟熏味，但并没有带其它奇奇怪怪的味道，比如<code>焦炭</code>这种。回味能够感受到<code>柑橘</code>风味。草莓酱我倒是没感觉到，不过毕竟是手冲吧。</p><p>这算整活了吧，因为这豆子要用<code>咖啡机</code>来制作，然而我是手冲！因为我现在还没咖啡机，仅仅是手冲爱好者，但是<code>治光师野草莓</code>又十分有名，我抱着试试看的心态买了这款豆子，尝尝鲜。</p><p>总体评价：中深烘焙、油脂丰富、均衡、性价比高。</p>]]></content>
      
      
      <categories>
          
          <category> 生活 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 生活 </tag>
            
            <tag> 咖啡 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>浅尝四人咖啡果丁丁耶加雪菲手冲咖啡</title>
      <link href="/posts/9c71bc76a9ad/"/>
      <url>/posts/9c71bc76a9ad/</url>
      
        <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>四人咖啡送了我一些小玩意，还送了我一包<code>花海</code>，之后我再喝。</p><h3 id="过程记录"><a href="#过程记录" class="headerlink" title="过程记录"></a>过程记录</h3><p><img src="https://bu.dusays.com/2023/08/01/64c83b62d354b.jpg" alt="Screenshot_20230801_065234_com.taobao.taobao"></p><p><img src="https://bu.dusays.com/2023/08/01/64c83b71273d0.webp" alt="IMG_20230801_062901"></p><p><img src="https://bu.dusays.com/2023/08/01/64c83b8391dae.webp" alt="IMG_20230801_063010"></p><p><img src="https://bu.dusays.com/2023/08/01/64c83b951ee47.webp" alt="IMG_20230801_063637"></p><p><img src="https://bu.dusays.com/2023/08/01/64c83b9ea4a2d.webp" alt="IMG_20230801_064028"></p><h3 id="主观评价"><a href="#主观评价" class="headerlink" title="主观评价"></a>主观评价</h3><p>偏高温时，第一口居然是莫名其妙的味道，第二口继续确认，出来的是<code>茶感</code>，随后品<code>茶感</code>的时候容易品出<code>木质</code>和<code>涩味</code>，随后感觉像咬到了一颗焦炭豆子一样，口腔开始发苦。</p><p>温度稍微下来，酸味明亮，茶感明显。但后半段伴随着不好的味道，比如：木质、涩味、烟熏、焦炭。</p><p>其中不好的味道比较突出的是：木质、涩味、焦炭。还是那个问题，喝到瑕疵豆了！</p><p>到了中温才能更好喝出它的风味，耶加雪菲的感觉。不过风味变成：柑橘、焦糖了。</p><p>不过它确实能喝出来，水蜜桃的风味，很神奇哦，不过我是在偏中低温情况喝出来的。高温的表现并不好，因为不好的味道突出太明显了。咖啡豆还真就和运气沾点边，我这批次的豆子应该属于不太理想。去除那些瑕疵风味，我想<code>果丁丁</code>一定非常好喝。</p><p>总体评价：耶加雪菲、些许木质、涩、烟熏焦炭、性价比一般。</p>]]></content>
      
      
      <categories>
          
          <category> 生活 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 生活 </tag>
            
            <tag> 咖啡 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>王道数据结构链表习题</title>
      <link href="/posts/78005f2f1e1c/"/>
      <url>/posts/78005f2f1e1c/</url>
      
        <content type="html"><![CDATA[<h3 id="链表经典大题"><a href="#链表经典大题" class="headerlink" title="链表经典大题"></a>链表经典大题</h3><h4 id="递归删除不带头结点的单链表中所有值为-x-的结点"><a href="#递归删除不带头结点的单链表中所有值为-x-的结点" class="headerlink" title="递归删除不带头结点的单链表中所有值为 x 的结点"></a>递归删除不带头结点的单链表中所有值为 x 的结点</h4><p><img src="https://bu.dusays.com/2023/07/31/64c75c76e2b3a.png" alt="image-20230731150204492"></p><p>题目说了是 L 哦。但是我代码写得是 list。偷懒了。</p><h5 id="核心思想"><a href="#核心思想" class="headerlink" title="核心思想"></a>核心思想</h5><p>板子</p><h5 id="核心代码"><a href="#核心代码" class="headerlink" title="核心代码"></a>核心代码</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">// 递归删除不带头结点单链表中 x 的值</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">Del_x</span><span class="hljs-params">(LinkList &amp; list, <span class="hljs-type">int</span> x)</span></span>&#123;<br><span class="hljs-comment">// 出口</span><br><span class="hljs-keyword">if</span>(!list) <span class="hljs-keyword">return</span>;<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(list -&gt; data == x)&#123;<br><span class="hljs-comment">// 如果当前递归中的结点是应该被删除的结点</span><br>LNode * p = list;<br>list = list -&gt; next; <span class="hljs-comment">// 指向下一个结点</span><br><span class="hljs-built_in">free</span>(p);<br><span class="hljs-comment">// 继续寻找</span><br><span class="hljs-built_in">Del_x</span>(list, x);<br><br><span class="hljs-comment">// 下面这三行代码是绝对不能写！！！死循环</span><br><span class="hljs-comment">// LNode * p = list -&gt; next;</span><br><span class="hljs-comment">// free(list);</span><br><span class="hljs-comment">// Del_x(p, x);</span><br>&#125;<span class="hljs-keyword">else</span>&#123;<br><span class="hljs-comment">// 不是应该被删除的结点</span><br><span class="hljs-built_in">Del_x</span>(list -&gt; next, x);<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="附赠无头结点的尾插法代码"><a href="#附赠无头结点的尾插法代码" class="headerlink" title="附赠无头结点的尾插法代码"></a>附赠无头结点的尾插法代码</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">// 无头结点尾插法建立单链表</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">TailInsert</span><span class="hljs-params">(LinkList &amp; list)</span></span>&#123;<br><span class="hljs-built_in">InitList</span>(list);<br><br>LNode * r;<br><br><span class="hljs-type">int</span> x;<br>cin &gt;&gt; x;<br><br><span class="hljs-keyword">while</span>(x != <span class="hljs-number">9999</span>)&#123;<br>LNode * s = (LNode *)<span class="hljs-built_in">malloc</span>(<span class="hljs-built_in">sizeof</span>(LNode));<br>s -&gt; data = x;<br>s -&gt; next = <span class="hljs-literal">NULL</span>;<br><span class="hljs-comment">// 是第一个结点</span><br><span class="hljs-keyword">if</span>(!list) list = s;<br><span class="hljs-keyword">else</span>&#123;<br><span class="hljs-comment">// 平常的尾插</span><br>s -&gt; next = r -&gt; next;<br>r -&gt; next = s;<br>&#125;<br>r = s;<br>cin &gt;&gt; x;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="删除带头结点的单链表中所有值为-x-的结点"><a href="#删除带头结点的单链表中所有值为-x-的结点" class="headerlink" title="删除带头结点的单链表中所有值为 x 的结点"></a>删除带头结点的单链表中所有值为 x 的结点</h4><p><img src="https://bu.dusays.com/2023/07/31/64c76dedf2ece.png" alt="image-20230731161643650"></p><h5 id="核心思想-1"><a href="#核心思想-1" class="headerlink" title="核心思想"></a>核心思想</h5><p>板子</p><h5 id="核心代码-1"><a href="#核心代码-1" class="headerlink" title="核心代码"></a>核心代码</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">// 删除带头结点单链表中 x 的值</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">Del_x</span><span class="hljs-params">(LinkList &amp; list, <span class="hljs-type">int</span> x)</span></span>&#123;<br>LNode * pre = list, * cur = list -&gt; next;<br><br><span class="hljs-keyword">while</span>(cur)&#123;<br><span class="hljs-comment">// 当前结点是应该被删除的结点</span><br><span class="hljs-keyword">if</span>(cur -&gt; data == x)&#123;<br>LNode * q = cur;<br>cur = cur -&gt; next;<br>pre -&gt; next = cur;<br><span class="hljs-built_in">free</span>(q);<br>&#125;<span class="hljs-keyword">else</span>&#123;<br><span class="hljs-comment">// 当前结点不是应该被删除的结点</span><br>pre = cur;<br>cur = cur -&gt; next;<br>&#125;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="从尾到头反向输出带头结点单链表中每个结点的值"><a href="#从尾到头反向输出带头结点单链表中每个结点的值" class="headerlink" title="从尾到头反向输出带头结点单链表中每个结点的值"></a>从尾到头反向输出带头结点单链表中每个结点的值</h4><p><img src="https://bu.dusays.com/2023/08/03/64cb446b8fd07.png" alt="image-20230803135630640"></p><h5 id="核心思想-2"><a href="#核心思想-2" class="headerlink" title="核心思想"></a>核心思想</h5><p>利用栈的思想</p><h5 id="核心代码-2"><a href="#核心代码-2" class="headerlink" title="核心代码"></a>核心代码</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">// 反向输出链表中每个结点的值</span><br><span class="hljs-comment">// 0.在 main 函数中，调用要注意！</span><br><span class="hljs-comment">// 1.Reverse_Print（list -&gt; next); 带头结点</span><br><span class="hljs-comment">// 2.Reverse_Print（list); 不带头结点</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">Reverse_Print</span><span class="hljs-params">(LinkList list)</span></span>&#123;<br><span class="hljs-comment">// 出口</span><br><span class="hljs-keyword">if</span>(!list) <span class="hljs-keyword">return</span>;<br><br><span class="hljs-comment">// 入栈</span><br><span class="hljs-built_in">Reverse_Print</span>(list -&gt; next);<br><br><span class="hljs-comment">// 出栈</span><br>cout &lt;&lt; list -&gt; data &lt;&lt; <span class="hljs-string">&quot; &quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="删除带头结点单链表中的唯一最小值"><a href="#删除带头结点单链表中的唯一最小值" class="headerlink" title="删除带头结点单链表中的唯一最小值"></a>删除带头结点单链表中的唯一最小值</h4><p><img src="https://bu.dusays.com/2023/08/03/64cb4502a04bb.png" alt="image-20230803141117604"></p><h5 id="核心思想-3"><a href="#核心思想-3" class="headerlink" title="核心思想"></a>核心思想</h5><ol><li>利用 <code>min_pre</code>、<code>cur</code> 两个指针</li><li>利用线性表寻找最小值算法思想</li><li><code>min_pre</code>用来更新保存，目前已知最小值结点的前一个结点</li></ol><h5 id="核心代码-3"><a href="#核心代码-3" class="headerlink" title="核心代码"></a>核心代码</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">// 删除单链表中唯一最小值结点</span><br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">Del_Min</span><span class="hljs-params">(LinkList &amp; list)</span></span>&#123;<br><span class="hljs-comment">// 如果是空表或只有头节点</span><br><span class="hljs-keyword">if</span>(!list || !list -&gt; next) <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br><span class="hljs-comment">// 经典前后指针</span><br>LNode * pre = list, * cur = list -&gt; next;<br>    <span class="hljs-comment">// 保存最小值结点的前一个结点</span><br>LNode * min_pre = list;<br><br><span class="hljs-comment">// 假设最小值是第一个节点</span><br>LNode * t = cur;<br><span class="hljs-comment">// 打擂台</span><br><span class="hljs-keyword">while</span>(cur)&#123;<br><span class="hljs-comment">// 如果发现比最小值还要小的</span><br>         <span class="hljs-comment">// 打赢了，新的当 t</span><br><span class="hljs-keyword">if</span>(cur -&gt; data &lt; t -&gt; data)&#123;<br>t = cur;<br>             <span class="hljs-comment">// pre 作为 新的min_pre</span><br>min_pre = pre;<br>&#125;<br><span class="hljs-comment">// 俩指针后移</span><br>pre = cur;<br>cur = cur -&gt; next;<br>&#125;<br><br><span class="hljs-comment">// 删除擂主</span><br>min_pre -&gt; next = t -&gt; next;<br><span class="hljs-built_in">free</span>(t);<br><br><span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="带头结点的单链表逆置"><a href="#带头结点的单链表逆置" class="headerlink" title="带头结点的单链表逆置"></a>带头结点的单链表逆置</h4><p><img src="https://bu.dusays.com/2023/08/03/64cb637357a20.png" alt="image-20230803162110380"></p><h5 id="核心思想-4"><a href="#核心思想-4" class="headerlink" title="核心思想"></a>核心思想</h5><p>准备<code>pre</code>、<code>cur</code>、<code>r</code> 3个指针，<code>cur</code>指向<code>pre</code>。</p><h5 id="核心代码-4"><a href="#核心代码-4" class="headerlink" title="核心代码"></a>核心代码</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">// 单链表就地逆置</span><br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">Reverse_LinkList</span><span class="hljs-params">(LinkList &amp; list)</span></span>&#123;<br><span class="hljs-comment">// 空表或者只有头结点或者只有一个元素</span><br><span class="hljs-keyword">if</span>(!list || !list -&gt; next || !list -&gt; next -&gt; next) <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br><br>LNode * pre = list , * cur = list -&gt; next;<br>LNode * r = cur -&gt; next;<br><span class="hljs-comment">// NULL &lt;- cur &lt;- r</span><br>cur -&gt; next = <span class="hljs-literal">NULL</span>;<br><br><span class="hljs-keyword">while</span>(r)&#123;<br>pre = cur;<br>cur = r;<br>r = r -&gt; next;<br>cur -&gt; next = pre;<br>&#125;<br><br><span class="hljs-comment">// cur才是真正的主元素，r只是拿来判断的边界条件</span><br>list -&gt; next = cur;<br><br><span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="单链表的插入排序"><a href="#单链表的插入排序" class="headerlink" title="单链表的插入排序"></a>单链表的插入排序</h4><p><img src="https://bu.dusays.com/2023/08/09/64d32c0724c39.png" alt="image-20230809140236810"></p><h5 id="核心思想-5"><a href="#核心思想-5" class="headerlink" title="核心思想"></a>核心思想</h5><p><a href="/posts/f7271c1a5982/">跳转链接</a></p><h5 id="核心代码-5"><a href="#核心代码-5" class="headerlink" title="核心代码"></a>核心代码</h5><p><a href="/posts/f7271c1a5982/">跳转链接</a></p><h4 id="两个单链表的公共结点"><a href="#两个单链表的公共结点" class="headerlink" title="两个单链表的公共结点"></a>两个单链表的公共结点</h4><p><img src="https://bu.dusays.com/2023/08/09/64d32d21a0968.png" alt="image-20230809140728686"></p><h5 id="核心思想-6"><a href="#核心思想-6" class="headerlink" title="核心思想"></a>核心思想</h5><p>假设有两个单链表<code>A</code>和<code>B</code>。</p><p>单链表<code>A</code>长度为：a</p><p>单链表<code>B</code>长度为：b</p><p>无非两种情况：<code>相交</code>和<code>不相交</code></p><p><img src="https://bu.dusays.com/2023/08/09/64d32ff3099be.png" alt="image-20230809141931085"></p><p>可以利用<code>a + c + b</code> ＝ <code>b + c + a</code>。求出交点。</p><p>这是<code>不相交</code>的情况。</p><p><img src="https://bu.dusays.com/2023/08/09/64d330de84da4.png" alt="image-20230809142327260"></p><p><code>a + b</code> ＝ <code>b + a</code>。</p><p>相遇为<code>NULL</code>，返回<code>NULL</code>。</p><p><code>公式恒成立</code>。</p><h5 id="核心代码-6"><a href="#核心代码-6" class="headerlink" title="核心代码"></a>核心代码</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function">LNode * <span class="hljs-title">findFirstCommonNode</span><span class="hljs-params">(LinkList headA, LinkList headB)</span> </span>&#123;<br>    LNode * p = headA , * q = headB;<br>    <br>    <span class="hljs-keyword">while</span>(p != q)&#123;<br>        p = p ? p -&gt; next : headB;<br>        q = q ? q -&gt; next : headA;<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> p;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="将原单链表A分裂为：奇A表和偶B表"><a href="#将原单链表A分裂为：奇A表和偶B表" class="headerlink" title="将原单链表A分裂为：奇A表和偶B表"></a>将原单链表A分裂为：<code>奇A表</code>和<code>偶B表</code></h4><p><img src="https://bu.dusays.com/2023/08/09/64d33587565fd.png" alt="image-20230809144319763"></p><h5 id="核心思想-7"><a href="#核心思想-7" class="headerlink" title="核心思想"></a>核心思想</h5><ol><li>奇偶序号计数<code>i</code>。</li><li><code>ra</code>和<code>rb</code>尾指针。</li><li>将<code>A</code>的<code>next</code>先<code>置空</code>，后面会通过<code>ra</code>来增加结点。</li><li>根据<code>i</code>的奇偶，在<code>ra</code>或者<code>rb</code>后面增加结点<code>p</code>，再更新<code>ra</code>或<code>rb</code>。</li><li><code>ra</code>和<code>rb</code>的<code>next</code>需要<code>置空</code>。</li></ol><h5 id="核心代码-7"><a href="#核心代码-7" class="headerlink" title="核心代码"></a>核心代码</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">// 将原单链表A分裂为：`奇A表`和`偶B表`</span><br><span class="hljs-function">LinkList <span class="hljs-title">Re_Create</span><span class="hljs-params">(LinkList &amp; A)</span></span>&#123;<br><span class="hljs-comment">// 准备B表</span><br>LinkList B = (LNode *)<span class="hljs-built_in">malloc</span>(<span class="hljs-built_in">sizeof</span>(LNode));<br>B -&gt; next = <span class="hljs-literal">NULL</span>;<br><br><span class="hljs-comment">// 准备工作</span><br>LNode * ra = A , * rb = B; <span class="hljs-comment">// A 和 B 的尾指针</span><br>LNode * p = A -&gt; next; <span class="hljs-comment">// 遍历准备工作</span><br><br><span class="hljs-comment">// A 表断开</span><br>A -&gt; next = <span class="hljs-literal">NULL</span>;<br><br><span class="hljs-comment">// 奇偶序列计数</span><br><span class="hljs-type">int</span> i = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">while</span>(p)&#123;<br>i++;<br><span class="hljs-comment">// 奇</span><br><span class="hljs-keyword">if</span>(i % <span class="hljs-number">2</span>)&#123;<br>ra -&gt; next = p;<br>ra = p;<br>&#125;<span class="hljs-keyword">else</span>&#123;<br><span class="hljs-comment">// 偶</span><br>rb -&gt; next = p;<br>rb = p;<br>&#125;<br>p = p -&gt; next;<br>&#125;<br><span class="hljs-comment">// 尾指针置空</span><br>ra -&gt; next = <span class="hljs-literal">NULL</span>;<br>rb -&gt; next = <span class="hljs-literal">NULL</span>;<br><br><span class="hljs-keyword">return</span> B;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="递增有序的单链表，去除相同的元素"><a href="#递增有序的单链表，去除相同的元素" class="headerlink" title="递增有序的单链表，去除相同的元素"></a>递增有序的单链表，去除相同的元素</h4><p><img src="https://bu.dusays.com/2023/08/09/64d33acd8d1ba.png" alt="image-20230809150548410"></p><h5 id="核心思想-8"><a href="#核心思想-8" class="headerlink" title="核心思想"></a>核心思想</h5><p><a href="448d550da686">跳转链接</a></p><h5 id="核心代码-8"><a href="#核心代码-8" class="headerlink" title="核心代码"></a>核心代码</h5><p><a href="448d550da686">跳转链接</a></p><h4 id="带头结点的循环双链表是否对称"><a href="#带头结点的循环双链表是否对称" class="headerlink" title="带头结点的循环双链表是否对称"></a>带头结点的循环双链表是否对称</h4><p><img src="https://bu.dusays.com/2023/08/09/64d33f2db78aa.png" alt="image-20230809152429784"></p><h5 id="核心思想-9"><a href="#核心思想-9" class="headerlink" title="核心思想"></a>核心思想</h5><ol><li>设置两个指针<code>p</code>和<code>q</code>。往两个不同的方向走</li><li>结点数是奇数和偶数，是难点。<code>2n + 1</code>和<code>2n</code>。</li></ol><h5 id="核心代码-9"><a href="#核心代码-9" class="headerlink" title="核心代码"></a>核心代码</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">Symmetry</span><span class="hljs-params">(DLinkList list)</span></span>&#123;<br>    DNode * p = list -&gt; next , * q = list -&gt; prior;<br>    <span class="hljs-comment">// 第二个条件容易写成 p -&gt; next != q;</span><br>    <span class="hljs-keyword">while</span>(p != q &amp;&amp; q -&gt; next != p)&#123;<br>        <span class="hljs-keyword">if</span>(p -&gt; data == q -&gt; data)&#123;<br>            p = p -&gt; next;<br>            q = q -&gt; prior;<br>        &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="单链表判断是否有环"><a href="#单链表判断是否有环" class="headerlink" title="单链表判断是否有环"></a>单链表判断是否有环</h4><p><img src="https://bu.dusays.com/2023/08/09/64d34b2220fb7.png" alt="image-20230809161529567"></p><h5 id="核心思想-10"><a href="#核心思想-10" class="headerlink" title="核心思想"></a>核心思想</h5><ul><li>慢指针一步一步走，快指针两步两步走</li><li>无环：快指针必定会先到达终点（NULL）</li><li>有环：俩指针会相遇，相遇之后，让慢指针回到起点，再让快慢指针同步速度，一步一步走</li><li>当再次相遇的时候，那个点就是环的入口</li></ul><h5 id="核心代码-10"><a href="#核心代码-10" class="headerlink" title="核心代码"></a>核心代码</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Definition for singly-linked list.</span><br><span class="hljs-comment"> * struct ListNode &#123;</span><br><span class="hljs-comment"> *     int val;</span><br><span class="hljs-comment"> *     ListNode *next;</span><br><span class="hljs-comment"> *     ListNode(int x) : val(x), next(NULL) &#123;&#125;</span><br><span class="hljs-comment"> * &#125;;</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function">ListNode *<span class="hljs-title">entryNodeOfLoop</span><span class="hljs-params">(ListNode *head)</span> </span>&#123;<br>        ListNode * slow = head , * fast = head;<br><br>        <span class="hljs-keyword">while</span>(fast &amp;&amp; fast-&gt;next)&#123;<br>            fast = fast-&gt;next-&gt;next;<br>            slow = slow-&gt;next;<br>            <span class="hljs-comment">// 有环，相遇了</span><br>            <span class="hljs-keyword">if</span>(slow == fast) <span class="hljs-keyword">break</span>;<br>        &#125;<br>        <span class="hljs-comment">// 如果fast是空，那么代表无环，否则代表有环，并且slow == fast成立</span><br>        <span class="hljs-comment">// 而且，如果while循环条件一开始就没满足，那么代表head是空节点亦或者长度为1</span><br>        <span class="hljs-keyword">if</span>(!fast || !fast-&gt;next) <span class="hljs-keyword">return</span> <span class="hljs-literal">NULL</span>;<br>        <span class="hljs-comment">// slow == fast ， 有环</span><br>        <span class="hljs-comment">// 让slow回去，fast和slow以同样的速度走，再次相遇就是环的入口结点</span><br>        slow = head;<br>        <span class="hljs-keyword">while</span>(slow != fast)&#123;<br>            slow = slow -&gt; next;<br>            fast = fast -&gt; next;<br>        &#125;<br>        <span class="hljs-comment">// 再次相遇了</span><br>        <span class="hljs-keyword">return</span> slow;<br>    &#125;<br>&#125;;<br><br>作者：麦高芬<br>链接：https:<span class="hljs-comment">//www.acwing.com/solution/content/153752/</span><br>来源：AcWing<br>著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。<br></code></pre></td></tr></table></figure><h4 id="单链表倒数第-k-个值"><a href="#单链表倒数第-k-个值" class="headerlink" title="单链表倒数第 k 个值"></a>单链表倒数第 k 个值</h4><p><img src="https://bu.dusays.com/2023/08/09/64d34d9156593.png" alt="image-20230809162553225"></p><h5 id="核心思想-11"><a href="#核心思想-11" class="headerlink" title="核心思想"></a>核心思想</h5><ol><li>两个指针<code>p</code>和<code>q</code></li><li>先让它们两个相距<code>k</code></li><li>当<code>q</code>遍历完的时候，<code>p</code>就是倒数第<code>k</code>个节点</li></ol><h5 id="核心代码-11"><a href="#核心代码-11" class="headerlink" title="核心代码"></a>核心代码</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">Search_K</span><span class="hljs-params">(LinkList list, <span class="hljs-type">int</span> k)</span></span>&#123;<br><span class="hljs-comment">// 计数</span><br><span class="hljs-type">int</span> count = <span class="hljs-number">0</span>;<br><br>LNode * p = list -&gt; next, * q = list -&gt; next;<br><br><span class="hljs-keyword">while</span>(q)&#123;<br><span class="hljs-comment">// 先让q走 k 步</span><br><span class="hljs-keyword">if</span>(count &lt; k)&#123;<br>count++;<br>q = q -&gt; next;<br>&#125;<span class="hljs-keyword">else</span>&#123;<br>p = p -&gt; next;<br>q = q -&gt; next;<br>&#125;<br>&#125;<br><br><span class="hljs-comment">// 查找失败</span><br><span class="hljs-keyword">if</span>(count &lt; k) <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br><span class="hljs-keyword">else</span> cout &lt;&lt; p -&gt; data &lt;&lt; endl;<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="重排链表"><a href="#重排链表" class="headerlink" title="重排链表"></a>重排链表</h4><p><img src="https://bu.dusays.com/2023/08/09/64d35190e4e8b.png" alt="image-20230809164257287"></p><h5 id="核心思想-12"><a href="#核心思想-12" class="headerlink" title="核心思想"></a>核心思想</h5><ol><li>先遍历一遍链表，获取链表的长度。</li><li>根据获取到的链表长度，获取链表中间的结点。(向上取整)</li><li>反转后半段链表。</li><li>合并前半段链表和反转后的后半段链表。</li></ol><h5 id="核心代码-12"><a href="#核心代码-12" class="headerlink" title="核心代码"></a>核心代码</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">rearrangedList</span><span class="hljs-params">(ListNode* head)</span> </span>&#123;<br>        <span class="hljs-keyword">if</span>(!head-&gt;next) <span class="hljs-keyword">return</span>;<br>        <span class="hljs-comment">// 获取链表的长度</span><br>        <span class="hljs-type">int</span> len = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">auto</span> p = head ; p ; p = p -&gt; next) len++;<br>    <br>        <span class="hljs-comment">// 链表中间的结点</span><br>        <span class="hljs-type">int</span> left = (len + <span class="hljs-number">1</span>) &gt;&gt; <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">auto</span> a = head;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span> ; i &lt; left - <span class="hljs-number">1</span> ; i++) a = a -&gt; next;<br>    <span class="hljs-comment">// 反转后半段链表，b在前，c在后  </span><br>        <span class="hljs-keyword">auto</span> b = a -&gt; next , c = b -&gt; next;<br>    <span class="hljs-comment">// a-&gt;next 是为了从中间将链表截断；b-&gt;next 是因为此时的 b 是反转后链表的结尾元素</span><br>        a -&gt; next = b -&gt; next = <span class="hljs-literal">NULL</span>;<br>        <br>        <span class="hljs-keyword">while</span>(c)&#123;<br>            <span class="hljs-keyword">auto</span> p = c -&gt; next;<br>            c -&gt; next = b;<br>            b = c; c = p;<br>        &#125;<br>    <br>        <span class="hljs-comment">// 合并链表，注意此时 b 指向反转链表头部</span><br>        <span class="hljs-keyword">auto</span> p = head;<br>        <span class="hljs-keyword">auto</span> q = b;<br>        <span class="hljs-comment">// o -&gt; o -&gt; o -&gt; NULL (p)</span><br>        <span class="hljs-comment">// o -&gt; o -&gt; o -&gt; NULL (q)</span><br>        <span class="hljs-keyword">while</span>(q)&#123;<br>            <span class="hljs-keyword">auto</span> o = q -&gt; next;<br>            q -&gt; next = p -&gt; next;<br>            p -&gt; next = q;<br>            p = q -&gt; next;<br>            q = o;<br>        &#125;<br>    &#125;<br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 王道数据结构习题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 王道数据结构习题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>浅尝治光师肯尼亚圆豆手冲咖啡</title>
      <link href="/posts/bb95ebed2e97/"/>
      <url>/posts/bb95ebed2e97/</url>
      
        <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>这是治光师会员限购9.9包邮的，肯尼亚FCS合作社顶级圆豆批次，水洗处理的浅烘豆子。</p><p>9.9元30g，不妨让我来试试水。</p><h3 id="过程记录"><a href="#过程记录" class="headerlink" title="过程记录"></a>过程记录</h3><p><img src="https://bu.dusays.com/2023/07/30/64c5986ae14d5.webp" alt="Screenshot_20230730_064146_com.taobao.taobao"></p><p><img src="https://bu.dusays.com/2023/07/30/64c5987b1a642.webp" alt="IMG_20230730_063602"></p><p><img src="https://bu.dusays.com/2023/07/31/64c74e7532b67.webp" alt="IMG_20230730_063624"></p><h3 id="主观评价"><a href="#主观评价" class="headerlink" title="主观评价"></a>主观评价</h3><p>一到货熟豆闻起来和之前买的<code>菠萝成子危地马拉瑰夏</code>味道差不多。先养养豆。</p><p>第一口下去是它的酸度和甜度，比较突出，酸度明显高于<code>治光师耶加雪菲</code>，最大的亮点是它真的<code>很甜</code>。喝完后回甘有很久很久，感觉喝了蜂蜜一样，不过对于我这种不太喜欢甜的咖啡的人来说，有点偏齁甜了。它的<code>热带水果风味</code>实在太足了，十分好喝，有轻微涩味，不过太能接受了！</p><p>总体评价：烟熏、涩、果酸和甜感突出、性价比高、推荐。</p>]]></content>
      
      
      <categories>
          
          <category> 生活 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 生活 </tag>
            
            <tag> 咖啡 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>浅尝治光师伊迪朵耶加雪菲手冲咖啡</title>
      <link href="/posts/32f6f1e29b78/"/>
      <url>/posts/32f6f1e29b78/</url>
      
        <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>这款<code>治光师伊迪朵耶加雪菲</code>是群友推荐的，直接无脑买了。<br>写这篇文章，已经过了好些日子了，这是第二次喝的时候写的评价。</p><h3 id="过程记录"><a href="#过程记录" class="headerlink" title="过程记录"></a>过程记录</h3><p><img src="https://bu.dusays.com/2023/07/13/64af5071a51a7.webp" alt="Screenshot_20230713_085908_com.taobao.taobao"></p><p><img src="https://bu.dusays.com/2023/07/23/64bc7cf456c60.webp" alt="IMG_20230723_064938"></p><p><img src="https://bu.dusays.com/2023/07/23/64bc7cf52e837.webp" alt="IMG_20230723_065210"></p><p><img src="https://bu.dusays.com/2023/07/23/64bc7cf44e11f.webp" alt="IMG_20230714_081733"></p><h3 id="主观评价"><a href="#主观评价" class="headerlink" title="主观评价"></a>主观评价</h3><p>首先，从豆子品控来看，是十分优秀的。</p><p>高温下，酸很<code>明亮</code>，基本无涩感，值得一提的是<code>茶感</code>很明显，有些许回甘，带<code>清香的甜</code>。</p><p>低温下，酸更加明显，有<code>SeeSaw 甜橙子</code>那味了。<code>茶感</code>更上一层楼。</p><p>目前喝过<code>最棒的耶加雪菲</code>。</p><p>缺点可能就是100g需要45元，喝几次就无了吧。真的，它就是优秀，挑不出什么刺。非要说的话，喝完后还是有些许烟熏感，不过能够接受。</p><p>不过我觉得这种价格配得上这种品质。</p><p>总体评价：浅烘、水果清香、茶感浓郁、性价比适中、推荐回购。</p>]]></content>
      
      
      <categories>
          
          <category> 生活 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 生活 </tag>
            
            <tag> 咖啡 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>浅尝菠萝成子危地马拉瑰夏手冲咖啡</title>
      <link href="/posts/fcab5f014e92/"/>
      <url>/posts/fcab5f014e92/</url>
      
        <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>瑰夏！瑰夏！瑰夏！</p><p>啊，我终于也能喝上瑰夏了，不过这款瑰夏不是出自<code>巴拿马的翡翠庄园</code>的瑰夏。</p><p>而是出自<code>危地马拉的庄园</code>。</p><h3 id="过程记录"><a href="#过程记录" class="headerlink" title="过程记录"></a>过程记录</h3><p><img src="https://bu.dusays.com/2023/07/22/64bb06f93ff84.jpg" alt="Screenshot_20230722_062419_com.taobao.taobao"></p><p><img src="https://bu.dusays.com/2023/07/22/64bb0705f2398.jpg" alt="IMG_20230713_190844"></p><p><img src="https://bu.dusays.com/2023/07/22/64bb070c95363.jpg" alt="IMG_20230713_200015"></p><h3 id="主观评价"><a href="#主观评价" class="headerlink" title="主观评价"></a>主观评价</h3><p>根据<code>菠萝成子</code>介绍，入手了这款瑰夏，他说这款瑰夏一定是真的瑰夏。</p><p>这款瑰夏是中烘的，开包后香味给我的感觉是没有之前的豆子香，我层怀疑是不是豆子不新鲜了，密封罐好像很容易就打开了，是否起到了密封效果？嚼了两粒，确定一下，是<code>大麦茶</code>的味道，香香脆脆的。</p><p><code>瑰夏</code>为什么是瑰夏呢？不仅是指品种，还有风味。</p><p>即使是中烘，苦味一点儿也不明显，突出的更多是水果风味，属于那种真的很清香的，带草莓的酸的感觉，有焦糖味，有一点红茶茶感，喝完后给我的感觉是很均衡，<code>为什么感觉刚刚喝的是水？</code>。喝完后，还是能够感觉到明显的烘焙味，喉咙还是有点不太舒服，也许这也就是之前口嚼大麦茶味的缘由吧。</p><p>真的！这尼玛就是水吧，尝试了各种不同的水粉比，果然是水…</p><p>和闻起来一样，喝起来也是如此清淡，好喝倒是一言难尽，不过我不喜欢那种喝完后那种喉咙被烟熏的感觉。</p><p>总体评价：中烘、清淡、烟熏、性价比低。</p>]]></content>
      
      
      <categories>
          
          <category> 生活 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 生活 </tag>
            
            <tag> 咖啡 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>王道数据结构算法设计大题汇总</title>
      <link href="/posts/ba547e211266/"/>
      <url>/posts/ba547e211266/</url>
      
        <content type="html"><![CDATA[<h3 id="第一章-线性表"><a href="#第一章-线性表" class="headerlink" title="第一章 线性表"></a>第一章 线性表</h3><ol><li><a href="/posts/f57f98d1b5f4">顺序表</a></li><li><a href="/posts/78005f2f1e1c">链表</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> 置顶汇总 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 置顶汇总 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>王道数据结构顺序表习题</title>
      <link href="/posts/f57f98d1b5f4/"/>
      <url>/posts/f57f98d1b5f4/</url>
      
        <content type="html"><![CDATA[<h3 id="顺序表经典大题"><a href="#顺序表经典大题" class="headerlink" title="顺序表经典大题"></a>顺序表经典大题</h3><h4 id="删除顺序表中的最小值"><a href="#删除顺序表中的最小值" class="headerlink" title="删除顺序表中的最小值"></a>删除顺序表中的最小值</h4><p><img src="https://bu.dusays.com/2023/07/18/64b6140d7eb70.png" alt="image-20230718122418457"></p><h5 id="核心思想"><a href="#核心思想" class="headerlink" title="核心思想"></a>核心思想</h5><p>遍历表，查找最小值，并记住位置 </p><h5 id="核心代码"><a href="#核心代码" class="headerlink" title="核心代码"></a>核心代码</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">Del_Min</span><span class="hljs-params">(SqList &amp; list, <span class="hljs-type">int</span> &amp; value)</span></span>&#123;<br><span class="hljs-comment">// 表空</span><br><span class="hljs-keyword">if</span>(list.length == <span class="hljs-number">0</span>) <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br><br><span class="hljs-comment">// 假定最小值是第1个元素</span><br>value = list.data[<span class="hljs-number">0</span>];<br><span class="hljs-type">int</span> pos = <span class="hljs-number">0</span>;<br><br><span class="hljs-comment">// 遍历表，尝试找到更小的元素（从第2个元素开始找起）</span><br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt; list.length; i++)&#123;<br><span class="hljs-keyword">if</span>(list.data[i] &lt; value)&#123;<br>value = list.data[i];<br>pos = i;<br>&#125;<br>&#125;<br><br><span class="hljs-comment">// 题目要求：空出的位置由最后一个元素顶替</span><br>list.data[pos] = list.data[list.length - <span class="hljs-number">1</span>];<br><br>list.length--; <span class="hljs-comment">// 这一步是最最最容易忘记的！！！</span><br><br><span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="逆置顺序表"><a href="#逆置顺序表" class="headerlink" title="逆置顺序表"></a>逆置顺序表</h4><p><img src="https://bu.dusays.com/2023/07/18/64b619073eeab.png" alt="image-20230718124559870"></p><h5 id="核心思想-1"><a href="#核心思想-1" class="headerlink" title="核心思想"></a>核心思想</h5><p>算法板子…</p><h5 id="核心代码-1"><a href="#核心代码-1" class="headerlink" title="核心代码"></a>核心代码</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">Reverse</span><span class="hljs-params">(SqList &amp; list, <span class="hljs-type">int</span> from, <span class="hljs-type">int</span> to)</span></span>&#123;<br><span class="hljs-comment">// 空表</span><br><span class="hljs-keyword">if</span>(list.length == <span class="hljs-number">0</span>) <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br><br>    <span class="hljs-comment">// 输入非法</span><br>    <span class="hljs-keyword">if</span>(from &gt;= to) <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    <br>    <span class="hljs-comment">// 向上取整</span><br><span class="hljs-type">int</span> mid = (to - from + <span class="hljs-number">1</span>) / <span class="hljs-number">2</span>;<br><br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; mid; i++)&#123;<br><span class="hljs-type">int</span> temp = list.data[from + i];<br>list.data[from + i] = list.data[to - i];<br>list.data[to - i] = temp;<br>&#125;<br><br><span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="顺序表批量删除指定值-x-元素"><a href="#顺序表批量删除指定值-x-元素" class="headerlink" title="顺序表批量删除指定值 x 元素"></a>顺序表批量删除指定值 x 元素</h4><p><img src="https://bu.dusays.com/2023/07/18/64b61b50f028c.png" alt="image-20230718125544632"></p><h5 id="核心思想-2"><a href="#核心思想-2" class="headerlink" title="核心思想"></a>核心思想</h5><p>利用变量<code>k</code>，从0开始，遍历表，只保留<code>非 x</code> 元素</p><h5 id="核心代码-2"><a href="#核心代码-2" class="headerlink" title="核心代码"></a>核心代码</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">Del_x</span><span class="hljs-params">(SqList &amp; list, <span class="hljs-type">int</span> x)</span></span>&#123;<br><span class="hljs-comment">// 空表</span><br><span class="hljs-keyword">if</span>(list.length == <span class="hljs-number">0</span>) <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br><br><span class="hljs-type">int</span> k = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; list.length; i++)<br><span class="hljs-keyword">if</span>(list.data[i] != x)<br>list.data[k++] = list.data[i];<br><br><span class="hljs-comment">// k 才是有效表长</span><br>list.length = k;<br><br><span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="顺序表在某条件下的批量删除"><a href="#顺序表在某条件下的批量删除" class="headerlink" title="顺序表在某条件下的批量删除"></a>顺序表在某条件下的批量删除</h4><p><img src="https://bu.dusays.com/2023/07/18/64b626805f0ac.png" alt="image-20230718134328974"></p><h5 id="核心思想-3"><a href="#核心思想-3" class="headerlink" title="核心思想"></a>核心思想</h5><p>算法板子…</p><p><img src="https://bu.dusays.com/2023/07/18/64b629de5c63b.png" alt="image-20230718135751532"></p><h5 id="核心代码-3"><a href="#核心代码-3" class="headerlink" title="核心代码"></a>核心代码</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">Del_range</span><span class="hljs-params">(SqList &amp; list, <span class="hljs-type">int</span> s, <span class="hljs-type">int</span> t)</span></span>&#123;<br><span class="hljs-comment">// 空表</span><br><span class="hljs-keyword">if</span>(list.length == <span class="hljs-number">0</span>) <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br><br><span class="hljs-comment">// 题目要求，非法输入判定</span><br><span class="hljs-keyword">if</span>(s &gt;= t) <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br><br><span class="hljs-type">int</span> i = <span class="hljs-number">0</span>, k = <span class="hljs-number">0</span>;<br><br><span class="hljs-keyword">while</span>(i &lt; list.length)&#123;<br><span class="hljs-comment">// 值在[s,t]这个范围内 k++</span><br><span class="hljs-keyword">if</span>(list.data[i] &gt;= s &amp;&amp; list.data[i] &lt;= t) k++;<br><span class="hljs-keyword">else</span> list.data[i - k] = list.data[i]; <span class="hljs-comment">// 不在这个范围则直接位移</span><br>i++;<br>&#125;<br><br><span class="hljs-comment">// 更新表长，删除了 k 个</span><br>list.length -= k;<br><br><span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="删除顺序表中重复元素"><a href="#删除顺序表中重复元素" class="headerlink" title="删除顺序表中重复元素"></a>删除顺序表中重复元素</h4><p><img src="https://bu.dusays.com/2023/07/18/64b62c656f8fc.png" alt="image-20230718140838298"></p><h5 id="核心思想-4"><a href="#核心思想-4" class="headerlink" title="核心思想"></a>核心思想</h5><p>经典的双指针算法。</p><h5 id="核心代码-4"><a href="#核心代码-4" class="headerlink" title="核心代码"></a>核心代码</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">Del_repeat</span><span class="hljs-params">(SqList &amp; list)</span></span>&#123;<br><span class="hljs-comment">// 空表</span><br><span class="hljs-keyword">if</span>(list.length == <span class="hljs-number">0</span>) <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br><br><span class="hljs-type">int</span> i,j;<br><br><span class="hljs-keyword">for</span>(i = <span class="hljs-number">0</span>, j = <span class="hljs-number">1</span>; j &lt; list.length; j++)<br><span class="hljs-comment">// 出现不同元素</span><br><span class="hljs-keyword">if</span>(list.data[i] != list.data[j])<br><span class="hljs-comment">// 前移 不能写 i++ 必须要写 ++i ！！！！</span><br>             <span class="hljs-comment">// 不同的元素要放在 i 的下一个位置(保证)</span><br>list.data[++i] = list.data[j];<br><br><br>list.length = i + <span class="hljs-number">1</span>;<br><br><span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="线性表的-AB-gt-BA-问题"><a href="#线性表的-AB-gt-BA-问题" class="headerlink" title="线性表的 AB =&gt; BA 问题"></a>线性表的 AB =&gt; BA 问题</h4><p><img src="https://bu.dusays.com/2023/07/18/64b631f37d5fe.png" alt="image-20230718143153144"></p><h5 id="核心思想-5"><a href="#核心思想-5" class="headerlink" title="核心思想"></a>核心思想</h5><p><img src="https://bu.dusays.com/2023/07/18/64b6372246520.png" alt="image-20230718145427110"></p><h5 id="核心代码-5"><a href="#核心代码-5" class="headerlink" title="核心代码"></a>核心代码</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">Reverse</span><span class="hljs-params">(SqList &amp; list, <span class="hljs-type">int</span> from, <span class="hljs-type">int</span> to)</span></span>&#123;<br><span class="hljs-comment">// 空表</span><br><span class="hljs-keyword">if</span>(list.length == <span class="hljs-number">0</span>) <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br><br><span class="hljs-comment">// 输入非法</span><br><span class="hljs-keyword">if</span>(from &gt;= to) <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br><br><span class="hljs-comment">// 向上取整</span><br><span class="hljs-type">int</span> mid = (to - from + <span class="hljs-number">1</span>) / <span class="hljs-number">2</span>;<br><br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; mid; i++)&#123;<br><span class="hljs-type">int</span> temp = list.data[from + i];<br>list.data[from + i] = list.data[to - i];<br>list.data[to - i] = temp;<br>&#125;<br><br><span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">Converse</span><span class="hljs-params">(SqList &amp; list, <span class="hljs-type">int</span> m, <span class="hljs-type">int</span> n)</span></span>&#123;<br><span class="hljs-built_in">Reverse</span>(list, <span class="hljs-number">0</span>, m + n - <span class="hljs-number">1</span>);<br><span class="hljs-built_in">Reverse</span>(list, <span class="hljs-number">0</span>, n - <span class="hljs-number">1</span>);<br><span class="hljs-built_in">Reverse</span>(list, n, m + n - <span class="hljs-number">1</span>);<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="顺序表的二分查找"><a href="#顺序表的二分查找" class="headerlink" title="顺序表的二分查找"></a>顺序表的二分查找</h4><p><img src="https://bu.dusays.com/2023/07/18/64b6380c82626.png" alt="image-20230718145821268"></p><h5 id="核心思想-6"><a href="#核心思想-6" class="headerlink" title="核心思想"></a>核心思想</h5><p>使用<code>折半查找</code>。</p><h5 id="核心代码-6"><a href="#核心代码-6" class="headerlink" title="核心代码"></a>核心代码</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">SearchExchangeInsert</span><span class="hljs-params">(SqList &amp; list, <span class="hljs-type">int</span> x)</span></span>&#123;<br><span class="hljs-comment">// 二分</span><br><span class="hljs-type">int</span> left = <span class="hljs-number">0</span>, right = list.length - <span class="hljs-number">1</span>, mid;<br><br><span class="hljs-keyword">while</span>(left &lt;= right)&#123;<br><span class="hljs-comment">// 防溢出</span><br>mid = left + (right - left) / <span class="hljs-number">2</span>;<br><br><span class="hljs-keyword">if</span>(list.data[mid] == x) <span class="hljs-keyword">break</span>;<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(list.data[mid] &lt; x) left = mid + <span class="hljs-number">1</span>;<br><span class="hljs-keyword">else</span> right = mid - <span class="hljs-number">1</span>;<br>&#125;<br><br><span class="hljs-comment">// 找到了，与它后面那个元素进行交换（要有的话）</span><br><span class="hljs-keyword">if</span>(list.data[mid] == x &amp;&amp; mid != list.length - <span class="hljs-number">1</span>)&#123;<br><span class="hljs-built_in">swap</span>(list.data[mid],list.data[mid + <span class="hljs-number">1</span>]); <span class="hljs-comment">// 偷懒了</span><br>&#125;<br><br><span class="hljs-comment">// 没找到</span><br><span class="hljs-keyword">if</span>(left &gt; right)&#123;<br><span class="hljs-type">int</span> i;<br><span class="hljs-keyword">for</span>(i = list.length - <span class="hljs-number">1</span>; i &gt; right; i--)&#123;<br>list.data[i + <span class="hljs-number">1</span>] = list.data[i];<br>&#125;<br>list.data[i + <span class="hljs-number">1</span>] = x;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="顺序表的主元（摩尔投票法）"><a href="#顺序表的主元（摩尔投票法）" class="headerlink" title="顺序表的主元（摩尔投票法）"></a>顺序表的主元（摩尔投票法）</h4><p>题目太长了，就不给了。</p><p>大概意思是<code>主元的数量大于总数量的一半</code></p><h5 id="核心思想-7"><a href="#核心思想-7" class="headerlink" title="核心思想"></a>核心思想</h5><p>算法板子…</p><h5 id="核心代码-7"><a href="#核心代码-7" class="headerlink" title="核心代码"></a>核心代码</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">MoreThanHalfNum_Solution</span><span class="hljs-params">(SqList list)</span></span>&#123;<br><span class="hljs-type">int</span> cnt = <span class="hljs-number">0</span>;<br><span class="hljs-type">int</span> val;<br><br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; list.length; i++)&#123;<br><span class="hljs-keyword">if</span>(!cnt) val = list.data[i], cnt++;<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(val == list.data[i]) cnt++;<br><span class="hljs-keyword">else</span> cnt--;<br>&#125;<br><br><span class="hljs-comment">// 如果有主元。统计出主元实际出现次数</span><br><span class="hljs-keyword">if</span>(cnt &gt; <span class="hljs-number">0</span>)&#123;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = cnt = <span class="hljs-number">0</span>; i &lt; list.length; i++)<br><span class="hljs-keyword">if</span>(list.data[i] == val) cnt++;<br>&#125;<br><br><span class="hljs-comment">// 主元超过总元素长度的一半</span><br><span class="hljs-keyword">if</span>(cnt &gt; list.length / <span class="hljs-number">2</span>) <span class="hljs-keyword">return</span> val;<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>; <span class="hljs-comment">// 不存在主元</span><br>&#125;<br></code></pre></td></tr></table></figure><h4 id="顺序表中未出现的最小正整数"><a href="#顺序表中未出现的最小正整数" class="headerlink" title="顺序表中未出现的最小正整数"></a>顺序表中未出现的最小正整数</h4><p><img src="https://bu.dusays.com/2023/07/18/64b64e770a249.png" alt="image-20230718163359493"></p><h5 id="核心思想-8"><a href="#核心思想-8" class="headerlink" title="核心思想"></a>核心思想</h5><p>桶计数</p><h5 id="核心代码-8"><a href="#核心代码-8" class="headerlink" title="核心代码"></a>核心代码</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">FindMissMin</span><span class="hljs-params">(SqList list)</span></span>&#123;<br><span class="hljs-type">int</span> i;<br><br><span class="hljs-type">int</span> * B; <span class="hljs-comment">// 桶</span><br>B = (<span class="hljs-type">int</span> *)<span class="hljs-built_in">malloc</span>(<span class="hljs-built_in">sizeof</span>(<span class="hljs-type">int</span>) * list.length);<br><span class="hljs-built_in">memset</span>(B, <span class="hljs-number">0</span>, <span class="hljs-built_in">sizeof</span>(<span class="hljs-type">int</span>) * list.length); <span class="hljs-comment">// 赋初始值为0</span><br><br><span class="hljs-comment">// 计数</span><br><span class="hljs-keyword">for</span>(i = <span class="hljs-number">0</span>; i &lt; list.length; i++)<br><span class="hljs-comment">// 合法的范围</span><br><span class="hljs-keyword">if</span>(list.data[i] &gt; <span class="hljs-number">0</span> &amp;&amp; list.data[i] &lt;= list.length)<br>B[list.data[i] - <span class="hljs-number">1</span>] = <span class="hljs-number">1</span>; <span class="hljs-comment">// 标记出现过</span><br><span class="hljs-comment">// 从桶里面找最小整数</span><br><span class="hljs-keyword">for</span>(i = <span class="hljs-number">0</span>; i &lt; list.length; i++)<br><span class="hljs-keyword">if</span>(!B[i]) <span class="hljs-keyword">break</span>;<br><br><span class="hljs-keyword">return</span> i + <span class="hljs-number">1</span>;<br><br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 王道数据结构习题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 王道数据结构习题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>浅尝手冲咖啡汇总</title>
      <link href="/posts/7da784530acd/"/>
      <url>/posts/7da784530acd/</url>
      
        <content type="html"><![CDATA[<h3 id="浅尝手冲咖啡汇总"><a href="#浅尝手冲咖啡汇总" class="headerlink" title="浅尝手冲咖啡汇总"></a>浅尝手冲咖啡汇总</h3><ol><li><a href="/posts/8635f45e7775">SeeSaw 甜橙子</a></li><li><a href="/posts/cb40af96710f">八平方 晴天娃娃</a></li><li><a href="/posts/c19e2a8a5f1a">辛鹿 SOE 耶加雪菲</a></li><li><a href="/posts/fcab5f014e92">菠萝成子 危地马拉 瑰夏</a></li><li><a href="/posts/32f6f1e29b78">治光师 伊迪朵 耶加雪菲</a></li><li><a href="/posts/bb95ebed2e97">治光师 肯尼亚圆豆</a></li><li><a href="/posts/9c71bc76a9ad">四人咖啡 果丁丁</a></li><li><a href="/posts/0e42f4daeb32">治光师 野草莓意式拼配咖啡</a></li><li><a href="/posts/b8bb6e256940">四人咖啡 粉红佳人</a></li><li><a href="/posts/9d745f9baaa9">辛鹿 号码系列</a></li><li><a href="/posts/89001a5236dd">治光师 沃卡74110 耶加雪菲</a></li></ol><div class="tip home"><p>最近很忙，暂时停更…</p></div>]]></content>
      
      
      <categories>
          
          <category> 置顶汇总 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 置顶汇总 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>循环链表</title>
      <link href="/posts/ac441d04cb46/"/>
      <url>/posts/ac441d04cb46/</url>
      
        <content type="html"><![CDATA[<h3 id="循环链表前言"><a href="#循环链表前言" class="headerlink" title="循环链表前言"></a>循环链表前言</h3><p>之前写了，<code>双链表</code>和<code>单链表</code>的代码模板，基于此结构的循环链表代码具体实现想偷懒了，主要是因为我觉得考的可能性不大。</p><h3 id="循环单链表的类型描述"><a href="#循环单链表的类型描述" class="headerlink" title="循环单链表的类型描述"></a>循环单链表的类型描述</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">struct</span> <span class="hljs-title class_">LNode</span>&#123;    <span class="hljs-comment">//定义循环链表结点类型</span><br><span class="hljs-type">int</span> data;            <span class="hljs-comment">//数据域</span><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">LNode</span> * next;  <span class="hljs-comment">//指针域</span><br>&#125;LNode, * LinkList;<br></code></pre></td></tr></table></figure><h3 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">//初始化</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">InitList</span><span class="hljs-params">(LinkList &amp; list)</span></span>&#123;<br>    <span class="hljs-comment">// 头结点初始化</span><br>    list = (LNode *)<span class="hljs-built_in">malloc</span>(<span class="hljs-built_in">sizeof</span>(LinkList));<br>    list -&gt; next = list; <span class="hljs-comment">// 指向自己</span><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="判空"><a href="#判空" class="headerlink" title="判空"></a>判空</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">//判空</span><br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">Empty</span><span class="hljs-params">(LinkList list)</span></span>&#123;<br>    <span class="hljs-comment">// 如果头结点的下一个结点，依旧是头结点，那么说明是空表</span><br>    <span class="hljs-keyword">if</span>(list -&gt; next == list) <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="判断表尾节点"><a href="#判断表尾节点" class="headerlink" title="判断表尾节点"></a>判断表尾节点</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">//判断结点p是否是表尾结点</span><br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">isTail</span><span class="hljs-params">(LinkList list, LNode * p)</span></span>&#123;<br>    <span class="hljs-comment">// 如果是表尾节点，它的next一定指向头结点</span><br>    <span class="hljs-keyword">if</span>(p -&gt; next == list) <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="插入和删除"><a href="#插入和删除" class="headerlink" title="插入和删除"></a>插入和删除</h3><p>循环单链表的插入、删除算法与单链表几乎一样，不同的是如果在表尾进行，那么要让单链表继续<strong>保持循环的性质</strong>，即<strong>让尾结点的next域指向头结点</strong>。</p><h3 id="循环双链表的类型描述"><a href="#循环双链表的类型描述" class="headerlink" title="循环双链表的类型描述"></a>循环双链表的类型描述</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">struct</span> <span class="hljs-title class_">DNode</span>&#123;<br>    <span class="hljs-type">int</span> data;  <span class="hljs-comment">//数据域</span><br>    <span class="hljs-keyword">struct</span> <span class="hljs-title class_">DNode</span> * prior, * next;  <span class="hljs-comment">//前驱和后继指针</span><br>&#125;DNode, * DLinkList;<br></code></pre></td></tr></table></figure><h3 id="初始化-1"><a href="#初始化-1" class="headerlink" title="初始化"></a>初始化</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">InitList</span><span class="hljs-params">(DLinkList &amp; list)</span></span>&#123;<br>    list = (LNode *)<span class="hljs-built_in">malloc</span>(<span class="hljs-built_in">sizeof</span>(LNode));<br>    list -&gt; prior = list;<br>    list -&gt; next = list;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="判空-1"><a href="#判空-1" class="headerlink" title="判空"></a>判空</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">//判空</span><br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">Empty</span><span class="hljs-params">(DLinkList list)</span></span>&#123;<br>    <span class="hljs-comment">// 如果头结点的下一个结点，依旧是头结点，那么说明是空表</span><br>    <span class="hljs-keyword">if</span>(list -&gt; next == list) <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="判断表尾节点-1"><a href="#判断表尾节点-1" class="headerlink" title="判断表尾节点"></a>判断表尾节点</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">//判断结点p是否是表尾结点</span><br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">isTail</span><span class="hljs-params">(DLinkList list, LNode * p)</span></span>&#123;<br>    <span class="hljs-comment">// 如果是表尾节点，它的next一定指向头结点</span><br>    <span class="hljs-keyword">if</span>(p -&gt; next == list) <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="插入和删除-1"><a href="#插入和删除-1" class="headerlink" title="插入和删除"></a>插入和删除</h3><p>循环双链表的插入、删除算法与双链表几乎一样，不同的是如果在表尾进行，那么要让双链表继续<strong>保持循环的性质</strong>，即<strong>让尾结点的next域指向头结点，同时让头结点的prior域指向尾结点</strong>。</p>]]></content>
      
      
      <categories>
          
          <category> 考研笔试自用算法大题模板 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 考研笔试自用模板 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>双链表</title>
      <link href="/posts/ff21019310ee/"/>
      <url>/posts/ff21019310ee/</url>
      
        <content type="html"><![CDATA[<h3 id="双链表的实现方式"><a href="#双链表的实现方式" class="headerlink" title="双链表的实现方式"></a>双链表的实现方式</h3><p>实现方式：<code>不带头结点</code>和<code>带头结点</code>。</p><p>同理，使用<code>带头结点</code>的策略。</p><wavy>个人认为，双链表考算法大题可能性不大，但是以防万一还是写一个模板</wavy><p>双链表的重难点应该是<code>边界判断</code>，比如它的<code>指定位置插入元素</code>、<code>指定位置删除元素</code>。</p><h3 id="双链表的类型描述"><a href="#双链表的类型描述" class="headerlink" title="双链表的类型描述"></a>双链表的类型描述</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">struct</span> <span class="hljs-title class_">DNode</span>&#123;<br><span class="hljs-type">int</span> data;<span class="hljs-comment">// 数据域</span><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">DNode</span> * prior,* next;<span class="hljs-comment">// 前驱和后继指针</span><br>&#125;DNode, * DLinkList;<br></code></pre></td></tr></table></figure><h3 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">// 初始化</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">InitList</span><span class="hljs-params">(DLinkList &amp; list)</span></span>&#123;<br><span class="hljs-comment">// 给头结点分配内存</span><br>list = (DNode *)<span class="hljs-built_in">malloc</span>(<span class="hljs-built_in">sizeof</span>(DNode));<br><br><span class="hljs-comment">// 张开双手的双链表的空表状态</span><br>list -&gt; prior = <span class="hljs-literal">NULL</span>;<br>list -&gt; next = <span class="hljs-literal">NULL</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="判空"><a href="#判空" class="headerlink" title="判空"></a>判空</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">// 空表判断</span><br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">Empty</span><span class="hljs-params">(DLinkList list)</span></span>&#123;<br><span class="hljs-comment">// 如果头结点指向的下一个结点是NULL</span><br><span class="hljs-keyword">if</span>(!list -&gt; next) <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="后插操作"><a href="#后插操作" class="headerlink" title="后插操作"></a>后插操作</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">// 将元素x后插到节点p</span><br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">InsertNextNode</span><span class="hljs-params">(DNode * p, <span class="hljs-type">int</span> x)</span></span>&#123;<br><span class="hljs-comment">// 不能插入到NULL后面</span><br><span class="hljs-keyword">if</span>(!p) <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br><br><span class="hljs-comment">// 创建元素x的载体，并且初始化</span><br>DNode * s = (DNode *)<span class="hljs-built_in">malloc</span>(<span class="hljs-built_in">sizeof</span>(DNode));<br>s -&gt; data = x;<br><br><span class="hljs-comment">// 双链表最后一个节点插入比较特殊，因此需要特判</span><br><span class="hljs-comment">// 只有当不是双链表最后一个节点才操作 p -&gt; next -&gt; prior</span><br><span class="hljs-keyword">if</span>(p -&gt; next) p -&gt; next -&gt; prior = s;<br>s -&gt; next = p -&gt; next;<br>p -&gt; next = s;<br>s -&gt; prior = p;<br><br><span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="尾插法"><a href="#尾插法" class="headerlink" title="尾插法"></a>尾插法</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">// 尾插法</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">TailInsert</span><span class="hljs-params">(DLinkList &amp; list)</span></span>&#123;<br><span class="hljs-built_in">InitList</span>(list);<br><br><span class="hljs-comment">// 记录尾指针（一开始是指向头结点）</span><br>DNode * r = list;<br><br><span class="hljs-type">int</span> x;<br>cin &gt;&gt; x;<br><br><span class="hljs-keyword">while</span>(x != <span class="hljs-number">9999</span>)&#123;<br><span class="hljs-comment">// 1.创建新节点</span><br>DNode * p = (DNode *)<span class="hljs-built_in">malloc</span>(<span class="hljs-built_in">sizeof</span>(DNode));<br>p -&gt; data = x;<br><span class="hljs-comment">// 2.插入</span><br>p -&gt; next = r -&gt; next;<br>r -&gt; next = p;<br>p -&gt; prior = r;<br><span class="hljs-comment">// 3.更新尾指针</span><br>r = p;<br>cin &gt;&gt; x;<br>&#125;<br><br><span class="hljs-comment">// 尾指针置空</span><br>r -&gt; next = <span class="hljs-literal">NULL</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="按位查找"><a href="#按位查找" class="headerlink" title="按位查找"></a>按位查找</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">// 按位查找</span><br><span class="hljs-function">DNode * <span class="hljs-title">GetElem</span><span class="hljs-params">(DLinkList list, <span class="hljs-type">int</span> i)</span></span>&#123;<br><span class="hljs-comment">// 如果是第0个位置返回头结点</span><br><span class="hljs-keyword">if</span>(i == <span class="hljs-number">0</span>) <span class="hljs-keyword">return</span> list;<br><span class="hljs-comment">// 非法输入</span><br><span class="hljs-keyword">if</span>(i &lt; <span class="hljs-number">0</span>) <span class="hljs-keyword">return</span> <span class="hljs-literal">NULL</span>;<br><br><span class="hljs-comment">// 从第一个节点开始计数（可能为空）</span><br><span class="hljs-type">int</span> j = <span class="hljs-number">1</span>;<br>DNode * p = list -&gt; next;<br><br><span class="hljs-comment">// 查找（不为空，且小于要找到的位序）</span><br><span class="hljs-keyword">while</span>(p &amp;&amp; j &lt; i)&#123;<br>p = p -&gt; next;<br>j++;<br>&#125;<br><span class="hljs-comment">// 如果没那么长，也会返回p，此时p为NULL</span><br><span class="hljs-keyword">return</span> p;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="在指定位置插入元素"><a href="#在指定位置插入元素" class="headerlink" title="在指定位置插入元素"></a>在指定位置插入元素</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">// 在第 i 个位置，插入元素 x</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">Insert</span><span class="hljs-params">(DLinkList &amp; list, <span class="hljs-type">int</span> i, <span class="hljs-type">int</span> x)</span></span>&#123;<br><span class="hljs-comment">// 找到第 i - 1 个节点执行后插操作</span><br>DNode * p = <span class="hljs-built_in">GetElem</span>(list, i - <span class="hljs-number">1</span>);<br><span class="hljs-built_in">InsertNextNode</span>(p, x);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="在指定位置删除元素"><a href="#在指定位置删除元素" class="headerlink" title="在指定位置删除元素"></a>在指定位置删除元素</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">// 删除第 i 个位置的元素</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">Delete</span><span class="hljs-params">(DLinkList &amp; list, <span class="hljs-type">int</span> i)</span></span>&#123;<br><span class="hljs-comment">// 删除位置是否合法</span><br><span class="hljs-keyword">if</span>(i &lt; <span class="hljs-number">1</span> || i &gt; <span class="hljs-built_in">Length</span>(list))&#123;<br>cout&lt;&lt;<span class="hljs-string">&quot;delete failed: index is wrong.&quot;</span>&lt;&lt;endl;<br><span class="hljs-keyword">return</span>;<br>&#125;<br><br><span class="hljs-comment">// 找到第 i - 1 个元素</span><br>DNode * p = <span class="hljs-built_in">GetElem</span>(list, i - <span class="hljs-number">1</span>);<br><span class="hljs-comment">// 被删除的元素</span><br>DNode * q = p -&gt; next;<br><br><span class="hljs-comment">// 警惕！如果删除的是最后一个节点，那么需要特判</span><br><span class="hljs-comment">// 只有删除的不是最后一个节点</span><br><span class="hljs-keyword">if</span>(q -&gt; next)&#123;<br>q -&gt; next -&gt; prior = p;<br>&#125;<br>p -&gt; next = q -&gt; next;<br><span class="hljs-built_in">free</span>(q);<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 考研笔试自用算法大题模板 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 考研笔试自用算法大题模板 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>浅尝辛鹿SOE耶加雪菲手冲咖啡</title>
      <link href="/posts/c19e2a8a5f1a/"/>
      <url>/posts/c19e2a8a5f1a/</url>
      
        <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>不同品牌的不同耶加雪菲差别是不是很大呢？性价比之王的<code>辛鹿</code>和其它品牌的耶加雪菲差别是不是巨大呢？</p><p>这篇是<code>辛鹿SOE耶加雪菲</code>的评测，这篇只写主观评价，作为以后我是否会回购的依据。</p><p>其它品牌，这里选择了口碑不错的<code>治光师</code>。</p><p><img src="https://bu.dusays.com/2023/07/13/64af5071a51a7.webp" alt="Screenshot_20230713_085908_com.taobao.taobao"></p><h3 id="过程记录"><a href="#过程记录" class="headerlink" title="过程记录"></a>过程记录</h3><p><img src="https://bu.dusays.com/2023/07/13/64af50880a611.webp" alt="IMG_20230713_081516"></p><p><img src="https://bu.dusays.com/2023/07/13/64af5091cfebd.webp" alt="IMG_20230713_081713"></p><h3 id="主观评价"><a href="#主观评价" class="headerlink" title="主观评价"></a>主观评价</h3><p><code>辛鹿耶加雪菲</code>喝起来让我十分不舒服，回味充满了烟熏味，不久这种感觉就能占领你的口腔，令我喉咙十分不舒服。</p><p>有水果风味，但还能感觉到明显涩味和木质感。入口前半段表现还是不错的，但是后半段表现糟糕。不过放冷之后，整体变得比一开始好喝多了。</p><p>个人不喜欢这款<code>辛鹿耶加雪菲</code>，但是考虑到日常提神需求，以及它的价格，会否回购可以进行考虑。</p><div class="tip home"><p>2023年9月27日更新</p></div><p>豆子放置了一个来月，此时表现为，中高温柑橘茶感风味，低温的各种不好的表现出现，其中最主要是木质和涩味。<br>此时我使用的是三段冲法。这个时期我给的评价是：趁热喝还行，埃塞风味，放冷了就是渣。中高温的性价比是极高的。</p><p>总体评价：浅中烘焙、烟熏、木质、涩、性价比高。</p>]]></content>
      
      
      <categories>
          
          <category> 生活 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 生活 </tag>
            
            <tag> 咖啡 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>浅尝八平方晴天娃娃手冲咖啡</title>
      <link href="/posts/cb40af96710f/"/>
      <url>/posts/cb40af96710f/</url>
      
        <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>这是我的第二篇关于咖啡的主观评测。</p><p>这篇文章的意义主要是作为以后我是否会回购的依据。</p><h3 id="过程记录"><a href="#过程记录" class="headerlink" title="过程记录"></a>过程记录</h3><p><img src="https://bu.dusays.com/2023/07/09/64aa52eceb0b8.webp" alt="IMG_20230709_135823"></p><p><img src="https://bu.dusays.com/2023/07/09/64aa52f922f15.webp" alt="IMG_20230709_140302"></p><p><img src="https://bu.dusays.com/2023/07/09/64aa53037427f.webp" alt="IMG_20230709_140331"></p><p><img src="https://bu.dusays.com/2023/07/09/64aa530a5b14d.webp" alt="IMG_20230709_140918"></p><h3 id="主观评价"><a href="#主观评价" class="headerlink" title="主观评价"></a>主观评价</h3><p>这次一打开包装，猛吸一口，瞬间是很舒服的咖啡香味，随后带给我的感觉有点刺鼻（吸得太猛了），还有除咖啡豆味其它的味道，是独特的香味。</p><p><code>八平方晴天娃娃</code>的处理法是<code>厌氧日晒</code>处理，第一次喝厌氧日晒处理法的手冲咖啡。</p><p><code>八平方晴天娃娃</code>相比<code>SeeSaw甜橙子</code>，它的酸味并没有那么突出，酸味和苦味是比较均衡的。让我感觉：<code>哦，这款咖啡一定是浅烘的</code>。能明显感受到甜味，不愧是厌氧处理的。</p><p><code>八平方晴天娃娃</code>的缺点也很明显（瑕疵豆有点多，希望是我倒霉吧），喝下去我能明显感受到它的<code>木质感</code>，<code>烟熏味</code>，<code>涩味</code>。因为个人不是很喜欢<code>烟熏味</code>太重的咖啡。</p><p>这次应该翻车了吧，豆子品控不太好，瑕疵豆很影响口感。<code>倘若筛掉瑕疵豆，应该会很好喝</code>。</p><p>总体评价：浅烘、酸质均衡、水果风味、烟熏、性价比低，不推荐。</p>]]></content>
      
      
      <categories>
          
          <category> 生活 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 生活 </tag>
            
            <tag> 咖啡 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>单链表</title>
      <link href="/posts/634af820198d/"/>
      <url>/posts/634af820198d/</url>
      
        <content type="html"><![CDATA[<h3 id="单链表的实现方式"><a href="#单链表的实现方式" class="headerlink" title="单链表的实现方式"></a>单链表的实现方式</h3><p>实现方式：<code>不带头结点</code>和<code>带头结点</code></p><p>为了写代码方便，使用<code>带头结点</code>的策略作为我的算法模板</p><h3 id="单链表的类型描述"><a href="#单链表的类型描述" class="headerlink" title="单链表的类型描述"></a>单链表的类型描述</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">struct</span> <span class="hljs-title class_">LNode</span>&#123;<br><span class="hljs-type">int</span> data;<br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">LNode</span> * next;<br>&#125;LNode, * LinkList;<br></code></pre></td></tr></table></figure><h3 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">// 初始化</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">InitList</span><span class="hljs-params">(LinkList &amp; list)</span></span>&#123;<br><span class="hljs-comment">// 1. 给头结点分配内存</span><br>list = (LNode *)<span class="hljs-built_in">malloc</span>(<span class="hljs-built_in">sizeof</span>(LNode));<br><span class="hljs-comment">// 2. 头结点指向的下一个结点地址为NULL</span><br>list -&gt; next = <span class="hljs-literal">NULL</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="判空"><a href="#判空" class="headerlink" title="判空"></a>判空</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">// 判空</span><br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">Empty</span><span class="hljs-params">(LinkList list)</span></span>&#123;<br><span class="hljs-comment">// 如果头结点下一个结点指向NULL，则为空</span><br><span class="hljs-keyword">if</span>(!list -&gt; next) <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="后插操作"><a href="#后插操作" class="headerlink" title="后插操作"></a>后插操作</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">// 在p结点之后插入元素e</span><br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">InsertNextNode</span><span class="hljs-params">(LNode * p, <span class="hljs-type">int</span> e)</span></span>&#123;<br><span class="hljs-comment">// 1.不能在NULL后面插入元素</span><br><span class="hljs-keyword">if</span>(!p) <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br><span class="hljs-comment">// 2.创建新节点承载元素e</span><br>LNode * s = (LNode *)<span class="hljs-built_in">malloc</span>(<span class="hljs-built_in">sizeof</span>(LNode));<br>s -&gt; data = e;<br><span class="hljs-comment">// 3.后插</span><br>s -&gt; next = p -&gt; next;<br>p -&gt; next = s;<br><br><span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="头插法建立单链表"><a href="#头插法建立单链表" class="headerlink" title="头插法建立单链表"></a>头插法建立单链表</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">HeadInsert</span><span class="hljs-params">(LinkList &amp; list)</span></span>&#123;<br><span class="hljs-comment">// 初始化单链表</span><br><span class="hljs-built_in">InitList</span>(list);<br><span class="hljs-comment">// 批量插入</span><br><span class="hljs-type">int</span> x;<br>cin &gt;&gt; x;<br><br><span class="hljs-keyword">while</span>(x != <span class="hljs-number">9999</span>)&#123;<br><span class="hljs-built_in">InsertNextNode</span>(list, x);<br>cin &gt;&gt; x;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="尾插法建立单链表"><a href="#尾插法建立单链表" class="headerlink" title="尾插法建立单链表"></a>尾插法建立单链表</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">// 尾插法建立单链表</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">TailInsert</span><span class="hljs-params">(LinkList &amp; list)</span></span>&#123;<br><span class="hljs-comment">// 初始化单链表</span><br><span class="hljs-built_in">InitList</span>(list);<br><span class="hljs-comment">// 需要一个尾指针指向当前单链表的最后一个有效节点</span><br>LNode * r = list; <span class="hljs-comment">// 最初是头结点</span><br><span class="hljs-comment">// 批量输入</span><br><span class="hljs-type">int</span> x;<br>cin &gt;&gt; x;<br><br><span class="hljs-keyword">while</span>(x != <span class="hljs-number">9999</span>)&#123;<br>LNode * s = (LNode *)<span class="hljs-built_in">malloc</span>(<span class="hljs-built_in">sizeof</span>(LNode));<br>s -&gt; data = x;<br><span class="hljs-comment">// 在尾指针指向的节点后面插入新元素</span><br>s -&gt; next = r -&gt; next;<br>r -&gt; next = s;<br>r = s; <span class="hljs-comment">// 更新尾指针</span><br>cin &gt;&gt; x;<br>&#125;<br><span class="hljs-comment">// 非常重要！！！！</span><br>r -&gt; next = <span class="hljs-literal">NULL</span>;<span class="hljs-comment">// 尾指针指向的节点的next置空</span><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="按位查找"><a href="#按位查找" class="headerlink" title="按位查找"></a>按位查找</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">// 按位查找</span><br><span class="hljs-function">LNode * <span class="hljs-title">GetElem</span><span class="hljs-params">(LinkList list, <span class="hljs-type">int</span> i)</span></span>&#123;<br><span class="hljs-comment">// 1. 位置判断(0:取出头结点)</span><br><span class="hljs-keyword">if</span>(i == <span class="hljs-number">0</span>) <span class="hljs-keyword">return</span> list;<br><span class="hljs-comment">// 无效非法的位置i</span><br><span class="hljs-keyword">if</span>(i &lt; <span class="hljs-number">1</span>) <span class="hljs-keyword">return</span> <span class="hljs-literal">NULL</span>;<br><br><span class="hljs-comment">// 2. 查找</span><br><span class="hljs-comment">// 计数器</span><br><span class="hljs-type">int</span> j = <span class="hljs-number">1</span>;<br><span class="hljs-comment">// 第一个元素（可能为空）</span><br>LNode * p = list -&gt; next;<br><br><span class="hljs-keyword">while</span>(p &amp;&amp; j &lt; i)&#123; <span class="hljs-comment">// 循环次数为：相距 i - 1 次(从第1位置找到第4位置需要移动3个单位）</span><br>j++;<br>p = p -&gt; next;<br>&#125;<br><br><span class="hljs-keyword">return</span> p;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="插入"><a href="#插入" class="headerlink" title="插入"></a>插入</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">//将x插入到单链表list的第i个位置上</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">Insert</span><span class="hljs-params">(LinkList &amp; list, <span class="hljs-type">int</span> i, <span class="hljs-type">int</span> x)</span></span>&#123;<br><span class="hljs-comment">// 插入操作需要先找到第 i - 1 个位置的节点，再插入</span><br>LNode * p = <span class="hljs-built_in">GetElem</span>(list,i<span class="hljs-number">-1</span>);<br><span class="hljs-comment">// 在 p 节点后面插入元素x</span><br><span class="hljs-built_in">InsertNextNode</span>(p, x);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">// 将单链表中的第i个结点删除</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">Delete</span><span class="hljs-params">(LinkList &amp; list, <span class="hljs-type">int</span> i)</span></span>&#123;<br><span class="hljs-keyword">if</span>(i&lt;<span class="hljs-number">1</span> || i &gt; <span class="hljs-built_in">Length</span>(list))&#123;<br>cout&lt;&lt;<span class="hljs-string">&quot;delete failed: index is wrong.&quot;</span>&lt;&lt;endl;<br><span class="hljs-keyword">return</span>;<br>&#125;<br><span class="hljs-comment">// 找到第 i - 1 个节点</span><br>LNode * p = <span class="hljs-built_in">GetElem</span>(list,i<span class="hljs-number">-1</span>);<br><span class="hljs-comment">// 删除</span><br>LNode * q = p-&gt;next;<br>p-&gt;next = q-&gt;next;<br><span class="hljs-built_in">free</span>(q);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="另外：前插操作"><a href="#另外：前插操作" class="headerlink" title="另外：前插操作"></a>另外：前插操作</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">//前插操作：在p结点之前插入元素e</span><br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">InsertPriorNode</span><span class="hljs-params">(LNode * p, <span class="hljs-type">int</span> e)</span></span>&#123;<br>    <span class="hljs-comment">// 不能在NULL之前插入元素</span><br>    <span class="hljs-keyword">if</span>(!p) <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    <span class="hljs-comment">// 前插</span><br>    <span class="hljs-comment">// 创建新节点，在p节点后插</span><br>    LNode * s = (LNode *)<span class="hljs-built_in">malloc</span>(<span class="hljs-built_in">sizeof</span>(LNode));<br>    s-&gt;next = p-&gt;next;<br>    p-&gt;next = s;<br>    <span class="hljs-comment">// p给s，e给p</span><br>    s-&gt;data = p-&gt;data;<br>    p-&gt;data = e;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 考研笔试自用算法大题模板 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 考研笔试自用算法大题模板 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>顺序表</title>
      <link href="/posts/b854574263bd/"/>
      <url>/posts/b854574263bd/</url>
      
        <content type="html"><![CDATA[<h3 id="顺序表的实现方式"><a href="#顺序表的实现方式" class="headerlink" title="顺序表的实现方式"></a>顺序表的实现方式</h3><p>实现方式：<code>静态分配</code>和<code>动态分配</code></p><wavy>根据观察，包括王道书上的算法设计题，绝大部分使用的是静态分配的顺序表，因此我使用同样的策略作为我的算法模板</wavy><h3 id="顺序表的类型描述"><a href="#顺序表的类型描述" class="headerlink" title="顺序表的类型描述"></a>顺序表的类型描述</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">define</span> MaxSize 50; <span class="hljs-comment">//定义最大长度</span></span><br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">struct</span>&#123;<br>    <span class="hljs-type">int</span> data[MaxSize];       <span class="hljs-comment">//“静态”的数组存数据，存int数据</span><br>    <span class="hljs-type">int</span> length;              <span class="hljs-comment">//顺序表的当前长度</span><br>&#125;SqList;<br></code></pre></td></tr></table></figure><h3 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">// 初始化顺序表</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">InitList</span><span class="hljs-params">(SqList &amp; list)</span></span>&#123;<br><span class="hljs-comment">// 1.将表中所有元素赋值为0</span><br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; list.length; i++)&#123;<br>list.data[i] = <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-comment">// 2.将表的当前长度赋值为0</span><br>list.length = <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="插入"><a href="#插入" class="headerlink" title="插入"></a>插入</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">// 在顺序表的第i个(位序)上插入值e</span><br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">ListInsert</span><span class="hljs-params">(SqList &amp; list, <span class="hljs-type">int</span> i, <span class="hljs-type">int</span> e)</span></span>&#123;<br><span class="hljs-comment">// 1.判断插入位置合法性</span><br><span class="hljs-keyword">if</span>(i &lt; <span class="hljs-number">1</span> || i &gt; list.length + <span class="hljs-number">1</span>)<br><span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br><span class="hljs-comment">// 2.判断表是否已经满了</span><br><span class="hljs-keyword">if</span>(list.length &gt;= MaxSize)<br><span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br><span class="hljs-comment">// 3.合法插入</span><br><span class="hljs-comment">// 3.1 由于传入的是位序，因此插入时是在下标为 i - 1 的地方插入元素</span><br><span class="hljs-comment">// 3.2 将未插入前的表中，从 i - 1 开始，所有元素后移，给新元素腾出位置</span><br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j = list.length; j &gt;=i; j--)&#123;<br>list.data[j] = list.data[j - <span class="hljs-number">1</span>];<br>&#125;<br><span class="hljs-comment">// 3.3 此时 i - 1 位置是空的，可以直接插入了</span><br>list.data[i - <span class="hljs-number">1</span>] = e;<br><span class="hljs-comment">// 插入成功，表长+1</span><br>list.length++;<br><br><span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">// 删除顺序表中第i个元素并返回其元素值e</span><br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">ListDelete</span><span class="hljs-params">(SqList &amp; list, <span class="hljs-type">int</span> i, <span class="hljs-type">int</span> &amp; e)</span></span>&#123;<br><span class="hljs-comment">// 1.判断删除位置合法性，同时可以判断掉空表可能性</span><br><span class="hljs-keyword">if</span>(i &lt; <span class="hljs-number">1</span> || i &gt; list.length)<br><span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br><span class="hljs-comment">// 2.记录删除元素</span><br>e = list.data[i - <span class="hljs-number">1</span>];<br><span class="hljs-comment">// 3.覆盖</span><br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j = i; j &lt; list.length; j++)&#123;<br>list.data[j - <span class="hljs-number">1</span>] = list.data[j];<br>&#125;<br><span class="hljs-comment">// 4.删除成功</span><br>list.length--;<br><br><span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="按位查找"><a href="#按位查找" class="headerlink" title="按位查找"></a>按位查找</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">// 按位查找</span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">GetElem</span><span class="hljs-params">(SqList list, <span class="hljs-type">int</span> i)</span></span>&#123;<br><span class="hljs-keyword">return</span> list.data[i - <span class="hljs-number">1</span>];<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="按值查找"><a href="#按值查找" class="headerlink" title="按值查找"></a>按值查找</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">// 按值查找</span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">LocateElem</span><span class="hljs-params">(SqList list, <span class="hljs-type">int</span> e)</span></span>&#123;<br><span class="hljs-comment">// 1.遍历全表，找到该元素为止</span><br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; list.length; i++)&#123;<br><span class="hljs-keyword">if</span>(list.data[i] == e)<br><span class="hljs-keyword">return</span> i + <span class="hljs-number">1</span>;<span class="hljs-comment">// 返回的注意是位序哦！！！！</span><br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>; <span class="hljs-comment">// 查找失败！</span><br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 考研笔试自用算法大题模板 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 考研笔试自用算法大题模板 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>浅尝SeeSaw甜橙子手冲咖啡</title>
      <link href="/posts/8635f45e7775/"/>
      <url>/posts/8635f45e7775/</url>
      
        <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>毕业季，最近比较忙，总算回家了。手冲器具都在家里，在学校搞不了手冲咖啡。</p><p>所以一回来，我就马上就买了两款咖啡豆，看咖啡评测似乎不错，但是自己不试试是不知道的。</p><p>这篇是<code>SeeSaw甜橙子</code>的评测，这篇只写主观评价，作为以后我是否会回购的依据。</p><p><img src="https://bu.dusays.com/2023/06/27/649a8529c469f.webp" alt="Screenshot_20230627_134637_com.taobao.taobao_edit"></p><p><img src="https://bu.dusays.com/2023/06/27/649a855845dd9.webp" alt="IMG_20230626_182450"></p><h3 id="过程记录"><a href="#过程记录" class="headerlink" title="过程记录"></a>过程记录</h3><p><img src="https://bu.dusays.com/2023/06/27/649a8696b728d.webp" alt="IMG_20230627_135220"></p><p><img src="https://bu.dusays.com/2023/06/27/649a869c2ac12.webp" alt="IMG_20230627_135128"></p><p><img src="https://bu.dusays.com/2023/06/27/649a86a3a3585.webp" alt="IMG_20230627_135250"></p><p><img src="https://bu.dusays.com/2023/06/27/649a86e515e15.webp" alt="IMG_20230627_140635"></p><h3 id="主观评价"><a href="#主观评价" class="headerlink" title="主观评价"></a>主观评价</h3><p>香味十分浓郁，包装一打开我就猛一吸，我开心地笑了，因为很久没闻咖啡豆了（真该死，在学校带了豆子没带器具）。</p><p><code>SeeSaw甜橙子</code>它的酸味十分突出，有细微柑橘的苦味（至于包装说的乌龙茶我倒是没感觉到），在强烈的酸味刺激下，会有回甘。涩味不是很明显，全部喝完，还是能感觉到微微涩味，但还是在能够接受的范围内。</p><p><code>SeeSaw甜橙子</code>作为一款浅烘焙的咖啡豆，我个人觉得还是太有个性了，让我怀疑它真的不是极浅烘焙咖啡豆？这也太酸了吧，<code>甜橙子</code>的<code>甜</code>是极酸作用产生的甜味，这种<code>个性</code>是把双刃剑。</p><p><code>SeeSaw甜橙子</code>总体评价：极浅烘，过酸，性价比一般。</p>]]></content>
      
      
      <categories>
          
          <category> 生活 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 生活 </tag>
            
            <tag> 咖啡 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>[AcWing]34. 链表中环的入口结点</title>
      <link href="/posts/35d2359e9b06/"/>
      <url>/posts/35d2359e9b06/</url>
      
        <content type="html"><![CDATA[<h1 id="AcWing-34-链表中环的入口结点"><a href="#AcWing-34-链表中环的入口结点" class="headerlink" title="[AcWing]34. 链表中环的入口结点"></a><a href="https://www.acwing.com/problem/content/86/">[AcWing]34. 链表中环的入口结点</a></h1><p>给定一个链表，若其中包含环，则输出环的入口节点。</p><p>若其中不包含环，则输出<code>null</code>。</p><h4 id="数据范围"><a href="#数据范围" class="headerlink" title="数据范围"></a>数据范围</h4><p>节点 val 值取值范围 <code>[1,1000]</code>。<br>节点 val 值各不相同。<br>链表长度 <code>[0,500]</code>。</p><h4 id="样例"><a href="#样例" class="headerlink" title="样例"></a>样例</h4><p><a href="https://www.acwing.com/media/article/image/2018/12/02/19_69ba6d14f5-QQ%E6%88%AA%E5%9B%BE20181202023846.png">!QQ截图20181202023846.png</a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">给定如上所示的链表：<br>[1, 2, 3, 4, 5, 6]<br>2<br>注意，这里的2表示编号是2的节点，节点编号从0开始。所以编号是2的节点就是val等于3的节点。<br><br>则输出环的入口节点3.<br></code></pre></td></tr></table></figure><h3 id="算法思想"><a href="#算法思想" class="headerlink" title="算法思想"></a>算法思想</h3><p>y总讲这个题，听得我云里雾里，最终我放弃思考了，直接记住结论，开始写代码。</p><ol><li><code>慢指针一步一步走，快指针两步两步走</code></li><li><code>无环：快指针必定会先到达终点（NULL）</code></li><li><code>有环：俩指针会相遇，相遇之后，让慢指针回到起点，再让快慢指针同步速度，一步一步走</code></li><li><code>当再次相遇的时候，那个点就是环的入口</code></li></ol><h3 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Definition for singly-linked list.</span><br><span class="hljs-comment"> * struct ListNode &#123;</span><br><span class="hljs-comment"> *     int val;</span><br><span class="hljs-comment"> *     ListNode *next;</span><br><span class="hljs-comment"> *     ListNode(int x) : val(x), next(NULL) &#123;&#125;</span><br><span class="hljs-comment"> * &#125;;</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function">ListNode *<span class="hljs-title">entryNodeOfLoop</span><span class="hljs-params">(ListNode *head)</span> </span>&#123;<br>        ListNode * slow = head , * fast = head;<br>        <br>        <span class="hljs-keyword">while</span>(fast &amp;&amp; fast-&gt;next)&#123;<br>            fast = fast-&gt;next-&gt;next;<br>            slow = slow-&gt;next;<br>            <span class="hljs-comment">// 有环，相遇了</span><br>            <span class="hljs-keyword">if</span>(slow == fast) <span class="hljs-keyword">break</span>;<br>        &#125;<br>        <span class="hljs-comment">// 如果fast是空，那么代表无环，否则代表有环，并且slow == fast成立</span><br>        <span class="hljs-comment">// 而且，如果while循环条件一开始就没满足，那么代表head是空节点亦或者长度为1</span><br>        <span class="hljs-keyword">if</span>(!fast || !fast-&gt;next) <span class="hljs-keyword">return</span> <span class="hljs-literal">NULL</span>;<br>        <span class="hljs-comment">// slow == fast ， 有环</span><br>        <span class="hljs-comment">// 让slow回去，fast和slow以同样的速度走，再次相遇就是环的入口结点</span><br>        slow = head;<br>        <span class="hljs-keyword">while</span>(slow != fast)&#123;<br>            slow = slow -&gt; next;<br>            fast = fast -&gt; next;<br>        &#125;<br>        <span class="hljs-comment">// 再次相遇了</span><br>        <span class="hljs-keyword">return</span> slow;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> AcWing </tag>
            
            <tag> 链表 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>[AcWing]29. 删除链表中重复的节点</title>
      <link href="/posts/448d550da686/"/>
      <url>/posts/448d550da686/</url>
      
        <content type="html"><![CDATA[<h1 id="AcWing-29-删除链表中重复的节点"><a href="#AcWing-29-删除链表中重复的节点" class="headerlink" title="[AcWing]29. 删除链表中重复的节点"></a><a href="https://www.acwing.com/problem/content/27/">[AcWing]29. 删除链表中重复的节点</a></h1><p>在一个排序的链表中，存在重复的节点，请删除该链表中重复的节点，重复的节点不保留。</p><h4 id="数据范围"><a href="#数据范围" class="headerlink" title="数据范围"></a>数据范围</h4><p>链表中节点 val 值取值范围 <code>[0,100]</code>。<br>链表长度 <code>[0,100]</code>。</p><h4 id="样例1"><a href="#样例1" class="headerlink" title="样例1"></a>样例1</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">输入：1-&gt;2-&gt;3-&gt;3-&gt;4-&gt;4-&gt;5<br><br>输出：1-&gt;2-&gt;5<br></code></pre></td></tr></table></figure><h4 id="样例2"><a href="#样例2" class="headerlink" title="样例2"></a>样例2</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">输入：1-&gt;1-&gt;1-&gt;2-&gt;3<br><br>输出：2-&gt;3<br></code></pre></td></tr></table></figure><h3 id="算法思想"><a href="#算法思想" class="headerlink" title="算法思想"></a>算法思想</h3><p><img src="https://bu.dusays.com/2023/05/12/645e40746c07e.png" alt="image-20230512213440430"></p><p><img src="https://bu.dusays.com/2023/05/12/645e412839dba.png" alt="image-20230512213751300"></p><h3 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Definition for singly-linked list.</span><br><span class="hljs-comment"> * struct ListNode &#123;</span><br><span class="hljs-comment"> *     int val;</span><br><span class="hljs-comment"> *     ListNode *next;</span><br><span class="hljs-comment"> *     ListNode(int x) : val(x), next(NULL) &#123;&#125;</span><br><span class="hljs-comment"> * &#125;;</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function">ListNode* <span class="hljs-title">deleteDuplication</span><span class="hljs-params">(ListNode* head)</span> </span>&#123;<br>        ListNode * dummy = <span class="hljs-keyword">new</span> <span class="hljs-built_in">ListNode</span>(<span class="hljs-number">-1</span>);<br>        dummy -&gt; next = head;<br>        <br>        ListNode * p = dummy;<br>        <br>        <span class="hljs-comment">// 保证节点都不为空</span><br>        <span class="hljs-keyword">while</span>(p -&gt; next)&#123;<br>            <span class="hljs-comment">// 被检查的节点</span><br>            ListNode * q = p -&gt; next;<br>            <span class="hljs-comment">// 由于这是一个已被排序的链表，因此可以通过while循环筛掉一连串的节点</span><br>            <span class="hljs-comment">// 循环跳出的时候 q -&gt; next 就是新的需要被检查的元素，与 q 的值不同</span><br>            <span class="hljs-keyword">while</span>(q -&gt; next &amp;&amp; q -&gt; val == q -&gt; next -&gt; val) q = q -&gt; next;<br>            <span class="hljs-comment">// 如果没有重复的元素，while循环体不会执行，会出现下面这种情况</span><br>            <span class="hljs-comment">// 那么 q 元素是没有重复元素的，就让 p 前进</span><br>            <span class="hljs-comment">// 否则，被筛选了，p 直接跳跃至 q -&gt; next 这个新的需要被筛选元素</span><br>            <span class="hljs-keyword">if</span>(p -&gt; next == q) p = p -&gt; next;<br>            <span class="hljs-keyword">else</span> p -&gt; next = q -&gt; next;<br>        &#125;<br>        <br>        <span class="hljs-keyword">return</span> dummy -&gt; next;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> AcWing </tag>
            
            <tag> 链表 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>[AcWing]28. 在O(1)时间删除链表结点</title>
      <link href="/posts/766b1c104395/"/>
      <url>/posts/766b1c104395/</url>
      
        <content type="html"><![CDATA[<h1 id="AcWing-28-在O-1-时间删除链表结点"><a href="#AcWing-28-在O-1-时间删除链表结点" class="headerlink" title="[AcWing]28. 在O(1)时间删除链表结点"></a><a href="https://www.acwing.com/problem/content/85/">[AcWing]28. 在O(1)时间删除链表结点</a></h1><p>给定单向链表的一个节点指针，定义一个函数在O(1)时间删除该结点。</p><p>假设链表一定存在，并且该节点一定不是尾节点。</p><h4 id="数据范围"><a href="#数据范围" class="headerlink" title="数据范围"></a>数据范围</h4><p>链表长度 <code>[1,500]</code>。</p><h4 id="样例"><a href="#样例" class="headerlink" title="样例"></a>样例</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">输入：链表 1-&gt;4-&gt;6-&gt;8<br>      删掉节点：第2个节点即6（头节点为第0个节点）<br><br>输出：新链表 1-&gt;4-&gt;8<br></code></pre></td></tr></table></figure><h3 id="算法思想"><a href="#算法思想" class="headerlink" title="算法思想"></a>算法思想</h3><p><img src="https://bu.dusays.com/2023/05/11/645cf4ee045e4.png" alt="image-20230511213718985"></p><p><img src="https://bu.dusays.com/2023/05/11/645cf4f1ea571.png" alt="image-20230511214024756"></p><p><img src="https://bu.dusays.com/2023/05/11/645cf4e63b40d.png" alt="image-20230511214110079"></p><h3 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Definition for singly-linked list.</span><br><span class="hljs-comment"> * struct ListNode &#123;</span><br><span class="hljs-comment"> *     int val;</span><br><span class="hljs-comment"> *     ListNode *next;</span><br><span class="hljs-comment"> *     ListNode(int x) : val(x), next(NULL) &#123;&#125;</span><br><span class="hljs-comment"> * &#125;;</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">deleteNode</span><span class="hljs-params">(ListNode* node)</span> </span>&#123;<br>        ListNode * q = node -&gt; next;<br>        ListNode * p = q -&gt; next;<br>        <br>        node -&gt; val = q -&gt; val;<br>        node -&gt; next = p;<br>        <span class="hljs-keyword">delete</span> q;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> AcWing </tag>
            
            <tag> 链表 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>[AcWing]17. 从尾到头打印链表</title>
      <link href="/posts/7cd2155b1ef6/"/>
      <url>/posts/7cd2155b1ef6/</url>
      
        <content type="html"><![CDATA[<div class="note success simple"><p>你凭什么让别人相信你？</p></div><h1 id="AcWing-17-从尾到头打印链表"><a href="#AcWing-17-从尾到头打印链表" class="headerlink" title="[AcWing]17. 从尾到头打印链表"></a><a href="https://www.acwing.com/problem/content/18/">[AcWing]17. 从尾到头打印链表</a></h1><p>输入一个链表的头结点，按照 <strong>从尾到头</strong> 的顺序返回节点的值。</p><p>返回的结果用数组存储。</p><h4 id="数据范围"><a href="#数据范围" class="headerlink" title="数据范围"></a>数据范围</h4><p><code>0 ≤</code> 链表长度 <code>≤ 1000</code>。</p><h4 id="样例"><a href="#样例" class="headerlink" title="样例"></a>样例</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">输入：[2, 3, 5]<br>返回：[5, 3, 2]<br></code></pre></td></tr></table></figure><h3 id="算法思想"><a href="#算法思想" class="headerlink" title="算法思想"></a>算法思想</h3><p>最简单的方法就是，直接遍历链表，然后存入<code>vector</code>，再利用库函数将其反转输出。<br>所以此处只写一下，递归函数法。<br>还是利用递归栈，出栈的时候将节点值塞入<code>vector</code>，这样就是逆序的了。</p><h3 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Definition for singly-linked list.</span><br><span class="hljs-comment"> * struct ListNode &#123;</span><br><span class="hljs-comment"> *     int val;</span><br><span class="hljs-comment"> *     ListNode *next;</span><br><span class="hljs-comment"> *     ListNode(int x) : val(x), next(NULL) &#123;&#125;</span><br><span class="hljs-comment"> * &#125;;</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    vector&lt;<span class="hljs-type">int</span>&gt; res;<br>    <br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">dfs</span><span class="hljs-params">(ListNode * head)</span></span>&#123;<br>        <span class="hljs-comment">// 出口</span><br>        <span class="hljs-keyword">if</span>(!head) <span class="hljs-keyword">return</span>;<br>        <span class="hljs-comment">// 找到尾</span><br>        <span class="hljs-built_in">dfs</span>(head -&gt; next);<br>        <span class="hljs-comment">// 从尾到头放入res</span><br>        res.<span class="hljs-built_in">push_back</span>(head -&gt; val);<br>    &#125;<br><br>    <span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">printListReversingly</span><span class="hljs-params">(ListNode* head)</span> </span>&#123;<br>        <span class="hljs-built_in">dfs</span>(head);<br>        <span class="hljs-keyword">return</span> res;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> AcWing </tag>
            
            <tag> 链表 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>判断子序列</title>
      <link href="/posts/8dc10c9dd9e8/"/>
      <url>/posts/8dc10c9dd9e8/</url>
      
        <content type="html"><![CDATA[<h1 id="2816-判断子序列"><a href="#2816-判断子序列" class="headerlink" title="2816. 判断子序列"></a><a href="https://www.acwing.com/problem/content/2818/">2816. 判断子序列</a></h1><p>给定一个长度为 <code>n</code> 的整数序列 <code>a1,a2,…,an</code> 以及一个长度为 <code>m</code> 的整数序列 <code>b1,b2,…,bm</code>。</p><p>请你判断 <code>a</code> 序列是否为 <code>b</code> 序列的子序列。</p><p>子序列指序列的一部分项按<strong>原有次序排列</strong>而得的序列，例如序列 <code>&#123;a1,a3,a5&#125;</code> 是序列 <code>&#123;a1,a2,a3,a4,a5&#125;</code> 的一个子序列。</p><h4 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式"></a>输入格式</h4><p>第一行包含两个整数 <code>n,m</code>。</p><p>第二行包含 <code>n</code> 个整数，表示 <code>a1,a2,…,an</code>。</p><p>第三行包含 <code>m</code> 个整数，表示 <code>b1,b2,…,bm</code>。</p><h4 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式"></a>输出格式</h4><p>如果 <code>a</code> 序列是 <code>b</code> 序列的子序列，输出一行 <code>Yes</code>。</p><p>否则，输出 <code>No</code>。</p><h4 id="数据范围"><a href="#数据范围" class="headerlink" title="数据范围"></a>数据范围</h4><p><code>1 ≤ n ≤ m ≤ 10^5</code>,<br><code>-10^9 ≤ ai,bi ≤ 10^9</code></p><h4 id="输入样例："><a href="#输入样例：" class="headerlink" title="输入样例："></a>输入样例：</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">3 5<br>1 3 5<br>1 2 3 4 5<br></code></pre></td></tr></table></figure><h4 id="输出样例："><a href="#输出样例：" class="headerlink" title="输出样例："></a>输出样例：</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">Yes<br></code></pre></td></tr></table></figure><h3 id="算法思想"><a href="#算法思想" class="headerlink" title="算法思想"></a>算法思想</h3><p><code>a</code>序列和<code>b</code>序列同时进行遍历，直到某一个序列遍历完毕。</p><p>在这个过程中，如果<code>a</code>序列游标<code>i</code>和它长度相等，说明全部匹配，<code>a</code>序列是<code>b</code>的子序列</p><h3 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;algorithm&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">100010</span>;<br><span class="hljs-type">int</span> a[N], b[N], s[N];<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    <br>    <span class="hljs-type">int</span> n, m;<br>    cin &gt;&gt; n &gt;&gt; m;<br>    <br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++) cin &gt;&gt; a[i];<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; m; i++) cin &gt;&gt; b[i];<br>    <br>    <span class="hljs-type">int</span> i = <span class="hljs-number">0</span>, j = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">while</span>(i &lt; n &amp;&amp; j &lt; m)&#123;<br>        <span class="hljs-keyword">if</span>(a[i] == b[j]) i++;<br>        <span class="hljs-comment">// 不敢怎样，j都要往后走，保证</span><br>        j++;<br>    &#125;<br>    <br>    <span class="hljs-keyword">if</span>(i == n) <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;Yes&quot;</span>);<br>    <span class="hljs-keyword">else</span> <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;No&quot;</span>);<br>    <br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法模板 </tag>
            
            <tag> 双指针 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数组元素的目标和</title>
      <link href="/posts/d268782dc5be/"/>
      <url>/posts/d268782dc5be/</url>
      
        <content type="html"><![CDATA[<h1 id="800-数组元素的目标和"><a href="#800-数组元素的目标和" class="headerlink" title="800. 数组元素的目标和"></a><a href="https://www.acwing.com/problem/content/802/">800. 数组元素的目标和</a></h1><p>给定两个升序排序的有序数组 <code>A</code> 和 <code>B</code>，以及一个目标值 <code>x</code>。</p><p>数组下标从 <code>0</code> 开始。</p><p>请你求出满足 <code>A[i] + B[j] = x</code> 的数对 <code>(i, j)</code>。</p><p>数据保证有唯一解。</p><h4 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式"></a>输入格式</h4><p>第一行包含三个整数 <code>n,m,x</code>，分别表示 <code>A</code> 的长度，<code>B</code> 的长度以及目标值 <code>x</code>。</p><p>第二行包含 <code>n</code> 个整数，表示数组 <code>A</code>。</p><p>第三行包含 <code>m</code> 个整数，表示数组 <code>B</code>。</p><h4 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式"></a>输出格式</h4><p>共一行，包含两个整数 <code>i</code> 和 <code>j</code>。</p><h4 id="数据范围"><a href="#数据范围" class="headerlink" title="数据范围"></a>数据范围</h4><p>数组长度不超过 <code>10^5</code>。<br>同一数组内元素各不相同。<br><code>1 ≤ 数组元素 ≤ 10^9</code></p><h4 id="输入样例："><a href="#输入样例：" class="headerlink" title="输入样例："></a>输入样例：</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">4 5 6<br>1 2 4 7<br>3 4 6 8 9<br></code></pre></td></tr></table></figure><h4 id="输出样例："><a href="#输出样例：" class="headerlink" title="输出样例："></a>输出样例：</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">1 1<br></code></pre></td></tr></table></figure><h3 id="算法思路"><a href="#算法思路" class="headerlink" title="算法思路"></a>算法思路</h3><p>双指针算法，首先应该先想出暴力解法，然后根据单调性求解。（本文暴力不分析）</p><p>由于题中给出，两个升序序列<code>A</code>和<code>B</code>，且存在唯一解。我们可以得到如下性质：</p><p><img src="https://bu.dusays.com/2023/05/05/6454ed463355d.png" alt="image-20230505194642740"></p><h3 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;algorithm&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">100010</span>;<br><br><span class="hljs-type">int</span> A[N], B[N];<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    <br>    <span class="hljs-type">int</span> n, m, x;<br>    cin &gt;&gt; n &gt;&gt; m &gt;&gt; x;<br>    <br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++) cin &gt;&gt; A[i];<br>    <br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; m; i++) cin &gt;&gt; B[i];<br>    <br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>, j = m - <span class="hljs-number">1</span>; i &lt; n; i++)&#123;<br>        <span class="hljs-keyword">while</span>(j &gt;= <span class="hljs-number">0</span> &amp;&amp; A[i] + B[j] &gt; x) j--;<br>        <span class="hljs-keyword">if</span>(A[i] + B[j] == x) cout &lt;&lt; i &lt;&lt; <span class="hljs-string">&quot; &quot;</span> &lt;&lt; j;<br>    &#125;<br>    <br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法模板 </tag>
            
            <tag> 双指针 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>最长连续不重复子序列</title>
      <link href="/posts/471596286a1c/"/>
      <url>/posts/471596286a1c/</url>
      
        <content type="html"><![CDATA[<h3 id="双指针算法核心思想"><a href="#双指针算法核心思想" class="headerlink" title="双指针算法核心思想"></a>双指针算法核心思想</h3><p>原本两个指针是有 n<sup>2</sup> 种组合，因此时间复杂度是 O(n<sup>2</sup>) 。<br>而双指针算法就是运用单调性使得指针只能单向移动，因此总的时间复杂度只有 O(2n) ，也就是O(n)。</p><p>之所以双指针可以实现 O(n) 的时间复杂度是因为指针只能单向移动，没有指针的回溯，而且每一步都会有指针移动。</p><p>而朴素的 O(n<sup>2</sup>) 算法的问题就在于指针经常<strong>回溯到之前的位置</strong>。</p><p>双指针算法的模板一般都可以写成下面的形式(模板)：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>, j = <span class="hljs-number">0</span>; i &lt; n; i++)<br>&#123;<br>    <span class="hljs-comment">// check是满足某种性质</span><br>    <span class="hljs-keyword">while</span> (j &lt; i &amp;&amp; <span class="hljs-built_in">check</span>(i, j)) j++;<br><br>    <span class="hljs-comment">// 每道题目的具体逻辑</span><br>&#125;<br></code></pre></td></tr></table></figure><h1 id="799-最长连续不重复子序列"><a href="#799-最长连续不重复子序列" class="headerlink" title="799. 最长连续不重复子序列"></a><a href="https://www.acwing.com/problem/content/801/">799. 最长连续不重复子序列</a></h1><p>给定一个长度为 <code>n</code> 的整数序列，请找出最长的不包含重复的数的连续区间，输出它的长度。</p><h4 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式"></a>输入格式</h4><p>第一行包含整数 <code>n</code>。</p><p>第二行包含 <code>n</code> 个整数（均在 <code>0 ~ 10^5</code> 范围内），表示整数序列。</p><h4 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式"></a>输出格式</h4><p>共一行，包含一个整数，表示最长的不包含重复的数的连续区间的长度。</p><h4 id="数据范围"><a href="#数据范围" class="headerlink" title="数据范围"></a>数据范围</h4><p><code>1 ≤ n ≤ 10^5</code></p><h4 id="输入样例："><a href="#输入样例：" class="headerlink" title="输入样例："></a>输入样例：</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">5<br>1 2 2 3 5<br></code></pre></td></tr></table></figure><h4 id="输出样例："><a href="#输出样例：" class="headerlink" title="输出样例："></a>输出样例：</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">3<br></code></pre></td></tr></table></figure><h3 id="暴力求解"><a href="#暴力求解" class="headerlink" title="暴力求解"></a>暴力求解</h3><ol><li>无脑暴力求解（不作解释）</li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;algorithm&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">100010</span>;<br><span class="hljs-type">int</span> q[N];<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">check</span><span class="hljs-params">(<span class="hljs-type">int</span> l , <span class="hljs-type">int</span> r )</span></span>&#123;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = l ; i &lt;= r ; i++)&#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j = l ; j &lt; i ; j++)&#123;<br>            <span class="hljs-keyword">if</span>(q[i] == q[j]) <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><br>    <span class="hljs-type">int</span> n;<br>    cin &gt;&gt; n;<br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i ++ ) cin &gt;&gt; q[i];<br><br>    <span class="hljs-type">int</span> res = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i ++ )&#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j = <span class="hljs-number">0</span> ; j &lt; i ; j++)&#123;<br>            <span class="hljs-comment">// 判断区间 [j,i] 是否有重复元素,没有重复元素就返回结果 check代表成功</span><br>            <span class="hljs-keyword">if</span>(<span class="hljs-built_in">check</span>(j,i) == <span class="hljs-number">1</span>) res = <span class="hljs-built_in">max</span>(res, i - j + <span class="hljs-number">1</span>);<br>        &#125;<br>    &#125;<br><br>    cout &lt;&lt; res &lt;&lt; endl;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>这种会TLE。</p><h3 id="双指针算法思想"><a href="#双指针算法思想" class="headerlink" title="双指针算法思想"></a>双指针算法思想</h3><p>可以考虑，使用<code>i</code>作为终点，<code>j</code>作为起点，让<code>j</code>去追赶<code>i</code>。</p><p><code>j</code>与<code>i</code>在这个过程，如果是不同序列，那么就让<code>i</code>一直走。</p><p>如果遇到了重复序列，就让<code>j</code>去追赶<code>i</code>，直到这个重复序列结束，然后计算<code>i - j + 1</code>就是<code>最长连续，但不重复的子序列长度</code>。</p><p><strong>代码实现提示：对每个整数进行桶计数。</strong></p><h3 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;algorithm&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">100010</span>;<br><br><span class="hljs-type">int</span> a[N], s[N];<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    <br>    <span class="hljs-type">int</span> n;<br>    cin &gt;&gt; n;<br>    <br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++) cin &gt;&gt; a[i];<br>    <span class="hljs-comment">// i和j下标最远距离</span><br>    <span class="hljs-type">int</span> res = <span class="hljs-number">0</span>;<br>    <br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span> , j = <span class="hljs-number">0</span>; i &lt; n; i++)&#123;<br>        <span class="hljs-comment">// 对 a[i] 进行桶计数</span><br>        s[a[i]]++;<br><br>        <span class="hljs-comment">// 跳过重复序列，s[a[i]]≥2的时候才可能触发，也就是进入了重复序列片段</span><br>        <span class="hljs-keyword">while</span>(s[a[i]] &gt; <span class="hljs-number">1</span>)&#123;<br>            <span class="hljs-comment">// a[j]如果等于a[i]自然也就是剔除重复序列</span><br>            s[a[j]]--;<br>            j++;<br>        &#125;<br>        <br>        <span class="hljs-comment">// 只保留 i 和 j 相隔最远的距离。</span><br>        <span class="hljs-comment">// 即，最长连续，但不重复的子序列长度。</span><br>        res = <span class="hljs-built_in">max</span>(res, i - j + <span class="hljs-number">1</span>);<br>    &#125;<br>    <br>    cout &lt;&lt; res &lt;&lt; endl;<br>    <br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法模板 </tag>
            
            <tag> 双指针 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>[差分]差分矩阵</title>
      <link href="/posts/255d64b2bba3/"/>
      <url>/posts/255d64b2bba3/</url>
      
        <content type="html"><![CDATA[<h3 id="二维差分"><a href="#二维差分" class="headerlink" title="二维差分"></a>二维差分</h3><p>如果扩展到二维，我们需要让二维数组被选中的子矩阵中的每个元素的值加上<code>c</code>,是否也可以达到<code>O(1)</code>的时间复杂度。答案是可以的，考虑二维差分。<br><code>a[][]</code>数组是<code>b[][]</code>数组的前缀和数组，那么<code>b[][]</code>是<code>a[][]</code>的差分数组</p><p>原数组： <code>a[i][j]</code></p><p>我们去构造差分数组： <code>b[i][j]</code></p><p>使得<code>a</code>数组中<code>a[i][j]</code>是<code>b</code>数组左上角<code>(1,1)</code>到右下角<code>(i,j)</code>所包围矩形元素的和。</p><p><img src="https://bu.dusays.com/2023/05/03/64527be20518e.png" alt="image-20230503232104902"></p><h1 id="798-差分矩阵"><a href="#798-差分矩阵" class="headerlink" title="798. 差分矩阵"></a><a href="https://www.acwing.com/problem/content/description/800/">798. 差分矩阵</a></h1><p>输入一个 <code>n</code> 行 <code>m</code> 列的整数矩阵，再输入 <code>q</code> 个操作，每个操作包含五个整数 <code>x1, y1, x2, y2, c</code>，其中 <code>(x1, y1)</code> 和 <code>(x2, y2)</code> 表示一个子矩阵的左上角坐标和右下角坐标。</p><p>每个操作都要将选中的子矩阵中的每个元素的值加上 <code>c</code>。</p><p>请你将进行完所有操作后的矩阵输出。</p><h4 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式"></a>输入格式</h4><p>第一行包含整数 <code>n,m,q</code>。</p><p>接下来 <code>n</code> 行，每行包含 <code>m</code> 个整数，表示整数矩阵。</p><p>接下来 <code>q</code> 行，每行包含 <code>5</code> 个整数 <code>x1, y1, x2, y2, c</code>，表示一个操作。</p><h4 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式"></a>输出格式</h4><p>共 <code>n</code> 行，每行 <code>m</code> 个整数，表示所有操作进行完毕后的最终矩阵。</p><h4 id="数据范围"><a href="#数据范围" class="headerlink" title="数据范围"></a>数据范围</h4><p><code>1 ≤ n,m ≤ 1000</code>,<br><code>1 ≤ q ≤ 100000</code>,<br><code>1 ≤ x1 ≤ x2 ≤ n</code>,<br><code>1 ≤ y1 ≤ y2 ≤ m</code>,<br><code>-1000 ≤ c ≤ 1000</code>,<br><code>-1000 ≤ 矩阵内元素的值 ≤ 1000</code></p><h4 id="输入样例："><a href="#输入样例：" class="headerlink" title="输入样例："></a>输入样例：</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">3 4 3<br>1 2 2 1<br>3 2 2 1<br>1 1 1 1<br>1 1 2 2 1<br>1 3 2 3 2<br>3 1 3 4 1<br></code></pre></td></tr></table></figure><h4 id="输出样例："><a href="#输出样例：" class="headerlink" title="输出样例："></a>输出样例：</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">2 3 4 1<br>4 3 4 1<br>2 2 2 2<br></code></pre></td></tr></table></figure><h3 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;algorithm&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">1010</span>;<br><br><span class="hljs-type">int</span> a[N][N], b[N][N];<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    <br>    <span class="hljs-type">int</span> n, m, q;<br>    cin &gt;&gt; n &gt;&gt; m &gt;&gt; q;<br>    <br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++)<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j = <span class="hljs-number">1</span>; j &lt;= m; j++)<br>            cin &gt;&gt; a[i][j];<br>            <br>    <span class="hljs-comment">// 求差分数组，类比一维数组求差分</span><br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++)<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j = <span class="hljs-number">1</span>; j &lt;= m; j++)<br>            b[i][j] = a[i][j] - a[i - <span class="hljs-number">1</span>][j] - a[i][j - <span class="hljs-number">1</span>] + a[i - <span class="hljs-number">1</span>][j - <span class="hljs-number">1</span>];<br>            <br>    <span class="hljs-keyword">while</span>(q --)&#123;<br>        <span class="hljs-type">int</span> x1, y1, x2, y2, c;<br>        cin &gt;&gt; x1 &gt;&gt; y1 &gt;&gt; x2 &gt;&gt; y2 &gt;&gt; c;<br>        b[x1][y1] += c;<br>        b[x2 + <span class="hljs-number">1</span>][y1] -= c;<br>        b[x1][y2 + <span class="hljs-number">1</span>] -= c;<br>        b[x2 + <span class="hljs-number">1</span>][y2 + <span class="hljs-number">1</span>] += c;<br>    &#125;<br>    <br>    <span class="hljs-comment">// 求差分数组的前缀和，并且输出</span><br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++)&#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j = <span class="hljs-number">1</span>; j &lt;= m; j++)&#123;<br>            b[i][j] += b[i - <span class="hljs-number">1</span>][j] + b[i][j - <span class="hljs-number">1</span>] - b[i - <span class="hljs-number">1</span>][j - <span class="hljs-number">1</span>], cout &lt;&lt; b[i][j] &lt;&lt; <span class="hljs-string">&quot; &quot;</span>;<br>        &#125;<br>        cout &lt;&lt; endl;<br>    &#125;<br><br>    <br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="感谢"><a href="#感谢" class="headerlink" title="感谢"></a>感谢</h3><p><a href="https://www.acwing.com/solution/content/27325/">林小鹿</a></p>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法模板 </tag>
            
            <tag> 差分 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>差分</title>
      <link href="/posts/254738f560c0/"/>
      <url>/posts/254738f560c0/</url>
      
        <content type="html"><![CDATA[<div class="note success simple"><p>你必须坚持，因为你已经做出了选择了，不是吗？</p></div><h3 id="差分应用场景"><a href="#差分应用场景" class="headerlink" title="差分应用场景"></a>差分应用场景</h3><p>对区间内频繁地对数组中某个区间进行同一操作。例如将序列中[l, r]之间的每个数加上c这一操作，可能执行n次，每次的c不同，如果对原数组进行操作，每次操作都会花费O(n)的时间复杂度。如果使用该数组的差分数组进行操作，每次操作为O(1)。<br>然后求差分数组的前缀和即为所求结果。</p><h3 id="差分数组"><a href="#差分数组" class="headerlink" title="差分数组"></a>差分数组</h3><p>首先给定一个原数组<code>a[]</code>：a[1], a[2], a[3], … , a[n];</p><p>然后我们构造一个数组<code>b[]</code>： b[1] ,b[2] , b[3], … , b[i];</p><p>使得 <code>a[i] = b[1] + b[2 ]+ b[3] +,..., + b[i]</code></p><p>也就是说，<code>a</code>数组是<code>b</code>数组的前缀和数组，反过来我们把<code>b</code>数组叫做<code>a</code>数组的差分数组。换句话说，每一个<code>a[i]</code>都是<code>b</code>数组中从头开始的一段区间和。</p><p>考虑如何构造差分<code>b</code>数组？</p><p>最为直接的方法</p><p><code>a[0]= 0;</code></p><p><code>b[1] = a[1] - a[0];</code></p><p><code>b[2] = a[2] - a[1];</code></p><p><code>b[3] =a [3] - a[2];</code></p><p><code>........</code></p><p><code>b[n] = a[n] - a[n-1];</code></p><h3 id="差分数组的使用？"><a href="#差分数组的使用？" class="headerlink" title="差分数组的使用？"></a>差分数组的使用？</h3><p>给定区间<code>[l ,r ]</code>，让我们把<code>a</code>数组中的<code>[ l, r]</code>区间中的每一个数都加上<code>c</code>。</p><p>由于<code>a</code>数组是<code>b</code>数组的<code>前缀和</code>，所以有这样的一个性质：</p><p><img src="https://bu.dusays.com/2023/05/03/6452681e9318d.png" alt="image-20230503215308523"></p><p>抽象的来说：</p><p><img src="https://bu.dusays.com/2023/05/03/645268225b877.png" alt="image-20230503215648039"></p><h1 id="797-差分"><a href="#797-差分" class="headerlink" title="797. 差分"></a><a href="https://www.acwing.com/problem/content/799/">797. 差分</a></h1><p>输入一个长度为 <code>n</code> 的整数序列。</p><p>接下来输入 <code>m</code> 个操作，每个操作包含三个整数 <code>l, r, c</code>，表示将序列中 <code>[l, r]</code> 之间的每个数加上 <code>c</code>。</p><p>请你输出进行完所有操作后的序列。</p><h4 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式"></a>输入格式</h4><p>第一行包含两个整数 <code>n</code> 和 <code>m</code>。</p><p>第二行包含 <code>n</code> 个整数，表示整数序列。</p><p>接下来 <code>m</code> 行，每行包含三个整数 <code>l，r，c</code>，表示一个操作。</p><h4 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式"></a>输出格式</h4><p>共一行，包含 <code>n</code> 个整数，表示最终序列。</p><h4 id="数据范围"><a href="#数据范围" class="headerlink" title="数据范围"></a>数据范围</h4><p><code>1 ≤ n,m ≤ 100000</code>,<br><code>1 ≤ l ≤ r ≤ n</code>,<br><code>-1000 ≤ c ≤ 1000</code>,<br><code>-1000 ≤ 整数序列中元素的值 ≤ 1000</code></p><h4 id="输入样例："><a href="#输入样例：" class="headerlink" title="输入样例："></a>输入样例：</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">6 3<br>1 2 2 1 2 1<br>1 3 1<br>3 5 1<br>1 6 1<br></code></pre></td></tr></table></figure><h4 id="输出样例："><a href="#输出样例：" class="headerlink" title="输出样例："></a>输出样例：</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">3 4 5 3 4 2<br></code></pre></td></tr></table></figure><h3 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;algorithm&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">100010</span>;<br><br><span class="hljs-type">int</span> a[N], b[N];<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    <br>    <span class="hljs-type">int</span> n, m;<br>    cin &gt;&gt; n &gt;&gt; m;<br>    <br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++) cin &gt;&gt; a[i];<br>    <br>    <span class="hljs-comment">// 求差分数组</span><br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++) b[i] = a[i] - a[i - <span class="hljs-number">1</span>];<br>    <br>    <span class="hljs-keyword">while</span>(m --)&#123;<br>        <span class="hljs-type">int</span> l, r, c;<br>        cin &gt;&gt; l &gt;&gt; r &gt;&gt; c;<br>        <span class="hljs-comment">// 在[l, r]区间的元素都 + c</span><br>        b[l] += c;<br>        b[r + <span class="hljs-number">1</span>] -= c;<br>    &#125;<br>    <br>    <span class="hljs-comment">// 求一遍前缀和输出</span><br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++) b[i] += b[i - <span class="hljs-number">1</span>], cout &lt;&lt; b[i] &lt;&lt; <span class="hljs-string">&quot; &quot;</span>;<br>    <br>    cout &lt;&lt; endl;<br>    <br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="感谢"><a href="#感谢" class="headerlink" title="感谢"></a>感谢</h3><p><a href="https://www.acwing.com/solution/content/26588/">林小鹿</a></p>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法模板 </tag>
            
            <tag> 差分 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>[前缀和]子矩阵的和</title>
      <link href="/posts/0607b1e0bdb9/"/>
      <url>/posts/0607b1e0bdb9/</url>
      
        <content type="html"><![CDATA[<h1 id="796-子矩阵的和"><a href="#796-子矩阵的和" class="headerlink" title="796. 子矩阵的和"></a><a href="https://www.acwing.com/problem/content/798/">796. 子矩阵的和</a></h1><p>输入一个 <code>n</code> 行 <code>m</code> 列的整数矩阵，再输入 <code>q</code> 个询问，每个询问包含四个整数 <code>x1, y1, x2, y2</code>，表示一个子矩阵的左上角坐标和右下角坐标。</p><p>对于每个询问输出子矩阵中所有数的和。</p><h4 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式"></a>输入格式</h4><p>第一行包含三个整数 <code>n，m，q</code>。</p><p>接下来 <code>n</code> 行，每行包含 <code>m</code> 个整数，表示整数矩阵。</p><p>接下来 <code>q</code> 行，每行包含四个整数 <code>x1, y1, x2, y2</code>，表示一组询问。</p><h4 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式"></a>输出格式</h4><p>共 <code>q</code> 行，每行输出一个询问的结果。</p><h4 id="数据范围"><a href="#数据范围" class="headerlink" title="数据范围"></a>数据范围</h4><p><code>1 ≤ n,m ≤ 1000</code>,<br><code>1 ≤ q ≤ 200000</code>,<br><code>1 ≤ x1 ≤ x2 ≤ n</code>,<br><code>1 ≤ y1 ≤ y2 ≤ m</code>,<br><code>-1000 ≤ 矩阵内元素的值 ≤ 1000</code></p><h4 id="输入样例："><a href="#输入样例：" class="headerlink" title="输入样例："></a>输入样例：</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">3 4 3<br>1 7 2 4<br>3 6 2 8<br>2 1 2 3<br>1 1 2 2<br>2 1 3 4<br>1 3 3 4<br></code></pre></td></tr></table></figure><h4 id="输出样例："><a href="#输出样例：" class="headerlink" title="输出样例："></a>输出样例：</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">17<br>27<br>21<br></code></pre></td></tr></table></figure><h3 id="算法思想"><a href="#算法思想" class="headerlink" title="算法思想"></a>算法思想</h3><p><img src="https://bu.dusays.com/2023/05/03/64526352163b6.png" alt="image-20230503211519377"></p><p><img src="https://bu.dusays.com/2023/05/03/645263574b964.png" alt="image-20230503213325665"></p><h3 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;algorithm&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">1010</span>;<br><span class="hljs-type">int</span> n , m , q , s[N][N];<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <br>    cin &gt;&gt; n &gt;&gt; m &gt;&gt; q;<br>    <br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">1</span> ; i &lt;= n ; i++)<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j = <span class="hljs-number">1</span> ; j &lt;= m ; j++)<br>            cin &gt;&gt; s[i][j];<br>    <span class="hljs-comment">// 计算前缀和</span><br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">1</span> ; i &lt;= n ; i++)<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j = <span class="hljs-number">1</span> ; j &lt;= m ; j++)<br>            s[i][j] += s[i - <span class="hljs-number">1</span>][j] + s[i][j - <span class="hljs-number">1</span>] - s[i - <span class="hljs-number">1</span>][j - <span class="hljs-number">1</span>];<br>            <br>    <span class="hljs-keyword">while</span>(q --)&#123;<br>        <span class="hljs-type">int</span> x1, y1 , x2 , y2;<br>        cin &gt;&gt; x1 &gt;&gt; y1 &gt;&gt; x2 &gt;&gt; y2;<br>        <span class="hljs-comment">// 输出区间和</span><br>        cout &lt;&lt; s[x2][y2] - s[x2][y1 - <span class="hljs-number">1</span>] - s[x1 - <span class="hljs-number">1</span>][y2] + s[x1 - <span class="hljs-number">1</span>][y1 - <span class="hljs-number">1</span>] &lt;&lt; endl;<br>    &#125;<br>    <br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前缀和 </tag>
            
            <tag> 算法模板 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>前缀和</title>
      <link href="/posts/4c155c76f2b7/"/>
      <url>/posts/4c155c76f2b7/</url>
      
        <content type="html"><![CDATA[<div class="note success simple"><p>我知道你很累了，但是再坚持一下好吗？</p></div><h3 id="前缀和有什么用？"><a href="#前缀和有什么用？" class="headerlink" title="前缀和有什么用？"></a>前缀和有什么用？</h3><p>前缀和是一种预处理，用于降低查询时的时间复杂度。 举个例子：给定 n 个整数，然后进行 m 次询问，每次询问求一个区间内值的和。</p><p>如果用暴力写法，那每次询问都需要从区间左端点循环到区间右端点求和，时间复杂度较大。</p><p>但是如果使用前缀和就可以将它降到<code>O(n + m)</code>。</p><h3 id="算法思想"><a href="#算法思想" class="headerlink" title="算法思想"></a>算法思想</h3><p><img src="https://bu.dusays.com/2023/05/03/645257b375e96.png" alt="image-20230503115839749"></p><h1 id="795-前缀和"><a href="#795-前缀和" class="headerlink" title="795. 前缀和"></a><a href="https://www.acwing.com/problem/content/797/">795. 前缀和</a></h1><p>输入一个长度为 <code>n</code> 的整数序列。</p><p>接下来再输入 <code>m</code> 个询问，每个询问输入一对 <code>l, r</code>。</p><p>对于每个询问，输出原序列中从第 <code>l</code> 个数到第 <code>r</code> 个数的和。</p><h4 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式"></a>输入格式</h4><p>第一行包含两个整数 <code>n</code> 和 <code>m</code>。</p><p>第二行包含 <code>n</code> 个整数，表示整数数列。</p><p>接下来 <code>m</code> 行，每行包含两个整数 <code>l</code> 和 <code>r</code>，表示一个询问的区间范围。</p><h4 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式"></a>输出格式</h4><p>共 <code>m</code> 行，每行输出一个询问的结果。</p><h4 id="数据范围"><a href="#数据范围" class="headerlink" title="数据范围"></a>数据范围</h4><p><code>1 ≤ l ≤ r ≤ n</code>,<br><code>1 ≤ n,m ≤ 100000</code>,<br><code>-1000 ≤ 数列中元素的值 ≤ 1000</code></p><h4 id="输入样例："><a href="#输入样例：" class="headerlink" title="输入样例："></a>输入样例：</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">5 3<br>2 1 3 6 4<br>1 2<br>1 3<br>2 4<br></code></pre></td></tr></table></figure><h4 id="输出样例："><a href="#输出样例：" class="headerlink" title="输出样例："></a>输出样例：</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">3<br>6<br>10<br></code></pre></td></tr></table></figure><h3 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;algorithm&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">100010</span>;<br><span class="hljs-type">int</span> a[N], s[N];<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    <br>    <span class="hljs-type">int</span> n, m;<br>    cin &gt;&gt; n &gt;&gt; m;<br>    <br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++) cin &gt;&gt; a[i];<br>    <br>    <span class="hljs-comment">// 计算前缀和</span><br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++) s[i] = s[i - <span class="hljs-number">1</span>] + a[i];<br>    <br>    <span class="hljs-keyword">while</span>(m --)&#123;<br>        <span class="hljs-type">int</span> l , r;<br>        cin &gt;&gt; l &gt;&gt; r;<br>        cout &lt;&lt; s[r] - s[l - <span class="hljs-number">1</span>] &lt;&lt; endl;<br>    &#125;<br>    <br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前缀和 </tag>
            
            <tag> 算法模板 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>高精度除法</title>
      <link href="/posts/ca4465c5974d/"/>
      <url>/posts/ca4465c5974d/</url>
      
        <content type="html"><![CDATA[<div class="note success simple"><p>再学完这个知识点，我再休息</p></div><h3 id="算法思想"><a href="#算法思想" class="headerlink" title="算法思想"></a>算法思想</h3><p><img src="https://bu.dusays.com/2023/05/01/644f6b6cb6fda.png" alt="image-20230428224911582"></p><h3 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;algorithm&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">div</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt; A, <span class="hljs-type">int</span> b, <span class="hljs-type">int</span> &amp; r)</span></span>&#123;<br>    <span class="hljs-comment">// 默认A大于b</span><br>    vector&lt;<span class="hljs-type">int</span>&gt; C;<br>    <br>    r = <span class="hljs-number">0</span>;<br>    <span class="hljs-comment">// 除法是从最高位开始 &lt;-</span><br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = A.<span class="hljs-built_in">size</span>() - <span class="hljs-number">1</span>; i &gt;= <span class="hljs-number">0</span>; i--)&#123;<br>        r = r * <span class="hljs-number">10</span> + A[i];<br>        C.<span class="hljs-built_in">push_back</span>(r / b);<br>        r %= b;<br>    &#125;<br>    <br>    <span class="hljs-comment">// 保存的时候是从高到低，需要反转一下</span><br>    <span class="hljs-built_in">reverse</span>(C.<span class="hljs-built_in">begin</span>(), C.<span class="hljs-built_in">end</span>());<br>    <br>    <span class="hljs-comment">// 去除前导0</span><br>    <span class="hljs-keyword">while</span>(C.<span class="hljs-built_in">size</span>() &gt; <span class="hljs-number">1</span> &amp;&amp; C.<span class="hljs-built_in">back</span>() == <span class="hljs-number">0</span>) C.<span class="hljs-built_in">pop_back</span>();<br>    <br>    <span class="hljs-keyword">return</span> C;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    <br>    string a;<br>    <span class="hljs-type">int</span> b;<br>    <br>    cin &gt;&gt; a &gt;&gt; b;<br>    <br>    vector&lt;<span class="hljs-type">int</span>&gt; A;<br>    <br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = a.<span class="hljs-built_in">size</span>() - <span class="hljs-number">1</span>; i &gt;= <span class="hljs-number">0</span>; i--) A.<span class="hljs-built_in">push_back</span>(a[i] - <span class="hljs-string">&#x27;0&#x27;</span>);<br>    <br>    <span class="hljs-type">int</span> r; <span class="hljs-comment">// 余数</span><br>    vector&lt;<span class="hljs-type">int</span>&gt; C = <span class="hljs-built_in">div</span>(A, b, r);<br>    <br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = C.<span class="hljs-built_in">size</span>() - <span class="hljs-number">1</span>; i &gt;= <span class="hljs-number">0</span>; i--) cout &lt;&lt; C[i];<br>    <br>    cout &lt;&lt; endl &lt;&lt; r;<br>    <br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法模板 </tag>
            
            <tag> 高精度算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>高精度乘法</title>
      <link href="/posts/d222ff48c8bc/"/>
      <url>/posts/d222ff48c8bc/</url>
      
        <content type="html"><![CDATA[<div class="note success simple"><p>学累了就出去走走吧</p></div><h3 id="算法思想"><a href="#算法思想" class="headerlink" title="算法思想"></a>算法思想</h3><p><img src="https://bu.dusays.com/2023/05/01/644f6b65b32ba.png" alt="image-20230428221023505"></p><h3 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;algorithm&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">mul</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt; A, <span class="hljs-type">int</span> b)</span></span>&#123;<br>    <span class="hljs-comment">// 默认A 大于 b</span><br>    vector&lt;<span class="hljs-type">int</span>&gt; C;<br>    <span class="hljs-type">int</span> t = <span class="hljs-number">0</span>;<br>    <br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; A.<span class="hljs-built_in">size</span>(); i++)&#123;<br>        t += A[i] * b;<br>        C.<span class="hljs-built_in">push_back</span>(t % <span class="hljs-number">10</span>);<br>        t /= <span class="hljs-number">10</span>;<br>    &#125;<br>    <span class="hljs-comment">// 如果t很大可能会留有剩余</span><br>    <span class="hljs-keyword">while</span>(t)&#123;<br>        C.<span class="hljs-built_in">push_back</span>(t % <span class="hljs-number">10</span>);<br>        t /= <span class="hljs-number">10</span>;<br>    &#125;<br>    <br>    <span class="hljs-comment">// 去除前导0</span><br>    <span class="hljs-keyword">while</span>(C.<span class="hljs-built_in">size</span>() &gt; <span class="hljs-number">1</span> &amp;&amp; C.<span class="hljs-built_in">back</span>() == <span class="hljs-number">0</span>) C.<span class="hljs-built_in">pop_back</span>();<br>    <br>    <span class="hljs-keyword">return</span> C;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    <br>    string a;<br>    <span class="hljs-type">int</span> b;<br>    <br>    cin &gt;&gt; a &gt;&gt; b;<br>    <br>    vector&lt;<span class="hljs-type">int</span>&gt; A;<br>    <br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = a.<span class="hljs-built_in">size</span>() - <span class="hljs-number">1</span>; i &gt;= <span class="hljs-number">0</span>; i--) A.<span class="hljs-built_in">push_back</span>(a[i] - <span class="hljs-string">&#x27;0&#x27;</span>);<br>    <br>    vector&lt;<span class="hljs-type">int</span>&gt; C = <span class="hljs-built_in">mul</span>(A, b);<br>    <br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = C.<span class="hljs-built_in">size</span>() - <span class="hljs-number">1</span>; i &gt;= <span class="hljs-number">0</span>; i--) cout &lt;&lt; C[i];<br>    <br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法模板 </tag>
            
            <tag> 高精度算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>高精度减法</title>
      <link href="/posts/c87c248906c2/"/>
      <url>/posts/c87c248906c2/</url>
      
        <content type="html"><![CDATA[<div class="note success simple"><p>不要有强迫症，面对眼前的难题，可以跳过，回头再处理。</p></div><h3 id="算法思想"><a href="#算法思想" class="headerlink" title="算法思想"></a>算法思想</h3><p><img src="https://bu.dusays.com/2023/05/01/644f6b58d3634.png" alt="image-20230428213513607"></p><p><img src="https://bu.dusays.com/2023/05/01/644f6b5d16368.png" alt="image-20230428213521595"></p><h3 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;algorithm&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-comment">// 比较两个数谁大谁小，如果A大于B返回true，反之</span><br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">cmp</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt; A, vector&lt;<span class="hljs-type">int</span>&gt; B)</span></span>&#123;<br>    <span class="hljs-comment">// 如果两个数字位数不同</span><br>    <span class="hljs-keyword">if</span>(A.<span class="hljs-built_in">size</span>() != B.<span class="hljs-built_in">size</span>()) <span class="hljs-keyword">return</span> A.<span class="hljs-built_in">size</span>() &gt; B.<span class="hljs-built_in">size</span>();<br>    <span class="hljs-comment">// 如果两个数字位数相同，直接从最高位开始比较 方向提示：&lt;-</span><br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = A.<span class="hljs-built_in">size</span>() - <span class="hljs-number">1</span>; i &gt;= <span class="hljs-number">0</span>; i--)<br>        <span class="hljs-keyword">if</span>(B[i] != A[i])<br>            <span class="hljs-keyword">return</span> A[i] &gt; B[i];<br>            <br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br><br><span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">sub</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt; A, vector&lt;<span class="hljs-type">int</span>&gt; B)</span></span>&#123;<br>    <span class="hljs-comment">// A一定是大于B的</span><br>    vector&lt;<span class="hljs-type">int</span>&gt; C;<br>    <br>    <span class="hljs-comment">// 进位</span><br>    <span class="hljs-type">int</span> t = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; A.<span class="hljs-built_in">size</span>(); i++)&#123;<br>        t = A[i] - t;<br>        <span class="hljs-keyword">if</span>(i &lt; B.<span class="hljs-built_in">size</span>()) t -= B[i];<br>        C.<span class="hljs-built_in">push_back</span>((t + <span class="hljs-number">10</span>) % <span class="hljs-number">10</span>);<br>        <span class="hljs-keyword">if</span>(t &lt; <span class="hljs-number">0</span>) t = <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">else</span> t = <span class="hljs-number">0</span>;<br>    &#125;<br>    <br>    <span class="hljs-comment">// 去除高位0，同时要保证结果长度大于1，不能1 - 1 = 0把答案0也给消了</span><br>    <span class="hljs-keyword">while</span>(C.<span class="hljs-built_in">size</span>() &gt; <span class="hljs-number">1</span> &amp;&amp; C.<span class="hljs-built_in">back</span>() == <span class="hljs-number">0</span>) C.<span class="hljs-built_in">pop_back</span>();<br>    <br>    <span class="hljs-keyword">return</span> C;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    <br>    string a, b;<br>    <br>    vector&lt;<span class="hljs-type">int</span>&gt; A, B;<br>    <br>    cin &gt;&gt; a &gt;&gt; b;<br>    <br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = a.<span class="hljs-built_in">size</span>() - <span class="hljs-number">1</span>; i &gt;= <span class="hljs-number">0</span>; i--) A.<span class="hljs-built_in">push_back</span>(a[i] - <span class="hljs-string">&#x27;0&#x27;</span>);<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = b.<span class="hljs-built_in">size</span>() - <span class="hljs-number">1</span>; i &gt;= <span class="hljs-number">0</span>; i--) B.<span class="hljs-built_in">push_back</span>(b[i] - <span class="hljs-string">&#x27;0&#x27;</span>);<br>    <br>    vector&lt;<span class="hljs-type">int</span>&gt; C;<br>    <span class="hljs-comment">// 如果A比B大</span><br>    <span class="hljs-keyword">if</span>(<span class="hljs-built_in">cmp</span>(A, B))&#123;<br>        C = <span class="hljs-built_in">sub</span>(A, B);<br>        <br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = C.<span class="hljs-built_in">size</span>() - <span class="hljs-number">1</span>; i &gt;= <span class="hljs-number">0</span>; i--) cout &lt;&lt; C[i];<br>        <br>    &#125;<span class="hljs-keyword">else</span>&#123;<br>        <span class="hljs-comment">// 如果A比B小</span><br>        C = <span class="hljs-built_in">sub</span>(B, A);<br>        <span class="hljs-comment">// 还需要输出减号</span><br>        cout &lt;&lt; <span class="hljs-string">&quot;-&quot;</span>;<br>        <br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = C.<span class="hljs-built_in">size</span>() - <span class="hljs-number">1</span>; i &gt;= <span class="hljs-number">0</span>; i--) cout &lt;&lt; C[i];<br>    &#125;<br>    <br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法模板 </tag>
            
            <tag> 高精度算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>高精度加法</title>
      <link href="/posts/759ae4655658/"/>
      <url>/posts/759ae4655658/</url>
      
        <content type="html"><![CDATA[<h2 id="高精度加法"><a href="#高精度加法" class="headerlink" title="高精度加法"></a>高精度加法</h2><div class="note success simple"><p>你有下大雨去网吧的勇气，却没有下小雨去图书馆的勇气吗</p></div><h3 id="算法思想"><a href="#算法思想" class="headerlink" title="算法思想"></a>算法思想</h3><p>使用数组模拟平常我们的竖式计算。例如：</p><p><img src="https://bu.dusays.com/2023/05/01/644f6b0aa04aa.png" alt="image-20230427202700060"></p><p><img src="https://bu.dusays.com/2023/05/01/644f6b12b49a4.png" alt="image-20230428202609403"></p><p><img src="https://bu.dusays.com/2023/05/01/644f6b186bf4d.png" alt="image-20230428203007184"></p><p><img src="https://bu.dusays.com/2023/05/01/644f6b1e05ea1.png" alt="image-20230428203255775"></p><p><img src="https://bu.dusays.com/2023/05/01/644f6b2160933.png" alt="image-20230428203857482"></p><h3 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;algorithm&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">add</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt; A, vector&lt;<span class="hljs-type">int</span>&gt; B)</span></span>&#123;<br>    <span class="hljs-comment">// 为了方便计算，让A中保存较长的数字， B中保存较短的数字</span><br>    <span class="hljs-keyword">if</span>(B.<span class="hljs-built_in">size</span>() &gt; A.<span class="hljs-built_in">size</span>()) <span class="hljs-keyword">return</span> <span class="hljs-built_in">add</span>(B, A);<br>    <br>    <span class="hljs-comment">// 保存最终的结果</span><br>    vector&lt;<span class="hljs-type">int</span>&gt; C;<br>    <br>    <span class="hljs-comment">// 以 A 为基准，开始按位计算</span><br>    <span class="hljs-comment">// 每位的进位</span><br>    <span class="hljs-type">int</span> t = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; A.<span class="hljs-built_in">size</span>(); i++)&#123;<br>        t += A[i];<br>        <span class="hljs-comment">// 如果B位置还没遍历完</span><br>        <span class="hljs-keyword">if</span>(i &lt; B.<span class="hljs-built_in">size</span>()) t += B[i];<br>        <span class="hljs-comment">// 9 + 9 = 18, 1 + 2 = 3。取余即可，进位交给 t /= 10 做</span><br>        C.<span class="hljs-built_in">push_back</span>(t % <span class="hljs-number">10</span>);<br>        <span class="hljs-comment">// 如果是18, 那么下次t初始值会变成1</span><br>        t /= <span class="hljs-number">10</span>;<br>    &#125;<br>    <span class="hljs-comment">// 最终，还需要判断进位上是否还有数</span><br>    <span class="hljs-keyword">if</span>(t) C.<span class="hljs-built_in">push_back</span>(t);<br>    <br>    <span class="hljs-keyword">return</span> C;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-comment">// 字符串形式读取两个数</span><br>    string a, b;<br>    <br>    cin &gt;&gt; a &gt;&gt; b;<br>    <span class="hljs-comment">// 用来保存两个数字</span><br>    vector&lt;<span class="hljs-type">int</span>&gt; A, B;<br>    <span class="hljs-comment">// 倒序保存，记得转数字</span><br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = a.<span class="hljs-built_in">size</span>() - <span class="hljs-number">1</span>; i &gt;= <span class="hljs-number">0</span>; i--) A.<span class="hljs-built_in">push_back</span>(a[i] - <span class="hljs-string">&#x27;0&#x27;</span>);<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = b.<span class="hljs-built_in">size</span>() - <span class="hljs-number">1</span>; i &gt;= <span class="hljs-number">0</span>; i--) B.<span class="hljs-built_in">push_back</span>(b[i] - <span class="hljs-string">&#x27;0&#x27;</span>);<br>    <br>    vector&lt;<span class="hljs-type">int</span>&gt; C = <span class="hljs-built_in">add</span>(A, B);<br>    <br>    <span class="hljs-comment">// 输出计算之后的结果</span><br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = C.<span class="hljs-built_in">size</span>() - <span class="hljs-number">1</span>; i &gt;= <span class="hljs-number">0</span>; i--) cout &lt;&lt; C[i];<br>    <br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法模板 </tag>
            
            <tag> 高精度算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>[AcWing]88. 树中两个结点的最低公共祖先</title>
      <link href="/posts/02073ceab06d/"/>
      <url>/posts/02073ceab06d/</url>
      
        <content type="html"><![CDATA[<h1 id="AcWing-88-树中两个结点的最低公共祖先"><a href="#AcWing-88-树中两个结点的最低公共祖先" class="headerlink" title="[AcWing]88. 树中两个结点的最低公共祖先"></a><a href="https://www.acwing.com/problem/content/84/">[AcWing]88. 树中两个结点的最低公共祖先</a></h1><p>给出一个二叉树，输入两个树节点，求它们的最低公共祖先。</p><p>一个树节点的祖先节点包括它本身。</p><p><strong>注意：</strong></p><ul><li>输入的二叉树不为空；</li><li>输入的两个节点一定不为空，且是二叉树中的节点；</li></ul><!-- --><h4 id="数据范围"><a href="#数据范围" class="headerlink" title="数据范围"></a>数据范围</h4><p>树中节点数量 <code>[0,500]</code>。</p><h4 id="样例"><a href="#样例" class="headerlink" title="样例"></a>样例</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">二叉树[8, 12, 2, null, null, 6, 4, null, null, null, null]如下图所示：<br>    8<br>   / \<br>  12  2<br>     / \<br>    6   4<br><br>1. 如果输入的树节点为2和12，则输出的最低公共祖先为树节点8。<br><br>2. 如果输入的树节点为2和6，则输出的最低公共祖先为树节点2。<br></code></pre></td></tr></table></figure><h3 id="算法思想"><a href="#算法思想" class="headerlink" title="算法思想"></a>算法思想</h3><p><img src="https://bu.dusays.com/2023/04/24/64468eb3c9247.png" alt="image-20230424221354590"></p><ol><li>如果<code>p</code>、<code>q</code>分别存在于这棵子树的左右两边，返回这棵子树的根，它就是最低公共祖先。</li><li>否则，<code>p</code>、<code>q</code>只可能全存在于这棵子树的左边、或者全存在于这棵子树的右边。</li><li>如果当前节点恰好是<code>p</code>或<code>q</code>中的一个，那么它就是最低公共祖先。</li></ol><h3 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Definition for a binary tree node.</span><br><span class="hljs-comment"> * struct TreeNode &#123;</span><br><span class="hljs-comment"> *     int val;</span><br><span class="hljs-comment"> *     TreeNode *left;</span><br><span class="hljs-comment"> *     TreeNode *right;</span><br><span class="hljs-comment"> *     TreeNode(int x) : val(x), left(NULL), right(NULL) &#123;&#125;</span><br><span class="hljs-comment"> * &#125;;</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function">TreeNode* <span class="hljs-title">lowestCommonAncestor</span><span class="hljs-params">(TreeNode* root, TreeNode* p, TreeNode* q)</span> </span>&#123;<br>        <span class="hljs-comment">// 由于题目说了，输入的树不为空，并且p、q是树中的元素</span><br>        <span class="hljs-comment">// 就是说一定能够找到树中两个节点的最低公共祖先</span><br>        <span class="hljs-comment">// 遇到叶子节点</span><br>        <span class="hljs-keyword">if</span>(!root) <span class="hljs-keyword">return</span> <span class="hljs-literal">NULL</span>;<br>        <br>        <span class="hljs-comment">// 左边找一下、右边找一下，遇到p、q节点就保存</span><br>        TreeNode * left = <span class="hljs-built_in">lowestCommonAncestor</span>(root -&gt; left, p, q);<br>        TreeNode * right = <span class="hljs-built_in">lowestCommonAncestor</span>(root -&gt; right, p, q);<br>        <br>        <span class="hljs-comment">// 如果p、q分别存在于这棵子树的左右两边，返回这棵子树的根，它就是p、q的最低公共祖先</span><br>        <span class="hljs-keyword">if</span>(left &amp;&amp; right) <span class="hljs-keyword">return</span> root;<br>        <br>        <span class="hljs-comment">// 那么p、q只可能全存在于这棵子树的左边、或者全存在于这棵子树的右边</span><br>        <span class="hljs-comment">// 如果当前节点恰好是p或q中的一个，那么它就是最低公共祖先</span><br>        <span class="hljs-keyword">if</span>(root == p || root == q) <span class="hljs-keyword">return</span> root;<br>        <br>        <span class="hljs-comment">// 如果最低公共祖先在左边，返回左边的最低公共祖先</span><br>        <span class="hljs-comment">// 如果最低公共祖先在右边，返回右边的最低公共祖先</span><br>        <span class="hljs-keyword">if</span>(left) <span class="hljs-keyword">return</span> left;<br>        <span class="hljs-keyword">return</span> right;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><h3 id="时间复杂度"><a href="#时间复杂度" class="headerlink" title="时间复杂度"></a>时间复杂度</h3><p>遍历整棵子树，时间复杂度<code>O(n)</code>。</p>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> AcWing </tag>
            
            <tag> 二叉树 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>[AcWing]72. 平衡二叉树</title>
      <link href="/posts/4c34c5a2d3db/"/>
      <url>/posts/4c34c5a2d3db/</url>
      
        <content type="html"><![CDATA[<h1 id="AcWing-72-平衡二叉树"><a href="#AcWing-72-平衡二叉树" class="headerlink" title="[AcWing]72. 平衡二叉树"></a><a href="https://www.acwing.com/problem/content/68/">[AcWing]72. 平衡二叉树</a></h1><p>输入一棵二叉树的根结点，判断该树是不是平衡二叉树。</p><p>如果某二叉树中任意结点的左右子树的深度相差不超过 <code>1</code>，那么它就是一棵平衡二叉树。</p><p><strong>注意：</strong></p><ul><li>规定空树也是一棵平衡二叉树。</li></ul><!-- --><h4 id="数据范围"><a href="#数据范围" class="headerlink" title="数据范围"></a>数据范围</h4><p>树中节点数量 <code>[0,500]</code>。</p><h4 id="样例"><a href="#样例" class="headerlink" title="样例"></a>样例</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">输入：二叉树[5,7,11,null,null,12,9,null,null,null,null]如下所示，<br>    5<br>   / \<br>  7  11<br>    /  \<br>   12   9<br><br>输出：true<br></code></pre></td></tr></table></figure><h3 id="算法思路"><a href="#算法思路" class="headerlink" title="算法思路"></a>算法思路</h3><p>在统计二叉树的深度的代码基础上，实时判断当前节点的左右子树的深度差是否大于1，如果是则不是平衡二叉树</p><h3 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Definition for a binary tree node.</span><br><span class="hljs-comment"> * struct TreeNode &#123;</span><br><span class="hljs-comment"> *     int val;</span><br><span class="hljs-comment"> *     TreeNode *left;</span><br><span class="hljs-comment"> *     TreeNode *right;</span><br><span class="hljs-comment"> *     TreeNode(int x) : val(x), left(NULL), right(NULL) &#123;&#125;</span><br><span class="hljs-comment"> * &#125;;</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-comment">// 默认是平衡二叉树，如果判断过程中当前节点的左右子树的深度差大于1，则改为false</span><br>    <span class="hljs-type">bool</span> res = <span class="hljs-literal">true</span>;<br><br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">dfs</span><span class="hljs-params">(TreeNode * root)</span></span>&#123;<br>        <span class="hljs-comment">// 空树深度为0</span><br>        <span class="hljs-comment">// DFS结束，那层空节点不算深度，返回0</span><br>        <span class="hljs-keyword">if</span>(!root) <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-comment">// 如果不是空树,计算当前节点的左右子树深度</span><br>        <span class="hljs-type">int</span> left = <span class="hljs-built_in">dfs</span>(root -&gt; left);<br>        <span class="hljs-type">int</span> right = <span class="hljs-built_in">dfs</span>(root -&gt; right);<br>        <br>        <span class="hljs-comment">// 如果左右子树深度之差大于1，则不是平衡二叉树</span><br>        <span class="hljs-keyword">if</span>(<span class="hljs-built_in">abs</span>(left - right) &gt; <span class="hljs-number">1</span>) res = <span class="hljs-literal">false</span>;<br>        <span class="hljs-comment">// 返回 包括当前节点的，二叉树的深度</span><br>        <span class="hljs-comment">// + 1 是因为当前节点也算1个深度，记得从下往上看</span><br><br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">max</span>(left, right) + <span class="hljs-number">1</span>;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">isBalanced</span><span class="hljs-params">(TreeNode* root)</span> </span>&#123;<br>        <span class="hljs-built_in">dfs</span>(root);<br>        <span class="hljs-keyword">return</span> res;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><h3 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">if</span>(<span class="hljs-built_in">abs</span>(left - right) &gt; <span class="hljs-number">1</span>) flag = <span class="hljs-literal">false</span>; <span class="hljs-comment">// 为什么这里直接return false是错的</span><br></code></pre></td></tr></table></figure><p>在判断二叉树是否平衡的过程中，如果在递归过程中遇到某个节点的左子树和右子树的高度差大于1，直接返回false确实可以立即表示该树不是平衡的。<br>但是，你<code>isBalanced</code>函数返回的是 <code>res</code> 啊。你<code>return false</code>只是中断了函数，并没有真的<code>res = false, return res</code>。</p>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> AcWing </tag>
            
            <tag> 二叉树 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>[AcWing]70. 二叉搜索树的第k个结点</title>
      <link href="/posts/58544f92f8ea/"/>
      <url>/posts/58544f92f8ea/</url>
      
        <content type="html"><![CDATA[<h1 id="AcWing-70-二叉搜索树的第k个结点"><a href="#AcWing-70-二叉搜索树的第k个结点" class="headerlink" title="[AcWing]70. 二叉搜索树的第k个结点"></a><a href="https://www.acwing.com/problem/content/66/">[AcWing]70. 二叉搜索树的第k个结点</a></h1><p>给定一棵二叉搜索树，请找出其中的第 <code>k</code> 小的结点。</p><p>你可以假设树和 <code>k</code> 都存在，并且 <code>1≤k≤</code> 树的总结点数。</p><h4 id="数据范围"><a href="#数据范围" class="headerlink" title="数据范围"></a>数据范围</h4><p>树中节点数量 <code>[1,500]</code>。</p><h4 id="样例"><a href="#样例" class="headerlink" title="样例"></a>样例</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">输入：root = [2, 1, 3, null, null, null, null] ，k = 3<br><br>    2<br>   / \<br>  1   3<br><br>输出：3<br></code></pre></td></tr></table></figure><h3 id="算法思想"><a href="#算法思想" class="headerlink" title="算法思想"></a>算法思想</h3><p>中序遍历二叉搜索树，找到第k个节点。</p><h3 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Definition for a binary tree node.</span><br><span class="hljs-comment"> * struct TreeNode &#123;</span><br><span class="hljs-comment"> *     int val;</span><br><span class="hljs-comment"> *     TreeNode *left;</span><br><span class="hljs-comment"> *     TreeNode *right;</span><br><span class="hljs-comment"> *     TreeNode(int x) : val(x), left(NULL), right(NULL) &#123;&#125;</span><br><span class="hljs-comment"> * &#125;;</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <br>    TreeNode * res;<br><br>    <span class="hljs-comment">// 注意这里的k是加了引用的</span><br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">dfs</span><span class="hljs-params">(TreeNode * root, <span class="hljs-type">int</span> &amp; k)</span></span>&#123;<br>        <span class="hljs-comment">// 中序遍历</span><br>        <span class="hljs-keyword">if</span>(!root) <span class="hljs-keyword">return</span>;<br>        <br>        <span class="hljs-built_in">dfs</span>(root -&gt; left, k);<br>        <br>        k--;<br>        <span class="hljs-keyword">if</span>(!k) res = root;<br>        <span class="hljs-comment">// 剪枝（找到了答案，右子树显然不需要遍历了，否则它会执着地找到空结点才停止递归）</span><br>        <span class="hljs-keyword">if</span>(k &gt; <span class="hljs-number">0</span>) <span class="hljs-built_in">dfs</span>(root -&gt; right, k);<br>    &#125;<br><br>    <span class="hljs-function">TreeNode* <span class="hljs-title">kthNode</span><span class="hljs-params">(TreeNode* root, <span class="hljs-type">int</span> k)</span> </span>&#123;<br>        <span class="hljs-comment">// 中序遍历，找到第k个节点</span><br>        <span class="hljs-built_in">dfs</span>(root, k);<br>        <span class="hljs-keyword">return</span> res;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><h3 id="时间复杂度"><a href="#时间复杂度" class="headerlink" title="时间复杂度"></a>时间复杂度</h3><p>每个节点最多被遍历一次，因此时间复杂度是<code>O(n)</code></p>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> AcWing </tag>
            
            <tag> 二叉树 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>[AcWing]71. 二叉树的深度</title>
      <link href="/posts/348ff2382b5d/"/>
      <url>/posts/348ff2382b5d/</url>
      
        <content type="html"><![CDATA[<h1 id="AcWing-71-二叉树的深度"><a href="#AcWing-71-二叉树的深度" class="headerlink" title="[AcWing]71. 二叉树的深度"></a><a href="https://www.acwing.com/problem/content/67/">[AcWing]71. 二叉树的深度</a></h1><p>输入一棵二叉树的根结点，求该树的深度。</p><p>从根结点到叶结点依次经过的结点（含根、叶结点）形成树的一条路径，最长路径的长度为树的深度。</p><h4 id="数据范围"><a href="#数据范围" class="headerlink" title="数据范围"></a>数据范围</h4><p>树中节点数量 <code>[0,500]</code>。</p><h4 id="样例"><a href="#样例" class="headerlink" title="样例"></a>样例</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">输入：二叉树[8, 12, 2, null, null, 6, 4, null, null, null, null]如下图所示：<br>    8<br>   / \<br>  12  2<br>     / \<br>    6   4<br><br>输出：3<br></code></pre></td></tr></table></figure><h3 id="算法思想"><a href="#算法思想" class="headerlink" title="算法思想"></a>算法思想</h3><p>对二叉树进行DFS遍历，在这个过程中，进入下一子树，则<code>depth + 1</code>。<br>取左右子树<code>depth</code>的最大值。</p><h3 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h3><p>推荐第一个，因为在做平衡二叉树的时候直接改改就行了。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Definition for a binary tree node.</span><br><span class="hljs-comment"> * struct TreeNode &#123;</span><br><span class="hljs-comment"> *     int val;</span><br><span class="hljs-comment"> *     TreeNode *left;</span><br><span class="hljs-comment"> *     TreeNode *right;</span><br><span class="hljs-comment"> *     TreeNode(int x) : val(x), left(NULL), right(NULL) &#123;&#125;</span><br><span class="hljs-comment"> * &#125;;</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">dfs</span><span class="hljs-params">(TreeNode * root)</span></span>&#123;<br>        <span class="hljs-comment">// 出口</span><br>        <span class="hljs-keyword">if</span>(!root) <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-comment">// 左右子树的深度</span><br>        <span class="hljs-type">int</span> left = <span class="hljs-built_in">dfs</span>(root -&gt; left);<br>        <span class="hljs-type">int</span> right = <span class="hljs-built_in">dfs</span>(root -&gt; right);<br>        <span class="hljs-comment">// 取左右子树中较大的那个返回</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">max</span>(left, right) + <span class="hljs-number">1</span>;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">treeDepth</span><span class="hljs-params">(TreeNode* root)</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">dfs</span>(root);<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Definition for a binary tree node.</span><br><span class="hljs-comment"> * struct TreeNode &#123;</span><br><span class="hljs-comment"> *     int val;</span><br><span class="hljs-comment"> *     TreeNode *left;</span><br><span class="hljs-comment"> *     TreeNode *right;</span><br><span class="hljs-comment"> *     TreeNode(int x) : val(x), left(NULL), right(NULL) &#123;&#125;</span><br><span class="hljs-comment"> * &#125;;</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">dfs</span><span class="hljs-params">(TreeNode * root, <span class="hljs-type">int</span> depth)</span></span>&#123;<br>        <span class="hljs-comment">// 如果遍历到了树底，返回深度</span><br>        <span class="hljs-keyword">if</span>(!root) <span class="hljs-keyword">return</span> depth;<br>        <span class="hljs-comment">// 有左子树就遍历左子树，有右子树就遍历右子树</span><br>        <span class="hljs-comment">// 取两个子树的最大深度</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">max</span>(<span class="hljs-built_in">dfs</span>(root -&gt; left, depth + <span class="hljs-number">1</span>), <span class="hljs-built_in">dfs</span>(root -&gt; right, depth + <span class="hljs-number">1</span>));<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">treeDepth</span><span class="hljs-params">(TreeNode* root)</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">dfs</span>(root, <span class="hljs-number">0</span>);<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Definition for a binary tree node.</span><br><span class="hljs-comment"> * struct TreeNode &#123;</span><br><span class="hljs-comment"> *     int val;</span><br><span class="hljs-comment"> *     TreeNode *left;</span><br><span class="hljs-comment"> *     TreeNode *right;</span><br><span class="hljs-comment"> *     TreeNode(int x) : val(x), left(NULL), right(NULL) &#123;&#125;</span><br><span class="hljs-comment"> * &#125;;</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">dfs</span><span class="hljs-params">(TreeNode * root, <span class="hljs-type">int</span> depth)</span></span>&#123;<br>        <span class="hljs-comment">// 到了最深处直接返回深度</span><br>        <span class="hljs-keyword">if</span>(!root) <span class="hljs-keyword">return</span> depth;<br>        <br>        <span class="hljs-comment">// 左边子树深度，和右边子树深度</span><br>        <span class="hljs-type">int</span> left = <span class="hljs-built_in">dfs</span>(root -&gt; left, depth + <span class="hljs-number">1</span>);<br>        <span class="hljs-type">int</span> right = <span class="hljs-built_in">dfs</span>(root -&gt; right, depth + <span class="hljs-number">1</span>);<br>        <br>        <span class="hljs-comment">// 返回最大深度</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">max</span>(left, right);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">treeDepth</span><span class="hljs-params">(TreeNode* root)</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">dfs</span>(root, <span class="hljs-number">0</span>);<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><h3 id="时间复杂度"><a href="#时间复杂度" class="headerlink" title="时间复杂度"></a>时间复杂度</h3><p>DFS遍历，每个节点只被遍历一次，时间复杂度是<code>O(n)</code>。</p>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> AcWing </tag>
            
            <tag> 二叉树 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>[AcWing]49. 二叉搜索树与双向链表</title>
      <link href="/posts/154a15c68d1b/"/>
      <url>/posts/154a15c68d1b/</url>
      
        <content type="html"><![CDATA[<h1 id="AcWing-49-二叉搜索树与双向链表"><a href="#AcWing-49-二叉搜索树与双向链表" class="headerlink" title="[AcWing]49. 二叉搜索树与双向链表"></a><a href="https://www.acwing.com/problem/content/87/">[AcWing]49. 二叉搜索树与双向链表</a></h1><p>输入一棵二叉搜索树，将该二叉搜索树转换成一个排序的双向链表。</p><p>要求不能创建任何新的结点，只能调整树中结点指针的指向。</p><p><strong>注意</strong>：</p><ul><li>需要返回双向链表最左侧的节点。</li></ul><p>例如，输入下图中左边的二叉搜索树，则输出右边的排序双向链表。</p><p><img src="https://www.acwing.com/media/article/image/2018/12/02/19_23bee494f5-QQ截图20181202052830.png" alt="QQ截图20181202052830.png"></p><h4 id="数据范围"><a href="#数据范围" class="headerlink" title="数据范围"></a>数据范围</h4><p>树中节点数量 <code>[0,500]</code>。</p><h3 id="算法思路"><a href="#算法思路" class="headerlink" title="算法思路"></a>算法思路</h3><p>中序遍历的基本代码：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Definition for a binary tree node.</span><br><span class="hljs-comment"> * struct TreeNode &#123;</span><br><span class="hljs-comment"> *     int val;</span><br><span class="hljs-comment"> *     TreeNode *left;</span><br><span class="hljs-comment"> *     TreeNode *right;</span><br><span class="hljs-comment"> *     TreeNode(int x) : val(x), left(NULL), right(NULL) &#123;&#125;</span><br><span class="hljs-comment"> * &#125;;</span><br><span class="hljs-comment"> */</span><br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">dfs</span><span class="hljs-params">(TreeNode * cur)</span></span>&#123;<br>    <span class="hljs-keyword">if</span>(!cur) <span class="hljs-keyword">return</span>;<br><br>    <span class="hljs-built_in">dfs</span>(cur -&gt; left);<br><br>    cout &lt;&lt; cur -&gt; val &lt;&lt; <span class="hljs-string">&quot; &quot;</span>;<br><br>    <span class="hljs-built_in">dfs</span>(cur -&gt; right);<br>&#125;<br></code></pre></td></tr></table></figure><p>根据观察，考虑在二叉树的中序遍历的基础上，利用 <code>pre</code> 和 <code>cur</code> 来进行 <code>双链表</code>的构建。</p><ol><li>先找到<code>双链表</code>的第一个节点，它是中序遍历的第一个节点。</li><li>定义一个指针<code>cur</code>，指向当前处理的节点。</li><li>如果<code>cur</code>的左子树不为空，则递归处理左子树。</li><li>将<code>cur</code>与其前驱节点（即中序遍历中<code>cur</code>的前一个节点）连接起来。</li><li>更新前驱节点为<code>cur</code>。</li><li>处理<code>cur</code>的右子树，重复步骤2-4。</li></ol><p><img src="https://bu.dusays.com/2023/04/21/64429cd6d4474.png" alt="image-20230421222517569"></p><h3 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Definition for a binary tree node.</span><br><span class="hljs-comment"> * struct TreeNode &#123;</span><br><span class="hljs-comment"> *     int val;</span><br><span class="hljs-comment"> *     TreeNode *left;</span><br><span class="hljs-comment"> *     TreeNode *right;</span><br><span class="hljs-comment"> *     TreeNode(int x) : val(x), left(NULL), right(NULL) &#123;&#125;</span><br><span class="hljs-comment"> * &#125;;</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <br>    TreeNode * head, * pre;<br><br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">dfs</span><span class="hljs-params">(TreeNode * cur)</span></span>&#123;<br>        <span class="hljs-keyword">if</span>(!cur) <span class="hljs-keyword">return</span>;<br>        <br>        <span class="hljs-built_in">dfs</span>(cur -&gt; left);<br>        <br>        <span class="hljs-comment">// 先找到中序遍历第一个节点作为双链表的head</span><br>        <span class="hljs-comment">// 只有当dfs(cur -&gt; left)压栈全部完毕才可能执行这行if，因此head一定是中序遍历的第一个元素</span><br>        <span class="hljs-keyword">if</span>(!pre) head = cur;<br>        <span class="hljs-keyword">else</span>&#123;<br>            <span class="hljs-comment">// 将cur与其前驱节点连接起来</span><br>            pre -&gt; right = cur;<br>            <span class="hljs-comment">// 构成双向</span><br>            cur -&gt; left = pre;<br>        &#125;<br>        <br>        <span class="hljs-comment">// 将当前的节点变成下一次回溯的前驱节点</span><br>        pre = cur;<br>        <br>        <span class="hljs-built_in">dfs</span>(cur -&gt; right);<br>    &#125;<br><br>    <span class="hljs-function">TreeNode* <span class="hljs-title">convert</span><span class="hljs-params">(TreeNode* root)</span> </span>&#123;<br>        <span class="hljs-comment">// 在中序遍历的基础上，做点改变 中序遍历：左根右</span><br>        <span class="hljs-built_in">dfs</span>(root);<br>        <span class="hljs-keyword">return</span> head;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><h3 id="复杂度分析"><a href="#复杂度分析" class="headerlink" title="复杂度分析"></a>复杂度分析</h3><ul><li>时间复杂度<code>O(n)</code>：对于每个节点最多只会被访问两次，因此总的时间复杂度为<code>O(n)</code>。</li><li>空间复杂度<code>O(n)</code>：在最坏情况下，退化成单链表，空间复杂度为<code>O(n)</code>。</li></ul>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> AcWing </tag>
            
            <tag> 二叉树 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>[AcWing]46. 二叉搜索树的后序遍历序列</title>
      <link href="/posts/d46bd558c265/"/>
      <url>/posts/d46bd558c265/</url>
      
        <content type="html"><![CDATA[<h1 id="AcWing-46-二叉搜索树的后序遍历序列"><a href="#AcWing-46-二叉搜索树的后序遍历序列" class="headerlink" title="[AcWing]46. 二叉搜索树的后序遍历序列"></a><a href="https://www.acwing.com/problem/content/44/">[AcWing]46. 二叉搜索树的后序遍历序列</a></h1><p>输入一个整数数组，判断该数组是不是某二叉搜索树的后序遍历的结果。</p><p>如果是则返回true，否则返回false。</p><p>假设输入的数组的任意两个数字都互不相同。</p><h4 id="数据范围"><a href="#数据范围" class="headerlink" title="数据范围"></a>数据范围</h4><p>数组长度 <code>[0,1000]</code>。</p><h4 id="样例"><a href="#样例" class="headerlink" title="样例"></a>样例</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">输入：[4, 8, 6, 12, 16, 14, 10]<br><br>输出：true<br></code></pre></td></tr></table></figure><h3 id="算法思想"><a href="#算法思想" class="headerlink" title="算法思想"></a>算法思想</h3><p><img src="https://bu.dusays.com/2023/04/20/64415023411af.png" alt="image-20230420220541552"></p><p><wavy>初始划分阶段</wavy>：</p><ol><li>数组最后一个元素一定是根元素，然后<code>从左往右</code>找到<code>第一个比根元素大</code>的下标，记为<code>k</code>。</li><li>左区间就是<code>[0, k - 1]</code>，右区间是<code>[k, n - 1]</code>。（n为数组长度)</li><li>然后对子区间做同样的划分。</li></ol><p><wavy>注意事项<wavy>：</p><ol><li>区间长度为1，则后续遍历序列合法。</li><li>只有包含<code>k</code>的右区间可能会出现小于根节点的情况，因为左边已经在找<code>k</code>的过程中排除了非法情况（左区间中有比根节点大的元素）。</li></ol><p><img src="https://bu.dusays.com/2023/04/20/644150271b857.png" alt="image-20230420224540132"></p><h3 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br><br>    <span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">dfs</span><span class="hljs-params">(<span class="hljs-type">int</span> l, <span class="hljs-type">int</span> r, vector&lt;<span class="hljs-type">int</span>&gt; &amp; seq)</span></span>&#123;<br>        <span class="hljs-comment">// 如果区间长度小于等于1，说明一切合法</span><br>        <span class="hljs-keyword">if</span>(l &gt;= r) <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>        <br>        <span class="hljs-comment">// 找到根节点</span><br>        <span class="hljs-type">int</span> root = seq[r];<br>        <br>        <span class="hljs-comment">// 从左往右找到第一个比根大的元素下标</span><br>        <span class="hljs-type">int</span> k = l;<br>        <span class="hljs-keyword">while</span>(k &lt; r &amp;&amp; seq[k] &lt; root) k++;<br>  <br>        <span class="hljs-comment">// 如果右区间有比根元素小的元素，一定不合法</span><br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = k; i &lt; r; i++)<br>            <span class="hljs-keyword">if</span>(seq[i] &lt; root)<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        <br>        <span class="hljs-comment">// 左区间和右区间同时划分</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">dfs</span>(l, k - <span class="hljs-number">1</span>, seq) &amp;&amp; <span class="hljs-built_in">dfs</span>(k, r - <span class="hljs-number">1</span>, seq);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">verifySequenceOfBST</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt; sequence)</span> </span>&#123;<br>        <span class="hljs-comment">// 整个区间长度[0, n - 1]。</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">dfs</span>(<span class="hljs-number">0</span>, sequence.<span class="hljs-built_in">size</span>() - <span class="hljs-number">1</span>, sequence);<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><h3 id="复杂度分析"><a href="#复杂度分析" class="headerlink" title="复杂度分析"></a>复杂度分析</h3><ul><li>时间复杂度<code>O(n&lt;sup&gt;2&lt;/sup&gt;)</code>：<code>dfs</code>中有一个while循环，最坏情况会循环O(n)次，一共执行O(n)次<code>dfs</code>，所以时间复杂度是<code>O(n&lt;sup&gt;2&lt;/sup&gt;)</code>。其实也就是退化成单链表了。</li><li>空间复杂度<code>O(n)</code>：退化成单链表空间占用<code>O(n)</code>。</li></ul>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> AcWing </tag>
            
            <tag> 二叉树 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>[AcWing]47. 二叉树中和为某一值的路径</title>
      <link href="/posts/e407ed0acd1f/"/>
      <url>/posts/e407ed0acd1f/</url>
      
        <content type="html"><![CDATA[<h1 id="AcWing-47-二叉树中和为某一值的路径"><a href="#AcWing-47-二叉树中和为某一值的路径" class="headerlink" title="[AcWing]47. 二叉树中和为某一值的路径"></a><a href="https://www.acwing.com/problem/content/45/">[AcWing]47. 二叉树中和为某一值的路径</a></h1><p>输入一棵二叉树和一个整数，打印出二叉树中结点值的和为输入整数的所有路径。</p><p>从树的根结点开始往下一直到叶结点所经过的结点形成一条路径。</p><p>保证树中结点值均不小于 <code>0</code>。</p><h4 id="数据范围"><a href="#数据范围" class="headerlink" title="数据范围"></a>数据范围</h4><p>树中结点的数量 <code>[0,1000]</code>。</p><h4 id="样例"><a href="#样例" class="headerlink" title="样例"></a>样例</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">给出二叉树如下所示，并给出num=22。<br>      5<br>     / \<br>    4   6<br>   /   / \<br>  12  13  6<br> /  \    / \<br>9    1  5   1<br><br>输出：[[5,4,12,1],[5,6,6,5]]<br></code></pre></td></tr></table></figure><h3 id="算法思路"><a href="#算法思路" class="headerlink" title="算法思路"></a>算法思路</h3><p>DFS的过程中，在遇到叶子节点的时候进行累加求和，并且提交<code>path</code>作为<code>ans</code>之一。</p><h3 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Definition for a binary tree node.</span><br><span class="hljs-comment"> * struct TreeNode &#123;</span><br><span class="hljs-comment"> *     int val;</span><br><span class="hljs-comment"> *     TreeNode *left;</span><br><span class="hljs-comment"> *     TreeNode *right;</span><br><span class="hljs-comment"> *     TreeNode(int x) : val(x), left(NULL), right(NULL) &#123;&#125;</span><br><span class="hljs-comment"> * &#125;;</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br><br>    vector&lt;vector&lt;<span class="hljs-type">int</span>&gt;&gt; ans;<br>    vector&lt;<span class="hljs-type">int</span>&gt; path;<br>    <br>    <span class="hljs-comment">// 节点，当前累计的值，目标值</span><br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">dfs</span><span class="hljs-params">(TreeNode * root, <span class="hljs-type">int</span> sum, <span class="hljs-type">int</span> target)</span></span>&#123;<br>        <span class="hljs-comment">// 遇到叶子节点下面的空节点，或者是棵空树，什么也不做，反正返回的是ans</span><br>        <span class="hljs-keyword">if</span>(!root) <span class="hljs-keyword">return</span>;<br>        <span class="hljs-comment">// 将当前遇到节点加入路径集合</span><br>        path.<span class="hljs-built_in">push_back</span>(root -&gt; val);<br>        <span class="hljs-comment">// 进行累加计算</span><br>        sum += root -&gt; val;<br>        <br>        <span class="hljs-comment">// 有左子树就开始递归左子树</span><br>        <span class="hljs-keyword">if</span>(root -&gt; left) <span class="hljs-built_in">dfs</span>(root -&gt; left, sum, target);<br>        <span class="hljs-comment">// 有右子树就开始递归右子树</span><br>        <span class="hljs-keyword">if</span>(root -&gt; right) <span class="hljs-built_in">dfs</span>(root -&gt; right, sum, target);<br>        <span class="hljs-comment">// 剩下的情况就是，左子树和右子树都没有，说明是当前节点是叶子节点</span><br>        <span class="hljs-comment">// 订正：不一定是左子树和右子树都没有，或许它是只有一个子树，因此不能无脑开始计算并且提交答案</span><br>        <span class="hljs-comment">// 确定是叶子节点才能计算并且提交答案</span><br>        <span class="hljs-keyword">if</span>(!root -&gt; left &amp;&amp; !root -&gt; right)&#123;<br>            <span class="hljs-keyword">if</span>(sum == target) ans.<span class="hljs-built_in">push_back</span>(path);<br>        &#125;<br>        <br>        <span class="hljs-comment">// 不成功也不管了，反正最终会提交一个ans</span><br>        <br>        <span class="hljs-comment">// 每次dfs都需要恢复现场</span><br>        path.<span class="hljs-built_in">pop_back</span>();<br>    &#125;<br>    <br>    vector&lt;vector&lt;<span class="hljs-type">int</span>&gt;&gt; <span class="hljs-built_in">findPath</span>(TreeNode* root, <span class="hljs-type">int</span> sum) &#123;<br>        <span class="hljs-comment">// 从根节点找到每个分支的叶子节点</span><br>        <span class="hljs-built_in">dfs</span>(root, <span class="hljs-number">0</span>, sum);<br>        <span class="hljs-keyword">return</span> ans;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><p><wavy>注意事项</wavy>：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c++">path.<span class="hljs-built_in">push_back</span>(root -&gt; val);<br><br>path.<span class="hljs-built_in">pop_back</span>();<span class="hljs-comment">// 恢复现场</span><br></code></pre></td></tr></table></figure><p>在DFS过程中，上面这两行到底怎么理解？</p><p>DFS的过程中，可以用函数调用栈来表示。如果调用四次DFS，则有四个DFS压入栈中，<code>path</code>也会有四个节点的值。在DFS出栈的过程中，如果不恢复现场，则会出现<code>函数调用栈空了，但path的里面值依旧没有减少</code>。</p><p>归根结底，四次DFS，<code>path</code>会加入四个节点的值，通过<code>path.pop_back()</code>会清除掉这四个节点的值。这样能够保证DFS在结束一个分支，再次开启新的分支的时候<code>path</code>是干净的。</p><h3 id="时间复杂度分析"><a href="#时间复杂度分析" class="headerlink" title="时间复杂度分析"></a>时间复杂度分析</h3><ul><li>最坏时间复杂度<code>O(n&lt;sup&gt;2&lt;/sup&gt;)</code>：在最坏情况下，树的上半部分为链状，下半部分为完全二叉树，并且从根节点到每一个叶子节点的路径都符合题目要求。路径的数目为<code>O(n)</code>，并且每一条路径的节点个数也为 O(n)。要想将n个路径的所有节点都统计起来，需要的时间复杂度是<code>O(n&lt;sup&gt;2&lt;/sup&gt;)</code>。</li><li>平均时间复杂度<code>O(n)</code>：由于每个节点最多只会被访问一次，所以时间复杂度是<code>O(n)</code>。</li></ul><p>但是注意：在大多数情况下，二叉树不会退化成链表，因此大部分情况下的时间复杂度都是线性的。</p><p>我认为时间复杂度还是能看做<code>O(n)</code>。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Definition for a binary tree node.</span><br><span class="hljs-comment"> * struct TreeNode &#123;</span><br><span class="hljs-comment"> *     int val;</span><br><span class="hljs-comment"> *     TreeNode *left;</span><br><span class="hljs-comment"> *     TreeNode *right;</span><br><span class="hljs-comment"> *     TreeNode(int x) : val(x), left(NULL), right(NULL) &#123;&#125;</span><br><span class="hljs-comment"> * &#125;;</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    vector&lt;vector&lt;<span class="hljs-type">int</span>&gt;&gt; ans;<br>    vector&lt;<span class="hljs-type">int</span>&gt; path;<br><br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">dfs</span><span class="hljs-params">(TreeNode * root, <span class="hljs-type">int</span> target)</span></span>&#123;<br>        <span class="hljs-keyword">if</span>(!root) <span class="hljs-keyword">return</span>;<br>                <br>        path.<span class="hljs-built_in">push_back</span>(root -&gt; val);<br>        <br>        <span class="hljs-comment">// 只有到叶子结点的时候才开始全部计算</span><br>        <span class="hljs-keyword">if</span>(!root -&gt; left &amp;&amp; !root -&gt; right)&#123;<br><br>            <span class="hljs-type">int</span> total = <span class="hljs-number">0</span>;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; path.<span class="hljs-built_in">size</span>(); i++)&#123;<br>                total += path[i];<br>            &#125;<br>            <span class="hljs-keyword">if</span>(total == target)&#123;<br>                <span class="hljs-comment">// 提交答案</span><br>                ans.<span class="hljs-built_in">push_back</span>(path);<br>            &#125;<br>        &#125;<br>        <br>        <span class="hljs-keyword">if</span>(root -&gt; left) <span class="hljs-built_in">dfs</span>(root -&gt; left, target);<br>        <span class="hljs-keyword">if</span>(root -&gt; right) <span class="hljs-built_in">dfs</span>(root -&gt; right, target);<br>        <br>        <span class="hljs-comment">// 恢复现场</span><br>        path.<span class="hljs-built_in">pop_back</span>();<br>    &#125;<br><br>    vector&lt;vector&lt;<span class="hljs-type">int</span>&gt;&gt; <span class="hljs-built_in">findPath</span>(TreeNode* root, <span class="hljs-type">int</span> sum) &#123;<br>        <span class="hljs-built_in">dfs</span>(root, sum);<br>        <span class="hljs-keyword">return</span> ans;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><p>我的算法。</p>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> AcWing </tag>
            
            <tag> 二叉树 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>[AcWing]45. 之字形打印二叉树</title>
      <link href="/posts/de0ff6a9d060/"/>
      <url>/posts/de0ff6a9d060/</url>
      
        <content type="html"><![CDATA[<h1 id="AcWing-45-之字形打印二叉树"><a href="#AcWing-45-之字形打印二叉树" class="headerlink" title="[AcWing]45. 之字形打印二叉树"></a><a href="https://www.acwing.com/problem/content/description/43/">[AcWing]45. 之字形打印二叉树</a></h1><p>请实现一个函数按照之字形顺序从上向下打印二叉树。</p><p>即第一行按照从左到右的顺序打印，第二层按照从右到左的顺序打印，第三行再按照从左到右的顺序打印，其他行以此类推。</p><h4 id="数据范围"><a href="#数据范围" class="headerlink" title="数据范围"></a>数据范围</h4><p>树中节点的数量 <code>[0,1000]</code>。</p><h4 id="样例"><a href="#样例" class="headerlink" title="样例"></a>样例</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">输入如下图所示二叉树[8, 12, 2, null, null, 6, 4, null, null, null, null]<br>    8<br>   / \<br>  12  2<br>     / \<br>    6   4<br>输出：[[8], [2, 12], [6, 4]]<br></code></pre></td></tr></table></figure><h3 id="算法思路1、2"><a href="#算法思路1、2" class="headerlink" title="算法思路1、2"></a>算法思路1、2</h3><p>在之前的题的基础上，添加了条件判断</p><p>详情参考<a href="/6929c8c24cea">分行从上往下打印二叉树</a></p><h3 id="代码实现1"><a href="#代码实现1" class="headerlink" title="代码实现1"></a>代码实现1</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Definition for a binary tree node.</span><br><span class="hljs-comment"> * struct TreeNode &#123;</span><br><span class="hljs-comment"> *     int val;</span><br><span class="hljs-comment"> *     TreeNode *left;</span><br><span class="hljs-comment"> *     TreeNode *right;</span><br><span class="hljs-comment"> *     TreeNode(int x) : val(x), left(NULL), right(NULL) &#123;&#125;</span><br><span class="hljs-comment"> * &#125;;</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    vector&lt;vector&lt;<span class="hljs-type">int</span>&gt;&gt; <span class="hljs-built_in">printFromTopToBottom</span>(TreeNode* root) &#123;<br>        vector&lt;vector&lt;<span class="hljs-type">int</span>&gt;&gt; ans;<br>        <span class="hljs-comment">// 空树，返回空集合</span><br>        <span class="hljs-keyword">if</span>(!root) <span class="hljs-keyword">return</span> ans;<br>        <br>        <span class="hljs-comment">// 基于BFS的分行操作</span><br>        queue&lt;TreeNode *&gt; q;<br>        q.<span class="hljs-built_in">push</span>(root); <span class="hljs-comment">// 从根节点开始BFS</span><br>        <br>        <span class="hljs-comment">// 当前层是否需要逆置</span><br>        <span class="hljs-type">bool</span> flag = <span class="hljs-literal">false</span>;<br>        <br>        <span class="hljs-keyword">while</span>(q.<span class="hljs-built_in">size</span>())&#123;<br>            <span class="hljs-comment">// 下一层的节点数量</span><br>            <span class="hljs-type">int</span> len = q.<span class="hljs-built_in">size</span>();<br>            <span class="hljs-comment">// 保存每层的值</span><br>            vector&lt;<span class="hljs-type">int</span>&gt; level;<br>            <span class="hljs-comment">// 一口气将当前层的节点，全放入队列</span><br>            <span class="hljs-keyword">while</span>(len --)&#123;<br>                TreeNode * t = q.<span class="hljs-built_in">front</span>();<br>                q.<span class="hljs-built_in">pop</span>();<br>                <br>                level.<span class="hljs-built_in">push_back</span>(t -&gt; val);<br>                <br>                <span class="hljs-keyword">if</span>(t -&gt; left) q.<span class="hljs-built_in">push</span>(t -&gt; left);<br>                <span class="hljs-keyword">if</span>(t -&gt; right) q.<span class="hljs-built_in">push</span>(t -&gt; right);<br>            &#125;<br>            <span class="hljs-comment">// 逆置判断</span><br>            <span class="hljs-keyword">if</span>(flag)&#123;<br>                <span class="hljs-built_in">reverse</span>(level.<span class="hljs-built_in">begin</span>(), level.<span class="hljs-built_in">end</span>());<br>            &#125;<br>                <br>            <span class="hljs-comment">// 下一层必定与当前层BFS的顺序相反</span><br>            flag = !flag;<br>            <span class="hljs-comment">// 提交当前层</span><br>            ans.<span class="hljs-built_in">push_back</span>(level);<br>        &#125;<br>        <br>        <span class="hljs-keyword">return</span> ans;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><h3 id="代码实现2"><a href="#代码实现2" class="headerlink" title="代码实现2"></a>代码实现2</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Definition for a binary tree node.</span><br><span class="hljs-comment"> * struct TreeNode &#123;</span><br><span class="hljs-comment"> *     int val;</span><br><span class="hljs-comment"> *     TreeNode *left;</span><br><span class="hljs-comment"> *     TreeNode *right;</span><br><span class="hljs-comment"> *     TreeNode(int x) : val(x), left(NULL), right(NULL) &#123;&#125;</span><br><span class="hljs-comment"> * &#125;;</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    vector&lt;vector&lt;<span class="hljs-type">int</span>&gt;&gt; <span class="hljs-built_in">printFromTopToBottom</span>(TreeNode* root) &#123;<br>        vector&lt;vector&lt;<span class="hljs-type">int</span>&gt;&gt; ans;<br>        <span class="hljs-comment">// 空树，返回空集合</span><br>        <span class="hljs-keyword">if</span>(!root) <span class="hljs-keyword">return</span> ans;<br>        <br>        <span class="hljs-comment">// 基于BFS的分行操作</span><br>        queue&lt;TreeNode *&gt; q;<br>        q.<span class="hljs-built_in">push</span>(root); <span class="hljs-comment">// 从根节点开始BFS</span><br>        q.<span class="hljs-built_in">push</span>(<span class="hljs-literal">NULL</span>); <span class="hljs-comment">// 代表这层结束</span><br>        <br>        <span class="hljs-comment">// 存储每层的节点值</span><br>        vector&lt;<span class="hljs-type">int</span>&gt; level;<br>        <br>        <span class="hljs-comment">// 表示是否需要将 level 集合逆置(从右到左)</span><br>        <span class="hljs-type">bool</span> flag = <span class="hljs-literal">false</span>;<br>        <br>        <span class="hljs-keyword">while</span>(q.<span class="hljs-built_in">size</span>())&#123;<br>            TreeNode * t = q.<span class="hljs-built_in">front</span>();<br>            q.<span class="hljs-built_in">pop</span>();<br>            <br>            <span class="hljs-comment">// 如果当前层结束了</span><br>            <span class="hljs-keyword">if</span>(!t)&#123;<br>                <span class="hljs-comment">// 如果下一层没有节点了</span><br>                <span class="hljs-comment">// 比如：4 NULL，while循环拿出4，放入level之后，取出NULL，进入这个if条件里面</span><br>                <span class="hljs-comment">// level不是空，因此提交 level 到 ans 里面</span><br>                <span class="hljs-comment">// 队列里面剩下的是 NULL，再拿出来，此时判断level，为空，break掉</span><br>                <span class="hljs-comment">// 这也就是下一层没有节点的情况</span><br>                <span class="hljs-keyword">if</span>(level.<span class="hljs-built_in">empty</span>()) <span class="hljs-keyword">break</span>;<br>                <span class="hljs-comment">// 当前层结束了，下一行还有节点，根据类型提交level，再给下一层增加结束标识符</span><br>                <span class="hljs-comment">// 如果需要逆置</span><br>                <span class="hljs-keyword">if</span>(flag)&#123;<br>                    <span class="hljs-built_in">reverse</span>(level.<span class="hljs-built_in">begin</span>(), level.<span class="hljs-built_in">end</span>());<br>                &#125;<br>                ans.<span class="hljs-built_in">push_back</span>(level);<br>                q.<span class="hljs-built_in">push</span>(<span class="hljs-literal">NULL</span>);<br>                <span class="hljs-comment">// 为了下一次，level容器是空的，还需要还原空状态</span><br>                level.<span class="hljs-built_in">clear</span>();<br>                <span class="hljs-comment">// 下一层必定与当前层BFS的顺序相反</span><br>                flag = !flag;<br>                <span class="hljs-keyword">continue</span>;<br>            &#125;<br>            <span class="hljs-comment">// 当前层没结束,正常BFS</span><br>            level.<span class="hljs-built_in">push_back</span>(t -&gt; val);<br>            <span class="hljs-keyword">if</span>(t -&gt; left) q.<span class="hljs-built_in">push</span>(t -&gt; left);<br>            <span class="hljs-keyword">if</span>(t -&gt; right) q.<span class="hljs-built_in">push</span>(t -&gt; right);<br>        &#125;<br>        <br>        <span class="hljs-keyword">return</span> ans;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><h3 id="时间复杂度"><a href="#时间复杂度" class="headerlink" title="时间复杂度"></a>时间复杂度</h3><p>由于树中每个节点仅会进队出队一次，所以时间复杂度是<code>O(n)</code></p>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> AcWing </tag>
            
            <tag> 二叉树 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>[AcWing]44. 分行从上往下打印二叉树</title>
      <link href="/posts/6929c8c24cea/"/>
      <url>/posts/6929c8c24cea/</url>
      
        <content type="html"><![CDATA[<h1 id="AcWing-44-分行从上往下打印二叉树"><a href="#AcWing-44-分行从上往下打印二叉树" class="headerlink" title="[AcWing]44. 分行从上往下打印二叉树"></a><a href="https://www.acwing.com/problem/content/42/">[AcWing]44. 分行从上往下打印二叉树</a></h1><p>从上到下按层打印二叉树，同一层的结点按从左到右的顺序打印，每一层打印到一行。</p><h4 id="数据范围"><a href="#数据范围" class="headerlink" title="数据范围"></a>数据范围</h4><p>树中节点的数量 <code>[0,1000]</code>。</p><h4 id="样例"><a href="#样例" class="headerlink" title="样例"></a>样例</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">输入如下图所示二叉树[8, 12, 2, null, null, 6, null, 4, null, null, null]<br>    8<br>   / \<br>  12  2<br>     /<br>    6<br>   /<br>  4<br><br>输出：[[8], [12, 2], [6], [4]]<br></code></pre></td></tr></table></figure><h3 id="算法思想1"><a href="#算法思想1" class="headerlink" title="算法思想1"></a>算法思想1</h3><p>已知不分行的做法是使用<code>BFS</code>层序遍历这棵树。</p><p>在此基础上，做出一些改变，即可得到不分行的做法。</p><p>问：<wavy>在BFS的过程中，能否知道当前队列中有多少节点？</wavy></p><p>答：可以。<wavy>队列的容量就是当前层的节点数量</wavy></p><p>那么，在第1层，只有根节点，队列容量是1，当前层节点数量是1。</p><p>在第2层，有2个节点，队列容量是2，当前层节点数量是2。</p><p>原<code>BFS</code>每次只能弹出一个节点，如果我们一次性弹出<code>当前层数</code>的节点呢？然后将它放入小集合。</p><p>这样一轮结束，将小集合放入大集合。</p><h3 id="代码实现1"><a href="#代码实现1" class="headerlink" title="代码实现1"></a>代码实现1</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Definition for a binary tree node.</span><br><span class="hljs-comment"> * struct TreeNode &#123;</span><br><span class="hljs-comment"> *     int val;</span><br><span class="hljs-comment"> *     TreeNode *left;</span><br><span class="hljs-comment"> *     TreeNode *right;</span><br><span class="hljs-comment"> *     TreeNode(int x) : val(x), left(NULL), right(NULL) &#123;&#125;</span><br><span class="hljs-comment"> * &#125;;</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    vector&lt;vector&lt;<span class="hljs-type">int</span>&gt;&gt; <span class="hljs-built_in">printFromTopToBottom</span>(TreeNode* root) &#123;<br>        vector&lt;vector&lt;<span class="hljs-type">int</span>&gt;&gt; ans;<br>        <span class="hljs-comment">// 如果是空树返回空集合</span><br>        <span class="hljs-keyword">if</span>(!root) <span class="hljs-keyword">return</span> ans;<br>        <br>        <span class="hljs-comment">// BFS</span><br>        queue&lt;TreeNode *&gt; q;<br>        <span class="hljs-comment">// 从根节点开始扩展</span><br>        q.<span class="hljs-built_in">push</span>(root);<br>        <br>        <span class="hljs-keyword">while</span>(q.<span class="hljs-built_in">size</span>())&#123;<br>            <span class="hljs-comment">// 当前层的元素个数</span><br>            <span class="hljs-type">int</span> len = q.<span class="hljs-built_in">size</span>();<br>            <br>            <span class="hljs-comment">// 用来保存当前层的值的集合</span><br>            vector&lt;<span class="hljs-type">int</span>&gt; level;<br>            <br>            <span class="hljs-comment">// 一次性将当前层的所有节点弹出</span><br>            <span class="hljs-keyword">while</span>(len --)&#123;<br>                <span class="hljs-comment">// 从队头开始弹出</span><br>                TreeNode * t = q.<span class="hljs-built_in">front</span>();<br>                q.<span class="hljs-built_in">pop</span>();<br>                <span class="hljs-comment">// 记录这层值的元素</span><br>                level.<span class="hljs-built_in">push_back</span>(t -&gt; val);<br>                <br>                <span class="hljs-comment">// 为一次性弹出下层节点做准备</span><br>                <span class="hljs-keyword">if</span>(t -&gt; left) q.<span class="hljs-built_in">push</span>(t -&gt; left);<br>                <span class="hljs-keyword">if</span>(t -&gt; right) q.<span class="hljs-built_in">push</span>(t -&gt; right);<br>            &#125;<br>            <span class="hljs-comment">// 将小集合放入大集合</span><br>            ans.<span class="hljs-built_in">push_back</span>(level);<br>        &#125;<br>        <br>        <span class="hljs-keyword">return</span> ans;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><h3 id="算法思想2"><a href="#算法思想2" class="headerlink" title="算法思想2"></a>算法思想2</h3><p><img src="https://bu.dusays.com/2023/04/19/643fb3cee443e.png" alt="image-20230419172627366"></p><p>代码实现2</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Definition for a binary tree node.</span><br><span class="hljs-comment"> * struct TreeNode &#123;</span><br><span class="hljs-comment"> *     int val;</span><br><span class="hljs-comment"> *     TreeNode *left;</span><br><span class="hljs-comment"> *     TreeNode *right;</span><br><span class="hljs-comment"> *     TreeNode(int x) : val(x), left(NULL), right(NULL) &#123;&#125;</span><br><span class="hljs-comment"> * &#125;;</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    vector&lt;vector&lt;<span class="hljs-type">int</span>&gt;&gt; <span class="hljs-built_in">printFromTopToBottom</span>(TreeNode* root) &#123;<br>        vector&lt;vector&lt;<span class="hljs-type">int</span>&gt;&gt; ans;<br>        <span class="hljs-comment">// 空树，返回空集合</span><br>        <span class="hljs-keyword">if</span>(!root) <span class="hljs-keyword">return</span> ans;<br>        <br>        <span class="hljs-comment">// 基于BFS的分行操作</span><br>        queue&lt;TreeNode *&gt; q;<br>        q.<span class="hljs-built_in">push</span>(root); <span class="hljs-comment">// 从根节点开始BFS</span><br>        q.<span class="hljs-built_in">push</span>(<span class="hljs-literal">NULL</span>); <span class="hljs-comment">// 代表这层结束</span><br>        <br>        <span class="hljs-comment">// 存储每层的节点值</span><br>        vector&lt;<span class="hljs-type">int</span>&gt; level;<br>        <br>        <span class="hljs-keyword">while</span>(q.<span class="hljs-built_in">size</span>())&#123;<br>            TreeNode * t = q.<span class="hljs-built_in">front</span>();<br>            q.<span class="hljs-built_in">pop</span>();<br>            <br>            <span class="hljs-comment">// 如果当前层结束了</span><br>            <span class="hljs-keyword">if</span>(!t)&#123;<br>                <span class="hljs-comment">// 如果下一层没有节点了</span><br>                <span class="hljs-comment">// 比如：4 NULL，while循环拿出4，放入level之后，取出NULL，进入这个if条件里面</span><br>                <span class="hljs-comment">// level不是空，因此提交 level 到 ans 里面</span><br>                <span class="hljs-comment">// 队列里面剩下的是 NULL，再拿出来，此时判断level，为空，break掉</span><br>                <span class="hljs-comment">// 这也就是下一层没有节点的情况</span><br>                <span class="hljs-keyword">if</span>(level.<span class="hljs-built_in">empty</span>()) <span class="hljs-keyword">break</span>;<br>                <span class="hljs-comment">// 当前层结束了，下一行还有节点，先提交level，再给下一层增加结束标识符</span><br>                ans.<span class="hljs-built_in">push_back</span>(level);<br>                q.<span class="hljs-built_in">push</span>(<span class="hljs-literal">NULL</span>);<br>                <span class="hljs-comment">// 为了下一次，level容器是空的，还需要还原空状态</span><br>                level.<span class="hljs-built_in">clear</span>();<br>                <span class="hljs-keyword">continue</span>;<br>            &#125;<br>            <span class="hljs-comment">// 当前层没结束,正常BFS</span><br>            level.<span class="hljs-built_in">push_back</span>(t -&gt; val);<br>            <span class="hljs-keyword">if</span>(t -&gt; left) q.<span class="hljs-built_in">push</span>(t -&gt; left);<br>            <span class="hljs-keyword">if</span>(t -&gt; right) q.<span class="hljs-built_in">push</span>(t -&gt; right);<br>        &#125;<br>        <br>        <span class="hljs-keyword">return</span> ans;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><h3 id="时间复杂度"><a href="#时间复杂度" class="headerlink" title="时间复杂度"></a>时间复杂度</h3><p>由于树中每个节点仅会进队出队一次，所以时间复杂度是<code>O(n)</code></p>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> AcWing </tag>
            
            <tag> 二叉树 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>[AcWing]43. 不分行从上往下打印二叉树</title>
      <link href="/posts/b0ff145d2003/"/>
      <url>/posts/b0ff145d2003/</url>
      
        <content type="html"><![CDATA[<h1 id="AcWing-43-不分行从上往下打印二叉树"><a href="#AcWing-43-不分行从上往下打印二叉树" class="headerlink" title="[AcWing]43. 不分行从上往下打印二叉树"></a><a href="https://www.acwing.com/problem/content/41/">[AcWing]43. 不分行从上往下打印二叉树</a></h1><p>从上往下打印出二叉树的每个结点，同一层的结点按照从左到右的顺序打印。</p><h4 id="数据范围"><a href="#数据范围" class="headerlink" title="数据范围"></a>数据范围</h4><p>树中节点的数量 <code>[0,1000]</code>。</p><h4 id="样例"><a href="#样例" class="headerlink" title="样例"></a>样例</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">输入如下图所示二叉树[8, 12, 2, null, null, 6, null, 4, null, null, null]<br>    8<br>   / \<br>  12  2<br>     /<br>    6<br>   /<br>  4<br><br>输出：[8, 12, 2, 6, 4]<br></code></pre></td></tr></table></figure><h3 id="算法思想"><a href="#算法思想" class="headerlink" title="算法思想"></a>算法思想</h3><p>显然，这是二叉树的层序遍历，使用 <code>BFS</code>就行。</p><p>我们从根节点开始按宽度优先的顺序遍历整棵树，每次先扩展左儿子，再扩展右儿子。</p><p>这样我们会：</p><ol><li>先扩展根节点；</li><li>再依次扩展根节点的左右儿子，也就是从左到右扩展第二层节点；</li><li>再依次从左到右扩展第三层节点；</li><li>依次类推</li></ol><h3 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Definition for a binary tree node.</span><br><span class="hljs-comment"> * struct TreeNode &#123;</span><br><span class="hljs-comment"> *     int val;</span><br><span class="hljs-comment"> *     TreeNode *left;</span><br><span class="hljs-comment"> *     TreeNode *right;</span><br><span class="hljs-comment"> *     TreeNode(int x) : val(x), left(NULL), right(NULL) &#123;&#125;</span><br><span class="hljs-comment"> * &#125;;</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">printFromTopToBottom</span><span class="hljs-params">(TreeNode* root)</span> </span>&#123;<br>        vector&lt;<span class="hljs-type">int</span>&gt; res;<br>        <br>        <span class="hljs-comment">// 如果是空树，则返回空集合</span><br>        <span class="hljs-keyword">if</span>(!root) <span class="hljs-keyword">return</span> res;<br>        <br>        <span class="hljs-comment">// 开始BFS</span><br>        queue&lt;TreeNode *&gt; q;<br>        <span class="hljs-comment">// 从根节点开始扩展</span><br>        q.<span class="hljs-built_in">push</span>(root);<br>        <br>        <span class="hljs-keyword">while</span>(q.<span class="hljs-built_in">size</span>())&#123;<br>            <span class="hljs-comment">// 取出队头元素</span><br>            TreeNode * t = q.<span class="hljs-built_in">front</span>();<br>            q.<span class="hljs-built_in">pop</span>();<br>            <br>            <span class="hljs-comment">//题目要求输出序列，需要将它放入集合中</span><br>            res.<span class="hljs-built_in">push_back</span>(t -&gt; val);<br>            <br>            <span class="hljs-comment">// 拓展根节点的左右节点（如果存在的话）</span><br>            <span class="hljs-keyword">if</span>(t -&gt; left) q.<span class="hljs-built_in">push</span>(t -&gt; left);<br>            <span class="hljs-keyword">if</span>(t -&gt; right) q.<span class="hljs-built_in">push</span>(t -&gt; right);<br>        &#125;<br>        <br>        <span class="hljs-keyword">return</span> res;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><h3 id="时间复杂度"><a href="#时间复杂度" class="headerlink" title="时间复杂度"></a>时间复杂度</h3><p>BFS时每个节点仅被遍历一次，所以时间复杂度是 <code>O(n)</code>。</p>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> AcWing </tag>
            
            <tag> 二叉树 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>[AcWing]39. 对称的二叉树</title>
      <link href="/posts/49a255ffe500/"/>
      <url>/posts/49a255ffe500/</url>
      
        <content type="html"><![CDATA[<h1 id="AcWing-39-对称的二叉树"><a href="#AcWing-39-对称的二叉树" class="headerlink" title="[AcWing]39. 对称的二叉树"></a><a href="https://www.acwing.com/problem/content/38/">[AcWing]39. 对称的二叉树</a></h1><p>请实现一个函数，用来判断一棵二叉树是不是对称的。</p><p>如果一棵二叉树和它的镜像一样，那么它是对称的。</p><h4 id="数据范围"><a href="#数据范围" class="headerlink" title="数据范围"></a>数据范围</h4><p>树中节点数量 <code>[0,100]</code>。</p><h4 id="样例"><a href="#样例" class="headerlink" title="样例"></a>样例</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">如下图所示二叉树[1,2,2,3,4,4,3,null,null,null,null,null,null,null,null]为对称二叉树：<br>    1<br>   / \<br>  2   2<br> / \ / \<br>3  4 4  3<br><br>如下图所示二叉树[1,2,2,null,4,4,3,null,null,null,null,null,null]不是对称二叉树：<br>    1<br>   / \<br>  2   2<br>   \ / \<br>   4 4  3<br></code></pre></td></tr></table></figure><h3 id="算法思路"><a href="#算法思路" class="headerlink" title="算法思路"></a>算法思路</h3><p><img src="https://bu.dusays.com/2023/04/14/6439692818a87.png" alt="image-20230414225426092"></p><h3 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Definition for a binary tree node.</span><br><span class="hljs-comment"> * struct TreeNode &#123;</span><br><span class="hljs-comment"> *     int val;</span><br><span class="hljs-comment"> *     TreeNode *left;</span><br><span class="hljs-comment"> *     TreeNode *right;</span><br><span class="hljs-comment"> *     TreeNode(int x) : val(x), left(NULL), right(NULL) &#123;&#125;</span><br><span class="hljs-comment"> * &#125;;</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">dfs</span><span class="hljs-params">(TreeNode* pA, TreeNode* pB)</span></span>&#123;<br>        <span class="hljs-comment">// 如果左根节点和右根节点有一个为空，那么只有它两都为空的时候才是true，否则是false</span><br>        <span class="hljs-keyword">if</span>(!pA || !pB) <span class="hljs-keyword">return</span> !pA &amp;&amp; !pB;<br>        <span class="hljs-comment">// 左右根节点都存在的情况</span><br>        <span class="hljs-comment">// 左右节点根节点值不同，则不对称</span><br>        <span class="hljs-keyword">if</span>(pA -&gt; val != pB -&gt; val) <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        <span class="hljs-comment">// 左右根节点都存在，且值相同，比较他们的子树</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">dfs</span>(pA -&gt; left, pB -&gt; right) &amp;&amp; <span class="hljs-built_in">dfs</span>(pA -&gt; right, pB -&gt; left);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">isSymmetric</span><span class="hljs-params">(TreeNode* root)</span> </span>&#123;<br>        <span class="hljs-comment">// 如果根节点是空的那么一定是对称的（规定如此）</span><br>        <span class="hljs-keyword">if</span>(!root) <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>        <span class="hljs-comment">// 判断左右子树是不是镜像的</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">dfs</span>(root -&gt; left, root -&gt; right);<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><h3 id="时间复杂度"><a href="#时间复杂度" class="headerlink" title="时间复杂度"></a>时间复杂度</h3><p>从上到下每个节点仅被遍历一遍，所以时间复杂度是 <code>O(n)</code>。</p>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> AcWing </tag>
            
            <tag> 二叉树 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>[AcWing]38. 二叉树的镜像</title>
      <link href="/posts/f218078c7891/"/>
      <url>/posts/f218078c7891/</url>
      
        <content type="html"><![CDATA[<h1 id="AcWing-38-二叉树的镜像"><a href="#AcWing-38-二叉树的镜像" class="headerlink" title="[AcWing]38. 二叉树的镜像"></a><a href="https://www.acwing.com/problem/content/description/37/">[AcWing]38. 二叉树的镜像</a></h1><p>输入一个二叉树，将它变换为它的镜像。</p><h4 id="数据范围"><a href="#数据范围" class="headerlink" title="数据范围"></a>数据范围</h4><p>树中节点数量 <code>[0,100]</code>。</p><h4 id="样例"><a href="#样例" class="headerlink" title="样例"></a>样例</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">输入树：<br>      8<br>     / \<br>    6  10<br>   / \ / \<br>  5  7 9 11<br><br> [8,6,10,5,7,9,11,null,null,null,null,null,null,null,null] <br>输出树：<br>      8<br>     / \<br>    10  6<br>   / \ / \<br>  11 9 7  5<br><br> [8,10,6,11,9,7,5,null,null,null,null,null,null,null,null]<br></code></pre></td></tr></table></figure><h3 id="算法思路"><a href="#算法思路" class="headerlink" title="算法思路"></a>算法思路</h3><p>仔细观察发现，镜像就是：<wavy>交换左右子树，对于子树中的左右子节点也进行交换。</wavy><br>利用这个性质，抽象一下就是：递归遍历这个树，交换其<code>左右子树</code>。</p><h3 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Definition for a binary tree node.</span><br><span class="hljs-comment"> * struct TreeNode &#123;</span><br><span class="hljs-comment"> *     int val;</span><br><span class="hljs-comment"> *     TreeNode *left;</span><br><span class="hljs-comment"> *     TreeNode *right;</span><br><span class="hljs-comment"> *     TreeNode(int x) : val(x), left(NULL), right(NULL) &#123;&#125;</span><br><span class="hljs-comment"> * &#125;;</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">mirror</span><span class="hljs-params">(TreeNode* root)</span> </span>&#123;<br>        <span class="hljs-comment">// 递归到空的节点，就跳出，什么也不做</span><br>        <span class="hljs-keyword">if</span>(!root) <span class="hljs-keyword">return</span>;<br>        <span class="hljs-comment">// 交换左右子树</span><br>        <span class="hljs-built_in">mirror</span>(root -&gt; left);<br>        <span class="hljs-built_in">mirror</span>(root -&gt; right);<br>        <span class="hljs-built_in">swap</span>(root -&gt; left, root -&gt; right);<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><p>上面的代码虽然简单，但还是可以分析一下。</p><ol><li>从宏观上来看：这是个交换左右子树的过程。</li><li>从微观上来看：这是个先找到叶子结点，从下面开始交换左右节点的过程。（函数递归调用栈）</li></ol><h3 id="时间复杂度"><a href="#时间复杂度" class="headerlink" title="时间复杂度"></a>时间复杂度</h3><p>原树仅被遍历一次，所以时间复杂度是 <code>O(n)</code>。</p>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> AcWing </tag>
            
            <tag> 二叉树 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>[AcWing]37. 树的子结构</title>
      <link href="/posts/e7ce670351d7/"/>
      <url>/posts/e7ce670351d7/</url>
      
        <content type="html"><![CDATA[<h1 id="AcWing-37-树的子结构"><a href="#AcWing-37-树的子结构" class="headerlink" title="[AcWing]37. 树的子结构"></a><a href="https://www.acwing.com/problem/content/description/35/">[AcWing]37. 树的子结构</a></h1><p>输入两棵二叉树 <code>A，B</code>，判断 <code>B</code> 是不是 <code>A</code> 的子结构。</p><p>我们规定空树不是任何树的子结构。</p><h4 id="数据范围"><a href="#数据范围" class="headerlink" title="数据范围"></a>数据范围</h4><p>每棵树的节点数量 <code>[0,1000]</code>。</p><h4 id="样例："><a href="#样例：" class="headerlink" title="样例："></a>样例：</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">    8<br>   / \<br>  8   7<br> / \<br>9   2<br>   / \<br>  4   7<br></code></pre></td></tr></table></figure><p>树 <code>B</code>：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">  8<br> / \<br>9   2<br></code></pre></td></tr></table></figure><p>返回 <strong>true</strong>，因为 <code>B</code> 是 <code>A</code> 的子结构。</p><h3 id="算法思路"><a href="#算法思路" class="headerlink" title="算法思路"></a>算法思路</h3><p>代码分为两个部分：</p><ol><li>遍历树A中的所有非空节点R；</li><li>判断树A中以R为根节点的子树是不是包含和树B一样的结构，且我们从根节点开始匹配；</li></ol><p>对于第一部分，我们直接递归遍历树A即可，遇到非空节点后，就进行第二部分的判断。</p><p>对于第二部分，我们同时从根节点开始遍历两棵子树：</p><ul><li>如果树B中的节点为空，则表示当前分支是匹配的，返回true；</li><li>如果树A中的节点为空，但树B中的节点不为空，则说明不匹配，返回false；</li><li>如果两个节点都不为空，但数值不同，则说明不匹配，返回false；</li><li>否则说明当前这个点是匹配的，然后递归判断左子树和右子树是否分别匹配即可；</li></ul><h3 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Definition for a binary tree node.</span><br><span class="hljs-comment"> * struct TreeNode &#123;</span><br><span class="hljs-comment"> *     int val;</span><br><span class="hljs-comment"> *     TreeNode *left;</span><br><span class="hljs-comment"> *     TreeNode *right;</span><br><span class="hljs-comment"> *     TreeNode(int x) : val(x), left(NULL), right(NULL) &#123;&#125;</span><br><span class="hljs-comment"> * &#125;;</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">isPart</span><span class="hljs-params">(TreeNode* pA,TreeNode* pB)</span></span>&#123;<br>        <span class="hljs-comment">// 匹配成功的情况，B树已经遍历完了</span><br>        <span class="hljs-keyword">if</span>(!pB) <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>        <span class="hljs-comment">// 匹配失败的情况(pB不为空)</span><br>        <span class="hljs-comment">// B树相比A树更枝繁叶茂，或者A树和B树比较的节点值不同，则子结构匹配失败</span><br>        <span class="hljs-keyword">if</span>(!pA || pA -&gt; val != pB -&gt; val) <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        <span class="hljs-comment">// 如果A树和B树当前节点值相同，则继续匹配左右子树</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">isPart</span>(pA -&gt; left, pB -&gt; left) &amp;&amp; <span class="hljs-built_in">isPart</span>(pA -&gt; right, pB -&gt; right);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">hasSubtree</span><span class="hljs-params">(TreeNode* pRoot1, TreeNode* pRoot2)</span> </span>&#123;<br>        <span class="hljs-comment">//空树不是任何树的子结构。任何树也不是空树的子结构。</span><br>        <span class="hljs-keyword">if</span>(!pRoot1 || !pRoot2) <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        <span class="hljs-comment">// 如果是真的全匹配了，那么就是子结构</span><br>        <span class="hljs-comment">// 需要区别于 =&gt; return isPart(pRoot1,pRoot2);</span><br>        <span class="hljs-comment">// 上面这行是只要匹配错一个就直接错了，无容错空间。</span><br>        <span class="hljs-comment">// 下面这行是有容错空间的，还可以执行下下行代码</span><br>        <span class="hljs-keyword">if</span>(<span class="hljs-built_in">isPart</span>(pRoot1,pRoot2)) <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>        <span class="hljs-comment">// 出现了一个节点不匹配，使得上面的出口未跳出</span><br>        <span class="hljs-comment">// 说明需要进入A树的左右子树，继续进行匹配</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">hasSubtree</span>(pRoot1 -&gt; left, pRoot2) || <span class="hljs-built_in">hasSubtree</span>(pRoot1 -&gt; right, pRoot2);<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><wavy>这里有个注意事项：代码注释已经写出，但这里抽出来再次解释</wavy><ol><li>if(isPart(pRoot1,pRoot2)) return true;这行代码需要区别于 =&gt; return isPart(pRoot1,pRoot2);</li><li><wavy>return isPart(pRoot1,pRoot2);这行是只要匹配错一个就直接错了，无容错空间。</wavy></li><li><wavy>if(isPart(pRoot1,pRoot2)) return true;这行是有容错空间的，还可以执行if后面的代码。</wavy></li></ol><h3 id="时间复杂度"><a href="#时间复杂度" class="headerlink" title="时间复杂度"></a>时间复杂度</h3><p>最坏情况下，我们对于树A中的每个节点都要递归判断一遍，每次判断在最坏情况下需要遍历完树B中的所有节点。<br>所以时间复杂度是 <code>O(nm)</code>，其中 <code>n</code> 是树A中的节点数， <code>m</code> 是树B中的节点数。</p>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> AcWing </tag>
            
            <tag> 二叉树 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>[AcWing]19. 二叉树的下一个节点</title>
      <link href="/posts/94e11a4b82e8/"/>
      <url>/posts/94e11a4b82e8/</url>
      
        <content type="html"><![CDATA[<h1 id="AcWing-19-二叉树的下一个节点"><a href="#AcWing-19-二叉树的下一个节点" class="headerlink" title="[AcWing]19. 二叉树的下一个节点"></a><a href="https://www.acwing.com/problem/content/31/">[AcWing]19. 二叉树的下一个节点</a></h1><p>给定一棵二叉树的其中一个节点，请找出中序遍历序列的下一个节点。</p><p><strong>注意：</strong></p><ul><li>如果给定的节点是中序遍历序列的最后一个，则返回空节点;</li><li>二叉树一定不为空，且给定的节点一定不是空节点；</li></ul><!-- --><h4 id="数据范围"><a href="#数据范围" class="headerlink" title="数据范围"></a>数据范围</h4><p>树中节点数量<code>[0,100]</code>。</p><h4 id="样例"><a href="#样例" class="headerlink" title="样例"></a>样例</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">假定二叉树是：[2, 1, 3, null, null, null, null]， 给出的是值等于2的节点。<br><br>则应返回值等于3的节点。<br><br>解释：该二叉树的结构如下，2的后继节点是3。<br>  2<br> / \<br>1   3<br></code></pre></td></tr></table></figure><h3 id="算法思路"><a href="#算法思路" class="headerlink" title="算法思路"></a>算法思路</h3><wavy>中序遍历：左根右</wavy><p>情况1：有右子树</p><p>情况2：无右子树</p><p><img src="https://bu.dusays.com/2023/04/07/64301d778a9c8.png" alt="image-20230407214109154"></p><p><img src="https://bu.dusays.com/2023/04/07/6430218e1aa8c.png" alt="image-20230407215844606"></p><p><img src="https://bu.dusays.com/2023/04/07/643022e300731.png" alt="image-20230407220425944"></p><p><img src="https://bu.dusays.com/2023/04/07/64302521859e7.png" alt="image-20230407221400823"></p><h3 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Definition for a binary tree node.</span><br><span class="hljs-comment"> * struct TreeNode &#123;</span><br><span class="hljs-comment"> *     int val;</span><br><span class="hljs-comment"> *     TreeNode *left;</span><br><span class="hljs-comment"> *     TreeNode *right;</span><br><span class="hljs-comment"> *     TreeNode *father;</span><br><span class="hljs-comment"> *     TreeNode(int x) : val(x), left(NULL), right(NULL), father(NULL) &#123;&#125;</span><br><span class="hljs-comment"> * &#125;;</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function">TreeNode* <span class="hljs-title">inorderSuccessor</span><span class="hljs-params">(TreeNode* p)</span> </span>&#123;<br>        <span class="hljs-comment">// 如果它有右子树，找到右子树下的最左边的节点</span><br>        <span class="hljs-keyword">if</span>(p -&gt; right)&#123;<br>            p = p -&gt; right;<br>            <span class="hljs-keyword">while</span>(p -&gt; left) p = p -&gt; left;<br>            <span class="hljs-keyword">return</span> p;<br>        &#125;<br>        <br>        <span class="hljs-comment">// 如果它没有右子树，则寻找它的父亲节点，直到满足条件p == p -&gt; father -&gt; left</span><br>        <span class="hljs-comment">// 那么 p -&gt; father 就是 它的中序遍历的下一个节点</span><br>        <span class="hljs-keyword">while</span>(p -&gt; father &amp;&amp; p != p -&gt; father -&gt; left) p = p -&gt; father;<br>        <span class="hljs-keyword">return</span> p -&gt; father;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><h3 id="时间复杂度"><a href="#时间复杂度" class="headerlink" title="时间复杂度"></a>时间复杂度</h3><wavy>不论往上找还是往下找，总共遍历的节点数都不大于树的高度。所以时间复杂度是`O(h)`，其中 h 是树的高度。</wavy>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> AcWing </tag>
            
            <tag> 二叉树 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>[AcWing]18. 重建二叉树</title>
      <link href="/posts/c2f1d45bfc4f/"/>
      <url>/posts/c2f1d45bfc4f/</url>
      
        <content type="html"><![CDATA[<h1 id="18-重建二叉树-AcWing题库"><a href="#18-重建二叉树-AcWing题库" class="headerlink" title="18. 重建二叉树 - AcWing题库"></a><a href="https://www.acwing.com/problem/content/23/">18. 重建二叉树 - AcWing题库</a></h1><p>输入一棵二叉树前序遍历和中序遍历的结果，请重建该二叉树。</p><p><strong>注意:</strong></p><p>二叉树中每个节点的值都互不相同；<br>输入的前序遍历和中序遍历一定合法；</p><p><strong>数据范围</strong><br>树中节点数量范围<code>[0,100]</code>。</p><p><strong>样例</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs javascript">给定：<br>前序遍历是：[<span class="hljs-number">3</span>, <span class="hljs-number">9</span>, <span class="hljs-number">20</span>, <span class="hljs-number">15</span>, <span class="hljs-number">7</span>]<br>中序遍历是：[<span class="hljs-number">9</span>, <span class="hljs-number">3</span>, <span class="hljs-number">15</span>, <span class="hljs-number">20</span>, <span class="hljs-number">7</span>]<br><br>返回：[<span class="hljs-number">3</span>, <span class="hljs-number">9</span>, <span class="hljs-number">20</span>, <span class="hljs-literal">null</span>, <span class="hljs-literal">null</span>, <span class="hljs-number">15</span>, <span class="hljs-number">7</span>, <span class="hljs-literal">null</span>, <span class="hljs-literal">null</span>, <span class="hljs-literal">null</span>, <span class="hljs-literal">null</span>]<br>返回的二叉树如下所示：<br>    <span class="hljs-number">3</span><br>   / \<br>  <span class="hljs-number">9</span>  <span class="hljs-number">20</span><br>    /  \<br>   <span class="hljs-number">15</span>   <span class="hljs-number">7</span><br></code></pre></td></tr></table></figure><h3 id="算法思路"><a href="#算法思路" class="headerlink" title="算法思路"></a>算法思路</h3><p><img src="https://bu.dusays.com/2023/04/04/642c0c5373b5f.png" alt="image-20230404193839718"></p><p><img src="https://bu.dusays.com/2023/04/04/642c1c1de0caf.png" alt="image-20230404204620577"></p><h3 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Definition for a binary tree node.</span><br><span class="hljs-comment"> * struct TreeNode &#123;</span><br><span class="hljs-comment"> *     int val;</span><br><span class="hljs-comment"> *     TreeNode *left;</span><br><span class="hljs-comment"> *     TreeNode *right;</span><br><span class="hljs-comment"> *     TreeNode(int x) : val(x), left(NULL), right(NULL) &#123;&#125;</span><br><span class="hljs-comment"> * &#125;;</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <br>    unordered_map&lt;<span class="hljs-type">int</span>,<span class="hljs-type">int</span>&gt; pos;<br>    <br>    <span class="hljs-function">TreeNode * <span class="hljs-title">build</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt;&amp; preorder, vector&lt;<span class="hljs-type">int</span>&gt;&amp; inorder, <span class="hljs-type">int</span> a, <span class="hljs-type">int</span> b, <span class="hljs-type">int</span> x, <span class="hljs-type">int</span> y)</span></span>&#123;<br>        <span class="hljs-comment">// 如果区间为空（若 a == b ，比如 9 == 9，此时依旧要创建 根为9 的节点）</span><br>        <span class="hljs-keyword">if</span>(a &gt; b) <span class="hljs-keyword">return</span> <span class="hljs-literal">NULL</span>;<br>        <br>        <span class="hljs-comment">// 先构建根节点</span><br>        TreeNode * root = <span class="hljs-keyword">new</span> <span class="hljs-built_in">TreeNode</span>(preorder[a]);<br>        <span class="hljs-comment">// 找到中序遍历中根节点的位置</span><br>        <span class="hljs-type">int</span> k = pos[root -&gt; val];<br>        <span class="hljs-comment">// 递归创建左子树和右子树</span><br>        root -&gt; left = <span class="hljs-built_in">build</span>(preorder, inorder, a + <span class="hljs-number">1</span>, k - x + a, x, k - <span class="hljs-number">1</span>);<br>        root -&gt; right = <span class="hljs-built_in">build</span>(preorder, inorder, b - y + k + <span class="hljs-number">1</span>, b, k + <span class="hljs-number">1</span>, y);<br>        <span class="hljs-keyword">return</span> root;<br>    &#125;<br><br>    <span class="hljs-function">TreeNode* <span class="hljs-title">buildTree</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt;&amp; preorder, vector&lt;<span class="hljs-type">int</span>&gt;&amp; inorder)</span> </span>&#123;<br>        <span class="hljs-type">int</span> len = inorder.<span class="hljs-built_in">size</span>();<br>        <span class="hljs-comment">// 提前记录中序遍历每个元素的位置</span><br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; len; i++) pos[inorder[i]] = i;<br>        <br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">build</span>(preorder, inorder, <span class="hljs-number">0</span>, len - <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, len - <span class="hljs-number">1</span>);<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><p><strong>时间复杂度：O(n)</strong></p>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> AcWing </tag>
            
            <tag> 二叉树 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>算法-质数</title>
      <link href="/posts/9c8937f58169/"/>
      <url>/posts/9c8937f58169/</url>
      
        <content type="html"><![CDATA[<h3 id="质数-素数-和合数的定义"><a href="#质数-素数-和合数的定义" class="headerlink" title="质数(素数)和合数的定义"></a>质数(素数)和合数的定义</h3><wavy>大于1的自然数中，除了1和它本身以外不再有其他因数的自然数。</wavy><wavy>合数是指在大于1的整数中除了能被1和本身整除外，还能被其他数（0除外）整除的数。</wavy><h3 id="质数的判定：试除法"><a href="#质数的判定：试除法" class="headerlink" title="质数的判定：试除法"></a>质数的判定：试除法</h3><p>此处，给出常规代码写法<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">is_prime</span><span class="hljs-params">(<span class="hljs-type">int</span> n)</span></span>&#123;<br>    <span class="hljs-comment">// 如果这个自然数比2小，则一定不是质数</span><br>    <span class="hljs-keyword">if</span>(n &lt; <span class="hljs-number">2</span>) <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    <span class="hljs-comment">// 试除法</span><br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">2</span>; i &lt;= n; i++)<br>        <span class="hljs-comment">// 能够被其它自然数整除，不是质数</span><br>        <span class="hljs-keyword">if</span>(n % i == <span class="hljs-number">0</span>)<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    <br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br></code></pre></td></tr></table></figure></p><p>上述代码时间复杂度是O(n)。可是还能优化</p><p>例如：n = 12；i = 2; 那么 (n / i) 一定能整除 n。</p><p>12试除法试到2的时候同时可以知道6也是一个约数。</p><p>所以每次枚举的时候，只需要枚举较小的那个约数就行。</p><p>也就是说，只要 <code>i &lt;= (n / i)</code></p><p>下面给出优化过后的代码</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">is_prime</span><span class="hljs-params">(<span class="hljs-type">int</span> n)</span></span>&#123;<br>    <span class="hljs-comment">// 如果这个自然数比2小，则一定不是质数</span><br>    <span class="hljs-keyword">if</span>(n &lt; <span class="hljs-number">2</span>) <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    <span class="hljs-comment">// 优化过后的试除法</span><br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">2</span>; i &lt;= n / i; i++)<br>        <span class="hljs-comment">// 能够被其它自然数整除，不是质数</span><br>        <span class="hljs-keyword">if</span>(n % i == <span class="hljs-number">0</span>)<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    <br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>上述代码时间复杂度是O(n<sup>1/2</sup>)</p><p>主要修改了for循环里面的判断条件，没有使用<code>sqrt函数</code>，也没有使用<code>i * i &lt;= n</code>，而是使用了<code>i &lt;= n / i</code>。</p><wavy>因为使用sqrt函数慢，i * i 有爆 int 的可能</wavy><h3 id="分解质因数：试除法"><a href="#分解质因数：试除法" class="headerlink" title="分解质因数：试除法"></a>分解质因数：试除法</h3><wavy>合数可以分解质因数，质数不能分解质因数，因为质数只能等于1乘本身这种形式，而1不是质数。</wavy><p><code>算数基本定理</code> 也叫 <code>唯一分解定理</code>，主要的内容为：任何大于 <strong>1</strong> 的正整数都能 唯一 的分解为有限个质数的乘积。根据这一定理任何一个合数都可以被分解成几个质数相乘的形式。</p><p>质因数，给几个例子理解一下。</p><ul><li>1没有质因子。</li><li>5只有1个质因子，5本身。（5是质数）</li><li>6的质因子是2和3。(6 = 2 × 3)</li><li>2、4、8、16等只有1个质因子：2。（2是质数，4 =2²，8 = 2³，如此类推）</li><li>10有2个质因子：2和5。(10 = 2 × 5)</li></ul><h4 id="如何计算质因数：短除法"><a href="#如何计算质因数：短除法" class="headerlink" title="如何计算质因数：短除法"></a>如何计算质因数：短除法</h4><p><img src="https://bu.dusays.com/2023/03/31/6426f34ac5db5.png" alt="image-20230331225037221"></p><p>代码模拟如上操作：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">divide</span><span class="hljs-params">(<span class="hljs-type">int</span> n)</span></span>&#123;<br>    <span class="hljs-comment">// 枚举质因子（i一定是质数，可证明）</span><br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">2</span>; i &lt;= n / i; i++)&#123;<br>        <span class="hljs-comment">// 如果i是质因子</span><br>        <span class="hljs-keyword">if</span>(n % i == <span class="hljs-number">0</span>)&#123;<br>            <span class="hljs-comment">// 进行计数</span><br>            <span class="hljs-type">int</span> s = <span class="hljs-number">0</span>;<br>            <span class="hljs-keyword">while</span>(n % i == <span class="hljs-number">0</span>)&#123;<br>                n /= i;<br>                s++;<br>            &#125;<br>            <span class="hljs-comment">// 输出底数和计数结果</span><br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d %d\n&quot;</span>, i, s);<br>        &#125;<br>    &#125;<br>    <span class="hljs-comment">// n中最多只含有一个大于sqrt(n)的因子(可证明)</span><br>    <span class="hljs-keyword">if</span>(n &gt; <span class="hljs-number">1</span>) <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d %d\n&quot;</span>, n, <span class="hljs-number">1</span>);<br>    <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>需要注意的点：</p><wavy>假如 i 是一个合数，那么它一定可以分解成多个质因子相乘的形式，这多个质因子同时也是 n 的质因子且比 i 要小，而比 i 小的数在之前的循环过程中一定是被条件除完了的，所以 i 不可能是合数，只可能是质数。</wavy><br /><wavy>n中最多只含有一个大于sqrt(n)的因子，证明通过反证法：如果有两个大于sqrt(n)的因子，那么相乘会大于n，矛盾。</wavy><h3 id="质数筛"><a href="#质数筛" class="headerlink" title="质数筛"></a>质数筛</h3><p>埃氏筛法：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;algorithm&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">1000010</span>;<br><br><span class="hljs-type">int</span> primes[N], cnt;<br><span class="hljs-type">bool</span> st[N];<br><br><span class="hljs-comment">// 埃氏筛法</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">get_primes</span><span class="hljs-params">(<span class="hljs-type">int</span> n)</span></span>&#123;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">2</span>; i &lt;= n; i++)&#123;<br>        <span class="hljs-comment">// 如果被筛过了</span><br>        <span class="hljs-keyword">if</span>(st[i]) <span class="hljs-keyword">continue</span>;<br>        <br>        <span class="hljs-comment">// 没有被筛过，当前数是质数</span><br>        primes[cnt ++] = i;<br>        <span class="hljs-comment">// 只标记质数的倍数</span><br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j = i + i; j &lt;= n; j += i)<br>            st[j] = <span class="hljs-literal">true</span>;<br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> n;<br>    cin &gt;&gt; n;<br>    <br>    <span class="hljs-built_in">get_primes</span>(n);<br>    <br>    cout &lt;&lt; cnt &lt;&lt; endl;<br>    <br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><wavy>时间复杂度：O(nlog(logn))</wavy><p>线性筛法（欧拉筛）：</p><p>线性筛法是对朴素筛法的进一步优化，埃式筛法的缺陷在于，对于同一个合数，可能被筛选多次。为了确保每一个合数只被筛选一次，我们用<strong>每个合数的最小质因子</strong>来进行筛选</p><p>之所以被称为线性，是因为：1 ~ n 之内的任何一个合数一定会被筛掉,而且筛的时候只用最小质因子来筛,每一个数都只有一个最小质因子,所以<strong>每个数都只会被筛一次</strong>,因此线性筛法是线性的.</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;algorithm&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">1000010</span>;<br><br><span class="hljs-type">int</span> primes[N], cnt;<br><span class="hljs-type">bool</span> st[N];<br><br><span class="hljs-comment">// 欧拉筛</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">get_primes</span><span class="hljs-params">(<span class="hljs-type">int</span> n)</span></span>&#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">2</span>; i &lt;= n; i ++ )&#123;<br>        <span class="hljs-comment">// 如果没被筛过，它是质数</span><br>        <span class="hljs-keyword">if</span> (!st[i]) primes[cnt ++ ] = i;<br>        <span class="hljs-comment">// 枚举质数表里面所有的质数(表里面的质数是从小到大存储的)</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; primes[j] &lt;= n / i; j ++ )&#123;<br>            st[primes[j] * i] = <span class="hljs-literal">true</span>;<br>            <span class="hljs-keyword">if</span> (i % primes[j] == <span class="hljs-number">0</span>) <span class="hljs-keyword">break</span>;<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> n;<br>    cin &gt;&gt; n;<br>    <br>    <span class="hljs-built_in">get_primes</span>(n);<br>    <br>    cout &lt;&lt; cnt &lt;&lt; endl;<br>    <br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p><wavy>时间复杂度：O(n)</wavy><br><br /><br>1、因为primes中质数是递增的，所以如果i%primes[j]!=0代表i的最小质因数还没有找到，<strong>即prime[j]小于i的最小质因数。但并不妨碍，primes[j]是primes[j] * i的最小质因数。</strong><br>2、如果当i%prime[j]==0时，代表<strong>i的最小质因数是prime[j]，primes[j]是primes[j] * i的最小质因数。</strong><br>3、综上所述达到了每个数仅筛一次的效果，时间复杂度O ( n ) .</p>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法-数学知识 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>[AcWing]788.逆序对的数量</title>
      <link href="/posts/da4ee60f29fd/"/>
      <url>/posts/da4ee60f29fd/</url>
      
        <content type="html"><![CDATA[<h1 id="AcWing-788-逆序对的数量"><a href="#AcWing-788-逆序对的数量" class="headerlink" title="AcWing 788. 逆序对的数量"></a><a href="https://www.acwing.com/problem/content/790/">AcWing 788. 逆序对的数量</a></h1><p>给定一个长度为 n 的整数数列，请你计算数列中的逆序对的数量。</p><p>逆序对的定义如下：对于数列的第 i 个和第 j 个元素，如果满足 i &lt; j 且 a[i] &gt; a[j]，则其为一个逆序对；否则不是。</p><p><strong>输入格式</strong><br>第一行包含整数 n，表示数列的长度。</p><p>第二行包含 n 个整数，表示整个数列。</p><p><strong>输出格式</strong><br>输出一个整数，表示逆序对的个数。</p><p><strong>数据范围</strong><br>1 ≤ n ≤ 100000，<br>数列中的元素的取值范围 [1,109]。</p><p><strong>输入样例：</strong><br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">6<br>2 3 4 5 6 1<br></code></pre></td></tr></table></figure><br><strong>输出样例：</strong><br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">5<br></code></pre></td></tr></table></figure></p><h3 id="暴力解法思想"><a href="#暴力解法思想" class="headerlink" title="暴力解法思想"></a>暴力解法思想</h3><p>模仿人类的肉眼观察法，从左往右进行两个for循环的迭代。</p><h3 id="暴力解法代码"><a href="#暴力解法代码" class="headerlink" title="暴力解法代码"></a>暴力解法代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;algorithm&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">100010</span>;<br><br><span class="hljs-type">int</span> q[N];<br><br><span class="hljs-comment">// 暴力解法</span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <br>    <span class="hljs-type">int</span> n; cin &gt;&gt; n;<br>    <br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++) cin &gt;&gt; q[i];<br>    <br>    <span class="hljs-type">int</span> cnt = <span class="hljs-number">0</span>;<br>    <br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++)<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j = i + <span class="hljs-number">1</span>; j &lt; n; j++)<br>            <span class="hljs-keyword">if</span>(q[i] &gt; q[j])<br>                cnt++;<br>                <br>    cout &lt;&lt; cnt &lt;&lt; endl;<br>    <br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>如果使用暴力解法，结果是TLE，因此暴力解法不可行。</p><h3 id="较优的方案：使用归并排序进行求解"><a href="#较优的方案：使用归并排序进行求解" class="headerlink" title="较优的方案：使用归并排序进行求解"></a>较优的方案：使用归并排序进行求解</h3><h3 id="知识回顾"><a href="#知识回顾" class="headerlink" title="知识回顾"></a>知识回顾</h3><p><a href="/posts/e413468c3db1/">二路归并排序</a></p><p>在归并排序的过程中进行统计</p><p><strong>简单图示</strong></p><p><img src="https://bu.dusays.com/2023/02/16/63eda74378d04.png" alt="2023-02-16_114608"></p><h3 id="细节处理"><a href="#细节处理" class="headerlink" title="细节处理"></a>细节处理</h3><p>逆序对最多的情况：即倒序序列</p><p>此时有：</p><p><img src="https://bu.dusays.com/2023/02/16/63eda93ceccf5.png" alt="image-20230216115540983"></p><h3 id="算法代码"><a href="#算法代码" class="headerlink" title="算法代码"></a>算法代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;algorithm&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-keyword">typedef</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span> LL;<br><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">100010</span>;<br><br><span class="hljs-type">int</span> q[N], temp[N];<br><br><span class="hljs-function">LL <span class="hljs-title">merge_sort</span><span class="hljs-params">(<span class="hljs-type">int</span> l, <span class="hljs-type">int</span> r)</span></span>&#123;<br>    <br>    <span class="hljs-keyword">if</span>(l &gt;= r) <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    <br>    <span class="hljs-type">int</span> mid = l + r &gt;&gt; <span class="hljs-number">1</span>;<br>    <br>    LL res = <span class="hljs-built_in">merge_sort</span>(l, mid) + <span class="hljs-built_in">merge_sort</span>(mid + <span class="hljs-number">1</span>, r);<span class="hljs-comment">// 核心代码1</span><br>    <br>    <span class="hljs-type">int</span> i = l, j = mid + <span class="hljs-number">1</span>, k = <span class="hljs-number">0</span>;<br>    <br>    <span class="hljs-keyword">while</span>(i &lt;= mid &amp;&amp; j &lt;= r)&#123;<br>        <span class="hljs-keyword">if</span>(q[i] &lt;= q[j]) temp[k++] = q[i++];<br>        <span class="hljs-keyword">else</span> &#123;<br>            temp[k++] = q[j++];<br>            res += mid - i + <span class="hljs-number">1</span>;<span class="hljs-comment">// 核心代码2</span><br>        &#125;<br>    &#125;<br>    <br>    <span class="hljs-keyword">while</span>(i &lt;= mid) temp[k++] = q[i++];<br>    <span class="hljs-keyword">while</span>(j &lt;= r) temp[k++] = q[j++];<br>    <br>    <span class="hljs-keyword">for</span>(i = l, j = <span class="hljs-number">0</span>; i &lt;= r; i++,j++) q[i] = temp[j];<br>    <br>    <span class="hljs-keyword">return</span> res;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <br>    <span class="hljs-type">int</span> n; cin &gt;&gt; n;<br>    <br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++) cin &gt;&gt; q[i];<br>    <br>    cout &lt;&lt; <span class="hljs-built_in">merge_sort</span>(<span class="hljs-number">0</span>, n - <span class="hljs-number">1</span>) &lt;&lt; endl;<br>    <br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="技术支持"><a href="#技术支持" class="headerlink" title="技术支持"></a>技术支持</h3><p><a href="https://blog.csdn.net/u014339447/article/details/109055298">C++ 基本数据类型中int、long等整数类型取值范围及原理看这一篇就够了_猿六凯的博客-CSDN博客_c++ int long</a></p>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 排序算法 </tag>
            
            <tag> AcWing </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>二路归并排序</title>
      <link href="/posts/e413468c3db1/"/>
      <url>/posts/e413468c3db1/</url>
      
        <content type="html"><![CDATA[<h2 id="二路归并排序"><a href="#二路归并排序" class="headerlink" title="二路归并排序"></a>二路归并排序</h2><div class="note success simple"><p>本文将用图例介绍二路归并排序的过程，和经典的板子</p></div><h3 id="算法思想"><a href="#算法思想" class="headerlink" title="算法思想"></a>算法思想</h3><p>归并排序和快速排序类似，是基于分治的算法，具有两个主要阶段「划分」和「合并」。</p><ol><li><wavy>划分阶段</wavy>：通过递归不断 <strong>将数组从中点位置划分开</strong>，将长数组的排序问题转化为短数组的排序问题；</li><li><wavy>合并阶段</wavy>：划分到子数组长度为 1 时，开始向上合并，不断将 <strong>左、右两个短有序数组</strong> 合并为 <strong>一个长有序数组</strong>，直至合并至原数组时完成排序；</li></ol><p>一个简单的例子：</p><p><img src="https://bu.dusays.com/2023/02/13/63ea3c2b1a3c7.png" alt="2023-02-13_213202"></p><h3 id="算法特性"><a href="#算法特性" class="headerlink" title="算法特性"></a>算法特性</h3><ul><li><p><wavy>时间复杂度</wavy>：「划分」阶段形成的递归树花费的时间为O(logn)，每层合并的总操作花费的时间为O(n)。因此总体时间复杂度为O(nlogn)</p></li><li><p><wavy>空间复杂度</wavy>：它需要临时存储原始数据的副本，因此使用了 O(n) 的额外空间，排序过程需要借助一个额外的辅助数组O(n)大小，因此空间复杂度为O(n)。</p></li><li><p><emp>提问：为什么归并排序的空间复杂度和递归深度无关？</emp><wavy>答：因为归并排序只需要复制原始数据的一份副本，而不需要将原始数据进行划分，这样就避免了递归深度的影响。</wavy></p></li><li><p><wavy>稳定性</wavy>：稳定</p></li></ul><h3 id="算法模板"><a href="#算法模板" class="headerlink" title="算法模板"></a>算法模板</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-type">int</span> n;<br><span class="hljs-type">int</span> q[N] , w[N];<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">merge_sort</span><span class="hljs-params">(<span class="hljs-type">int</span> l , <span class="hljs-type">int</span> r)</span></span>&#123;<br>    <span class="hljs-comment">// 区间长度为1 则停止继续划分</span><br>    <span class="hljs-keyword">if</span>(l &gt;= r) <span class="hljs-keyword">return</span>;<br>    <span class="hljs-comment">// 分割中点</span><br>    <span class="hljs-type">int</span> mid = l + r &gt;&gt; <span class="hljs-number">1</span>;<br>    <span class="hljs-comment">// 递归划分</span><br>    <span class="hljs-built_in">merge_sort</span>(l , mid) ; <span class="hljs-built_in">merge_sort</span>(mid + <span class="hljs-number">1</span> , r);<br><span class="hljs-comment">// 排序合并</span><br>    <span class="hljs-type">int</span> i = l , j = mid + <span class="hljs-number">1</span> , k = <span class="hljs-number">0</span>;<br>    <span class="hljs-comment">// 在区间[l,mid]和[mid + 1, r]内</span><br>    <span class="hljs-comment">// 排序合并一部分</span><br>    <span class="hljs-keyword">while</span>(i &lt;= mid &amp;&amp; j &lt;= r)&#123;<br>        <span class="hljs-keyword">if</span>(q[i] &lt;= q[j]) w[k++] = q[i++];<br>        <span class="hljs-keyword">else</span> w[k++] = q[j++];<br>    &#125;<br>    <span class="hljs-comment">// 剩下的有序数组直接填入辅助数组内</span><br>    <span class="hljs-keyword">while</span>(i &lt;= mid) w[k++] = q[i++];<br>    <span class="hljs-keyword">while</span>(j &lt;= r) w[k++] = q[j++];<br><br>    <span class="hljs-comment">// 将辅助数组的值 覆盖原数组</span><br>    <span class="hljs-keyword">for</span>(i = l , j = <span class="hljs-number">0</span> ; j &lt; k ; i++ , j++)<br>        q[i] = w[j];<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="技术支持"><a href="#技术支持" class="headerlink" title="技术支持"></a>技术支持</h3><p><a href="https://www.hello-algo.com/chapter_sorting/merge_sort/">hello-algo</a></p><p><a href="https://www.bilibili.com/video/BV1Rt411H7UJ/">B站视频</a></p><p><a href="https://www.bilibili.com/video/BV16L411c7fn/">手写归并排序讲解视频</a></p><p><a href="https://www.acwing.com/activity/content/code/content/4550243/">我</a></p>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法模板 </tag>
            
            <tag> 排序算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>[AcWing]786.第K个数</title>
      <link href="/posts/1e599f9c3b25/"/>
      <url>/posts/1e599f9c3b25/</url>
      
        <content type="html"><![CDATA[<h1 id="AcWing-786-第K个数"><a href="#AcWing-786-第K个数" class="headerlink" title="AcWing 786.第K个数"></a><a href="https://www.acwing.com/problem/content/788/">AcWing 786.第K个数</a></h1><p>给定一个长度为 n 的整数数列，以及一个整数 k，请求出数列从小到大排序后的第 k 个数。</p><p><strong>输入格式</strong></p><p>输入共两行，第一行包含整数 n 。</p><p>第二行包含 n 个整数（所有整数均在 1∼10<sup>9</sup> 范围内），表示整个数列。</p><p><strong>输出格式</strong></p><p>输出一个整数，表示数列的第 k 小数。</p><p><strong>数据范围</strong></p><p>1 ≤ n ≤ 100000</p><p>1 ≤ k ≤ n</p><p><strong>输入样例：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">5 3<br>2 4 1 5 3<br></code></pre></td></tr></table></figure><p><strong>输出样例：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">3<br></code></pre></td></tr></table></figure><h3 id="算法思想"><a href="#算法思想" class="headerlink" title="算法思想"></a>算法思想</h3><p>由题可知，元素是基于数组存储的，于是考虑用快速排序，将元素有序化，输出对应位置的数即可。</p><h3 id="知识回顾"><a href="#知识回顾" class="headerlink" title="知识回顾"></a>知识回顾</h3><p><a href="/posts/15ae1352a338">快速排序</a></p><h3 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;algorithm&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">100010</span>;<br><br><span class="hljs-type">int</span> q[N];<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">quick_sort</span><span class="hljs-params">(<span class="hljs-type">int</span> l , <span class="hljs-type">int</span> r)</span></span>&#123;<br>    <span class="hljs-comment">// 区间大小为1，跳出循环</span><br>    <span class="hljs-keyword">if</span>(l &gt;= r) <span class="hljs-keyword">return</span>;<br>    <span class="hljs-comment">// 一开始 左边是 -1 右边是 length, pivot不取第一个元素是避免出现极端情况退化成单链表</span><br>    <span class="hljs-type">int</span> i = l - <span class="hljs-number">1</span> , j = r + <span class="hljs-number">1</span> , pivot = q[(l + r) &gt;&gt; <span class="hljs-number">1</span>];<br>    <span class="hljs-keyword">while</span>(i &lt; j)&#123;<br>        <span class="hljs-keyword">do</span> j--; <span class="hljs-keyword">while</span>(q[j] &gt; pivot);<br>        <span class="hljs-keyword">do</span> i++; <span class="hljs-keyword">while</span>(q[i] &lt; pivot);<br>        <span class="hljs-keyword">if</span>(i &lt; j) <span class="hljs-built_in">swap</span>(q[i],q[j]);<br>    &#125;<br>    <span class="hljs-built_in">quick_sort</span>(l,j);<br>    <span class="hljs-built_in">quick_sort</span>(j+<span class="hljs-number">1</span>,r);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> n , k;<br>    <br>    cin &gt;&gt; n &gt;&gt; k;<br>    <br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++) cin &gt;&gt; q[i];<br>    <br>    <span class="hljs-built_in">quick_sort</span>(<span class="hljs-number">0</span>, n - <span class="hljs-number">1</span>);<br>    <br>    cout &lt;&lt; q[k - <span class="hljs-number">1</span>] &lt;&lt; endl;<br>    <br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="技术支持"><a href="#技术支持" class="headerlink" title="技术支持"></a>技术支持</h3><p><a href="[AcWing 785. 快速排序 - AcWing](https://www.acwing.com/activity/content/code/content/4550243/">我</a></p>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 排序算法 </tag>
            
            <tag> AcWing </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>单链表的直接插入排序</title>
      <link href="/posts/f7271c1a5982/"/>
      <url>/posts/f7271c1a5982/</url>
      
        <content type="html"><![CDATA[<h2 id="单链表的直接插入排序"><a href="#单链表的直接插入排序" class="headerlink" title="单链表的直接插入排序"></a>单链表的直接插入排序</h2><div class="note success simple"><p>本文将图解LeetCode上面的一道基于单链表的直接插入排序的题</p></div><h2 id="知识回顾"><a href="#知识回顾" class="headerlink" title="知识回顾"></a>知识回顾</h2><p><a href="/posts/a1dd46ab1c25/">基于数组的直接插入排序</a></p><h3 id="来自LeetCode的一道题对链表进行直接插入排序"><a href="#来自LeetCode的一道题对链表进行直接插入排序" class="headerlink" title="来自LeetCode的一道题对链表进行直接插入排序"></a>来自LeetCode的一道题<a href="https://leetcode.cn/problems/insertion-sort-list/">对链表进行直接插入排序</a></h3><h4 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式"></a>输入格式</h4><ul><li>列表中的节点数在 <code>[1, 5000]</code>范围内</li><li><code>-5000 &lt;= Node.val &lt;= 5000</code></li></ul><h4 id="输入样例和输出结果"><a href="#输入样例和输出结果" class="headerlink" title="输入样例和输出结果"></a>输入样例和输出结果</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">输入: head = [4,2,1,3]<br>输出: [1,2,3,4]<br></code></pre></td></tr></table></figure><p>以上面这个输入为例子，下面是表示图：<br><span style="color:green">绿色</span>：代表<strong>已经排序好的有序序列的元素</strong></p><p><span style="color:brown">褐色</span>：代表<code>base</code>即待插入的元素</p><p><span style="color:red">红色</span>：代表变量关系<br><img src="https://bu.dusays.com/2023/01/14/63c2a6500414f.png" alt="image-20230114205541206"></p><h4 id="算法思路图示-表述如下："><a href="#算法思路图示-表述如下：" class="headerlink" title="算法思路图示 + 表述如下："></a>算法思路图示 + 表述如下：</h4><p><img src="https://bu.dusays.com/2023/01/14/63c2a6c171e50.png" alt="image-20230114205746805"></p><wavy>顺序情况很容易理解，因为直接插入排序就是维护一个有序序列的过程。</wavy><p>我们来分析<wavy>逆序情况</wavy>：</p><p><img src="https://bu.dusays.com/2023/01/14/63c2a6f3ce4d3.png" alt="image-20230114205837275"></p><p>画五角星的这轮，实际上是最容易提取出 task 步骤的，请关注这一轮操作。</p><p>转换成<wavy>部分代码</wavy>：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">if</span>(sortedTail -&gt; val &lt;= base -&gt; val)&#123;<br>    <span class="hljs-comment">// 顺序</span><br>    sortedTail = sortedTail -&gt; next; <span class="hljs-comment">// sortedTail 后移一位    </span><br>&#125;<span class="hljs-keyword">else</span>&#123;<br>    <span class="hljs-comment">// 逆序 （此处也是关注重点）</span><br>    <span class="hljs-comment">// pre处 是插入点（后插），需要循环找出来，因此 dummy 的重要性就体现出来了</span><br>    <span class="hljs-comment">// 毕竟在这个过程有一个极小的数，需要放在第一个位置，你怎么插？</span><br>    ListNode * pre = dummy;<br>    <span class="hljs-comment">// 过滤掉比base小的，使用 pre -&gt; next -&gt; val 的值来过滤，这样就能求出 插入点</span><br>    <span class="hljs-keyword">while</span>(pre -&gt; next -&gt; val &lt;= base -&gt; val) pre = pre -&gt; next;<br>    <span class="hljs-comment">// 现在 pre 处就是插入点了（后插）</span><br>    <span class="hljs-comment">// 插入三部曲，图示很清楚</span><br>    sortedTail -&gt; next = base -&gt; next;<br>    base -&gt; next = pre -&gt; next;<br>    pre -&gt; next = base;<br>&#125;<br></code></pre></td></tr></table></figure><p>至此，我们实现了<code>step 1</code> 和 <code>step 2</code> 了。</p><p>完整代码：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Definition for singly-linked list.</span><br><span class="hljs-comment"> * struct ListNode &#123;</span><br><span class="hljs-comment"> *     int val;</span><br><span class="hljs-comment"> *     ListNode *next;</span><br><span class="hljs-comment"> *     ListNode() : val(0), next(nullptr) &#123;&#125;</span><br><span class="hljs-comment"> *     ListNode(int x) : val(x), next(nullptr) &#123;&#125;</span><br><span class="hljs-comment"> *     ListNode(int x, ListNode *next) : val(x), next(next) &#123;&#125;</span><br><span class="hljs-comment"> * &#125;;</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function">ListNode* <span class="hljs-title">insertionSortList</span><span class="hljs-params">(ListNode* head)</span> </span>&#123;<br>        <span class="hljs-comment">// 如果头结点为空或者只有一个结点，则直接返回头结点</span><br>        <span class="hljs-keyword">if</span> (!head || !head-&gt;next) <span class="hljs-keyword">return</span> head;<br><br>        <span class="hljs-comment">// 虚拟头结点，方便操作</span><br>        ListNode * dummy = <span class="hljs-keyword">new</span> <span class="hljs-built_in">ListNode</span>(<span class="hljs-number">0</span>, head);<br>        <br>        <span class="hljs-comment">// 直接插入排序：① 默认第1个元素有序。② 第2个元素是 base</span><br>        <span class="hljs-comment">// sortedTail: 有序序列中的 最后一个结点, 在这也是元素中第1个结点</span><br>        <span class="hljs-comment">// base：第2个元素，也是待插入元素</span><br>        ListNode * sortedTail = head, * base = head -&gt; next;<br><br>        <span class="hljs-comment">// 当base不为空，则一直是排序状态</span><br>        <span class="hljs-keyword">while</span>(base)&#123;<br>            <span class="hljs-comment">// base 与 sortedTail比较</span><br>            <span class="hljs-comment">// 产生两种情况 (1. 顺序 2. 逆序)</span><br><br>            <br>            <span class="hljs-keyword">if</span>(sortedTail -&gt; val &lt;= base -&gt; val)&#123;<br>                <span class="hljs-comment">// 顺序</span><br>                sortedTail = sortedTail -&gt; next; <span class="hljs-comment">// sortedTail 后移一位    </span><br>            &#125;<span class="hljs-keyword">else</span>&#123;<br>                <span class="hljs-comment">// 逆序，执行 task 步骤</span><br>                ListNode * pre = dummy;<br>                <span class="hljs-comment">// 过滤掉比 base 小的值，pre就是插入的位置</span><br>                <span class="hljs-keyword">while</span>(pre -&gt; next -&gt; val &lt;= base -&gt; val) pre = pre -&gt; next;<br><br>                <span class="hljs-comment">// 插入三部曲</span><br>                sortedTail -&gt; next = base -&gt; next;<br>                base -&gt; next = pre -&gt; next;<br>                pre -&gt; next = base;<br>            &#125;<br>            <span class="hljs-comment">// 注意：base总是 sortedTail的next，不能写成 base = base -&gt; next</span><br>            base = sortedTail -&gt; next;<br>        &#125;<br>        <span class="hljs-comment">// 去掉dummy，返回排序后的链表</span><br>        <span class="hljs-keyword">return</span> dummy -&gt; next;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><h4 id="复杂度分析"><a href="#复杂度分析" class="headerlink" title="复杂度分析"></a>复杂度分析</h4><ol><li><p>时间复杂度：<br>对于链表而言，插入元素时只要更新相邻节点的指针即可，不需要像数组一样将插入位置后面的元素往后移动，因此插入操作的<strong>时间复杂度</strong>是<strong>O(1)</strong>，但是找到插入位置需要遍历链表中的节点，<strong>时间复杂度是O(n)</strong>，因此链表直接插入排序的总<strong>时间复杂度</strong>仍然是<strong>O(n<sup>2</sup>)</strong>。</p></li><li><p>空间复杂度：<br>整个排序过程中需要的额外辅助空间为 <code>dummy</code>，<code>sortedTail</code>，<code>base</code>，<code>pre</code>。<br>使用常数大小的额外空间，<strong>空间复杂度为O（1）</strong></p></li></ol><h3 id="技术支持"><a href="#技术支持" class="headerlink" title="技术支持"></a>技术支持</h3><p><a href="https://leetcode.cn/problems/insertion-sort-list/solution/dui-lian-biao-jin-xing-cha-ru-pai-xu-by-leetcode-s/">LeetCode官方解答</a></p>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 排序算法 </tag>
            
            <tag> LeetCode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>堆排序</title>
      <link href="/posts/9ec0dc442f72/"/>
      <url>/posts/9ec0dc442f72/</url>
      
        <content type="html"><![CDATA[<h2 id="堆排序"><a href="#堆排序" class="headerlink" title="堆排序"></a>堆排序</h2><div class="note success simple"><p>本文将介绍数据结构堆，以及堆排序</p></div><h3 id="堆"><a href="#堆" class="headerlink" title="堆"></a>堆</h3><p>堆是一种<wavy>完全二叉树</wavy>，分为<wavy>小根堆</wavy>和<wavy>大根堆</wavy>；以大根堆为例：根≥儿子。<br>通常堆是通过<strong>一维数组</strong>来实现的。</p><p><wavy>堆的存储方式</wavy>：顺序存储（因为要支持随机索引）</p><p><emp>在数组起始下标为0的情况下</emp>：</p><p>如果根节点的编号是 x 的话，它的左儿子编号是 2x + 1，右儿子编号是 2x + 2。</p><p>一个子节点是 p 的话，它的父节点是 ⌊ (p - 1) / 2 ⌋。</p><p><emp>在数组起始下标为1的情况下</emp>：</p><p>如果根节点的编号是 x 的话，它的左儿子编号是 2x，右儿子编号是 2x + 1。</p><p>一个子节点是 p 的话，它的父节点是 ⌊ p / 2 ⌋。</p><div class="tip blue"><p>在数组起始下标为1的情况下</p></div><p><wavy>大根堆的创建</wavy>：</p><p><img src="https://bu.dusays.com/2023/02/01/63da191470816.png" alt="image-20230201135015855"></p><p><img src="https://bu.dusays.com/2023/02/01/63da1cc17a06d.png" alt="image-20230201160315416"></p><p><wavy>大根堆的删除（堆顶）</wavy>：</p><p>将堆的最后一个元素覆盖堆顶元素，堆的大小减1。（最后一个元素很好删）</p><p>然后，从堆顶开始 down 一遍。</p><h3 id="算法思想"><a href="#算法思想" class="headerlink" title="算法思想"></a>算法思想</h3><p>使用大根堆，基于大根堆的操作基础；堆顶元素总是最大值，每次将堆顶元素与堆中最后一个元素互换，将堆的大小减1，然后 <code>down(1)</code>维护大根堆。反复如此，直到 n 个元素，执行 n - 1 次这样的操作，排序完成。</p><h3 id="算法特性"><a href="#算法特性" class="headerlink" title="算法特性"></a>算法特性</h3><p><wavy>时间复杂度</wavy>：初始化建堆时间是O(n)，更改堆元素后重建堆时间是O(nlogn)，但一般认为全部情况都是O(nlogn)</p><p><wavy>空间复杂度</wavy>：O(1)</p><p><wavy>稳定性</wavy>：不稳定</p><h3 id="算法模板"><a href="#算法模板" class="headerlink" title="算法模板"></a>算法模板</h3><p>需要注意的是，需要维护一个变量 <code>sz</code>，它代表堆的容量</p><p><emp>在数组起始下标为1的情况下</emp>：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">// 维护以 u 为根的堆</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">down</span><span class="hljs-params">(<span class="hljs-type">int</span> u)</span></span>&#123;<br>    <span class="hljs-type">int</span> t = u;<br>    <span class="hljs-keyword">if</span>(u * <span class="hljs-number">2</span> &lt;= sz &amp;&amp; q[u * <span class="hljs-number">2</span>] &gt; q[t]) t = u * <span class="hljs-number">2</span>;<br>    <span class="hljs-keyword">if</span>(u * <span class="hljs-number">2</span> + <span class="hljs-number">1</span> &lt;= sz &amp;&amp; q[u * <span class="hljs-number">2</span> + <span class="hljs-number">1</span>] &gt; q[t]) t = u * <span class="hljs-number">2</span> + <span class="hljs-number">1</span>;<br>    <span class="hljs-comment">// 如果 t 和 u 不相等，说明有 儿子比父亲大，应该进行交换，然后进行维护之前儿子在的位置</span><br>    <span class="hljs-keyword">if</span>(u != t)&#123;<br>        <span class="hljs-built_in">swap</span>(q[t],q[u]);<br>        <span class="hljs-comment">// 如果是上层发生改变，可能会牵涉到下层，因此需要递归down下去</span><br>        <span class="hljs-built_in">down</span>(t);<br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">heap_sort</span><span class="hljs-params">()</span></span>&#123;<br>    sz = n;<br>    <span class="hljs-comment">// 从有分支的结点开始down</span><br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = n / <span class="hljs-number">2</span> ; i ; i--) <span class="hljs-built_in">down</span>(i);<br><br>    <span class="hljs-comment">// down完之后堆顶是最大的元素, 利用大根堆性质，进行n - 1次与数组最后一个元素交换可以进行排序</span><br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span> ; i &lt; n - <span class="hljs-number">1</span> ; i++)&#123;<br>        <span class="hljs-built_in">swap</span>(q[<span class="hljs-number">1</span>],q[sz]);<br>        sz--;<br>        <span class="hljs-built_in">down</span>(<span class="hljs-number">1</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="技术支持"><a href="#技术支持" class="headerlink" title="技术支持"></a>技术支持</h3><p><a href="https://oi-wiki.org/basic/heap-sort/">Wiki</a><br><a href="https://www.acwing.com/activity/content/code/content/4550243/">我</a></p>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法模板 </tag>
            
            <tag> 排序算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>快速排序</title>
      <link href="/posts/15ae1352a338/"/>
      <url>/posts/15ae1352a338/</url>
      
        <content type="html"><![CDATA[<h2 id="快速排序"><a href="#快速排序" class="headerlink" title="快速排序"></a>快速排序</h2><div class="note success simple"><p>本文将介绍王道书上的快排模板和一种不同于老教材的快排模板，图示是根据考研书上画的</p></div><h3 id="算法思想"><a href="#算法思想" class="headerlink" title="算法思想"></a>算法思想</h3><p>快速排序的核心操作为「哨兵划分」，其目标为：<wavy>选取数组某个元素为基准数，将所有小于基准数的元素移动至其左边，大于基准数的元素移动至其右边</wavy>。「哨兵划分」执行完毕后，原数组被划分成两个部分，即 <wavy>左子数组</wavy> 和 <wavy>右子数组</wavy>，且满足 <wavy>左子数组任意元素 ＜ 基准数 ＜ 右子数组任意元素</wavy>。因此，接下来我们只需要排序两个子数组即可，再将两个子数组执行「哨兵划分」……；直至子数组长度为1时<wavy>终止递归</wavy>。</p><p>一个简单的例子：</p><p><img src="https://bu.dusays.com/2023/01/24/63cf7ee962723.png" alt="image-20230124144637959"></p><p>以上是快速排序第一轮的模拟。</p><h3 id="算法特性"><a href="#算法特性" class="headerlink" title="算法特性"></a>算法特性</h3><p><wavy>时间复杂度</wavy>：</p><ul><li>快速排序的<wavy>平均情况下的运行时间与其最佳情况下的运行时间很接近都是O(nlogn)</wavy></li><li>快速排序的运行时间与划分是否对称有关，<wavy>快速排序的最坏情况发生在两个区域分别包含 n - 1 个元素和 0 个元素时</wavy>，这种最大限度的不对称若发生在每层递归上，本应是二叉树的递归树退化成一叉树（单链表），<wavy>即对应于初始排序表基本有序或基本逆序时，就得到最坏情况下的时间复杂度O(n<sup>2</sup>)</wavy>。</li></ul><wavy>空间复杂度</wavy>：由于快速排序是递归的，<wavy>需要借助一个递归工作栈</wavy><ul><li>最好情况：O(logn) （二叉树）</li><li>平均情况：O(logn) （二叉树）</li><li>最坏情况：由于要进行 n - 1 次递归调用，所以栈的深度为O(n)</li></ul><wavy>稳定性</wavy>：不稳定<br><br><div class="tip "><p>在快速排序算法中，每趟排序后会将枢轴（基准）元素放到其最终位置上。（考研写法） </p></div><h3 id="快速排序为什么快？"><a href="#快速排序为什么快？" class="headerlink" title="快速排序为什么快？"></a>快速排序为什么快？</h3><p>从命名能够看出，快速排序在效率方面一定“有两把刷子”。快速排序的平均时间复杂度虽然与「归并排序」和「堆排序」一致，但实际 <strong>效率更高</strong>，这是因为：</p><ul><li><strong>出现最差情况的概率很低</strong>：虽然快速排序的最差时间复杂度为 O(n<sup>2</sup>) ，不如归并排序，但绝大部分情况下，快速排序可以达到 O(nlogn) 的复杂度。</li><li><strong>缓存使用效率高</strong>：哨兵划分操作时，将整个子数组加载入缓存中，访问元素效率很高。而诸如「堆排序」需要跳跃式访问元素，因此不具有此特性。</li><li><strong>复杂度的常数系数低</strong>：在提及的三种算法中，快速排序的 <strong>比较</strong>、<strong>赋值</strong>、<strong>交换</strong> 三种操作的总体数量最少（类似于「插入排序」快于「冒泡排序」的原因）。</li></ul><h3 id="算法模板1（背诵适合面试）"><a href="#算法模板1（背诵适合面试）" class="headerlink" title="算法模板1（背诵适合面试）"></a>算法模板1（背诵适合面试）</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">quick_sort</span><span class="hljs-params">(<span class="hljs-type">int</span> l , <span class="hljs-type">int</span> r)</span></span>&#123;<br>    <span class="hljs-comment">// 区间大小为1，跳出循环</span><br>    <span class="hljs-keyword">if</span>(l &gt;= r) <span class="hljs-keyword">return</span>;<br>    <span class="hljs-comment">// 一开始 左边是 -1 右边是 length, pivot不取第一个元素是避免出现极端情况退化成单链表</span><br>    <span class="hljs-type">int</span> i = l - <span class="hljs-number">1</span> , j = r + <span class="hljs-number">1</span> , pivot = q[(l + r) &gt;&gt; <span class="hljs-number">1</span>];<br>    <span class="hljs-keyword">while</span>(i &lt; j)&#123;<br>        <span class="hljs-keyword">do</span> j--; <span class="hljs-keyword">while</span>(q[j] &gt; pivot);<br>        <span class="hljs-keyword">do</span> i++; <span class="hljs-keyword">while</span>(q[i] &lt; pivot);<br>        <span class="hljs-keyword">if</span>(i &lt; j) <span class="hljs-built_in">swap</span>(q[i],q[j]);<br>    &#125;<br>    <span class="hljs-built_in">quick_sort</span>(l,j);<br>    <span class="hljs-built_in">quick_sort</span>(j+<span class="hljs-number">1</span>,r);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="算法模板2（考研版本）"><a href="#算法模板2（考研版本）" class="headerlink" title="算法模板2（考研版本）"></a>算法模板2（考研版本）</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">partition</span><span class="hljs-params">(<span class="hljs-type">int</span> i, <span class="hljs-type">int</span> j)</span></span>&#123;<br>    <span class="hljs-type">int</span> pivot = q[i];<br>    <span class="hljs-keyword">while</span>(i &lt; j)&#123;<br>        <span class="hljs-keyword">while</span>(i &lt; j &amp;&amp; q[j] &gt;= pivot) --j;<br>        q[i] = q[j];<br>        <span class="hljs-keyword">while</span>(i &lt; j &amp;&amp; q[i] &lt;= pivot) ++i;<br>        q[j] = q[i];<br>    &#125;<br>    q[i] = pivot;<br>    <span class="hljs-keyword">return</span> i;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">quick_sort</span><span class="hljs-params">(<span class="hljs-type">int</span> l, <span class="hljs-type">int</span> r)</span></span>&#123;<br>    <span class="hljs-keyword">if</span>(l &lt; r)&#123;<br>        <span class="hljs-type">int</span> pivot_pos = <span class="hljs-built_in">partition</span>(l,r);<br>        <span class="hljs-built_in">quick_sort</span>(l, pivot_pos - <span class="hljs-number">1</span>);<br>        <span class="hljs-built_in">quick_sort</span>(pivot_pos + <span class="hljs-number">1</span>, r);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>以上两种模板，各有缺点：</p><ul><li><wavy>第一种模板的pivot最终不一定是在分界点上，而教材上的pivot最终一定是在分界点上的</wavy>    </li><li><wavy>第二种模板的分界点取每个区间的第一个元素作为pivot，若被卡数据，比如：顺序或逆序，让二叉树退化成一叉链表。这样就会TLE(Time Limit Exceeded)</wavy></li></ul><p>第一种适合算法模板（短），第二种适合考研写法。</p><h3 id="拓展"><a href="#拓展" class="headerlink" title="拓展"></a>拓展</h3><p><a href="/posts/1e599f9c3b25">第k个数</a></p><h3 id="技术支持"><a href="#技术支持" class="headerlink" title="技术支持"></a>技术支持</h3><p><a href="https://www.hello-algo.com/chapter_sorting/quick_sort/">hello-algo</a></p><p><a href="https://www.acwing.com/activity/content/code/content/4550243/">我</a></p>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法模板 </tag>
            
            <tag> 排序算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>希尔排序</title>
      <link href="/posts/0f47dab8531e/"/>
      <url>/posts/0f47dab8531e/</url>
      
        <content type="html"><![CDATA[<h2 id="希尔排序"><a href="#希尔排序" class="headerlink" title="希尔排序"></a>希尔排序</h2><div class="note success simple"><p>本文将用图例介绍希尔排序的过程，和经典的优化板子</p></div><h3 id="算法思想"><a href="#算法思想" class="headerlink" title="算法思想"></a>算法思想</h3><p>对 n 个序列进行分组，每组内的下标是等差数列，其公差就是增量，每一组的等差数列的公差相等，然后对每组序列进行<wavy>直接插入排序</wavy>，然后将增量缩小（例如：n/2、n/4、n/8,…）<wavy>直至每组元素只有1个</wavy>，然后再进行一次直接插入排序。</p><div class="tip "><p>直接插入排序对于部分有序的序列效率很高</p></div><p>一个简单的例子：</p><p><img src="https://bu.dusays.com/2023/01/24/63cf49a9cd35d.png" alt="image-20230124105921140"></p><h3 id="算法特性"><a href="#算法特性" class="headerlink" title="算法特性"></a>算法特性</h3><p><wavy>时间复杂度</wavy>：希尔排序的平均时间复杂度和最坏时间复杂度与间距序列的选取（就是间距如何减小到 1）有关，比如「间距每次除以 3」的希尔排序的时间复杂度是O(n<sup>3/2</sup>)</p><p><wavy>空间复杂度</wavy>：O（1）</p><p><wavy>稳定性</wavy>：不稳定</p><h3 id="算法模板"><a href="#算法模板" class="headerlink" title="算法模板"></a>算法模板</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">shell_sort</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-comment">// 分组</span><br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> d = n / <span class="hljs-number">3</span> ; d ; d = d == <span class="hljs-number">2</span> ? <span class="hljs-number">1</span> : d / <span class="hljs-number">3</span>)&#123;<br>        <span class="hljs-comment">// start是每组的第一个元素的位置</span><br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> start = <span class="hljs-number">0</span> ; start &lt; d ; start++)&#123;<br>            <span class="hljs-comment">// 直接插入排序(找到组内第二个元素)</span><br>            <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = start + d ; i &lt; n ; i += d)&#123;<br>                <span class="hljs-type">int</span> base = q[i] , j = i;<br><br>                <span class="hljs-keyword">while</span>(j &gt; start &amp;&amp; q[j - d] &gt; base)&#123;<br>                    q[j] = q[j - d];<br>                    j -= d;<br>                &#125;<br>                q[j] = base;<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="技术支持"><a href="#技术支持" class="headerlink" title="技术支持"></a>技术支持</h3><p><a href="https://www.acwing.com/activity/content/code/content/4550243/">我</a></p><p><a href="https://oi-wiki.org/basic/shell-sort/">Wiki</a></p>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法模板 </tag>
            
            <tag> 排序算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>简单选择排序</title>
      <link href="/posts/1421240f22ac/"/>
      <url>/posts/1421240f22ac/</url>
      
        <content type="html"><![CDATA[<h2 id="简单选择排序"><a href="#简单选择排序" class="headerlink" title="简单选择排序"></a>简单选择排序</h2><div class="note success simple"><p>本文将用图例介绍冒泡排序的过程，和经典的优化板子</p></div><h3 id="算法思想"><a href="#算法思想" class="headerlink" title="算法思想"></a>算法思想</h3><p>每一趟（如第 i 趟）在后面 n - i + 1（i从1开始）个待排序元素中选取最小的元素，作为有序子序列的第 i 个元素，直到 n - 1 趟做完，只剩最后一个元素时，就不需要再选了。</p><p>一个简单的例子：</p><p><img src="https://bu.dusays.com/2023/01/22/63cd4bd4ee6e5.png" alt="image-20230122222342741"></p><h3 id="算法特性"><a href="#算法特性" class="headerlink" title="算法特性"></a>算法特性</h3><p><wavy>时间复杂度</wavy>：雷打不动O(n<sup>2</sup>)，堪称经典内排序里面最弱的</p><p><wavy>空间复杂度</wavy>：O(1)</p><p><wavy>稳定性</wavy>：不稳定</p><h3 id="算法模板"><a href="#算法模板" class="headerlink" title="算法模板"></a>算法模板</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">select_sort</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-comment">// n个元素，比 n - 1 趟</span><br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span> ; i &lt; n - <span class="hljs-number">1</span> ; i++)&#123;<br>        <span class="hljs-type">int</span> k = i; <span class="hljs-comment">// 记录最小的那个元素下标，一开始默认第一个</span><br>        <br>        <span class="hljs-comment">// 从第二个开始找，找到最后，与记录的最小值一一比较</span><br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j = i + <span class="hljs-number">1</span> ; j &lt; n ; j++)&#123;<br>            <span class="hljs-comment">// 如果出现更小的就替换给 k</span><br>            <span class="hljs-keyword">if</span>(q[j] &lt; q[k])<br>                k = j;<br>        &#125;<br>        <span class="hljs-comment">// 最小的元素和下标为i的元素交换</span><br>        <span class="hljs-built_in">swap</span>(q[i],q[k]);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="技术支持"><a href="#技术支持" class="headerlink" title="技术支持"></a>技术支持</h3><p><a href="https://www.acwing.com/activity/content/code/content/4550243/">我</a></p>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法模板 </tag>
            
            <tag> 排序算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>冒泡排序</title>
      <link href="/posts/085c695cb1f5/"/>
      <url>/posts/085c695cb1f5/</url>
      
        <content type="html"><![CDATA[<h2 id="冒泡排序"><a href="#冒泡排序" class="headerlink" title="冒泡排序"></a>冒泡排序</h2><div class="note success simple"><p>本文将用图例介绍冒泡排序的过程，和经典的优化板子</p></div><h3 id="算法思想"><a href="#算法思想" class="headerlink" title="算法思想"></a>算法思想</h3><p><strong>从后往前</strong>（或从前往后），两两比较相邻元素的值，<strong>若为逆序</strong>（q[i - 1] &gt; q[i]），<strong>则交换它们</strong>，直到序列比较完。</p><p>一个简单的例子：</p><p><img src="https://bu.dusays.com/2023/01/22/63ccdf3d64573.png" alt="image-20230122144353880"></p><h3 id="算法特性"><a href="#算法特性" class="headerlink" title="算法特性"></a>算法特性</h3><p><wavy>时间复杂度</wavy>：</p><ul><li>最好情况：O(n)</li><li>平均情况：O(n<sup>2</sup>)</li><li>最坏情况：O(n<sup>2</sup>)</li></ul><p><wavy>空间复杂度</wavy>：O(1)</p><p><wavy>稳定性</wavy>：稳定</p><h3 id="算法模板"><a href="#算法模板" class="headerlink" title="算法模板"></a>算法模板</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">bubble_sort</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-comment">// n个元素，比 n - 1 趟</span><br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span> ; i &lt; n - <span class="hljs-number">1</span> ; i++)&#123;<br>        <span class="hljs-comment">// 优化，这样可以当元素有序时，一趟就退出</span><br>        <span class="hljs-comment">// 有没有交换过</span><br>        <span class="hljs-type">bool</span> has_swap = <span class="hljs-literal">false</span>;<br>        <span class="hljs-comment">// 从后往前枚举，由于比较的是相邻元素，j到 i + 1 就行</span><br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j = n - <span class="hljs-number">1</span> ; j &gt; i ; j--)&#123;<br>            <span class="hljs-comment">// 逆序</span><br>            <span class="hljs-keyword">if</span>(q[j - <span class="hljs-number">1</span>] &gt; q[j])&#123;<br>                <span class="hljs-built_in">swap</span>(q[j - <span class="hljs-number">1</span>], q[j]);<br>                has_swap = <span class="hljs-literal">true</span>;<br>            &#125;<br>        &#125;<br>        <span class="hljs-comment">// 如果没有交换过，代表整个序列在第一趟检测出有序，直接退出排序</span><br>        <span class="hljs-keyword">if</span>(!has_swap) <span class="hljs-keyword">break</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="技术支持"><a href="#技术支持" class="headerlink" title="技术支持"></a>技术支持</h3><p><a href="https://www.acwing.com/activity/content/code/content/4550243/">我</a></p>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法模板 </tag>
            
            <tag> 排序算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>折半查找插入排序</title>
      <link href="/posts/122fd3617f53/"/>
      <url>/posts/122fd3617f53/</url>
      
        <content type="html"><![CDATA[<h2 id="折半查找插入排序"><a href="#折半查找插入排序" class="headerlink" title="折半查找插入排序"></a>折半查找插入排序</h2><div class="note success simple"><p>本文将结合 <code>二分查找</code> 和 <code>直接插入排序</code> 的知识点，介绍折半查找插入排序</p></div><emp>你可以通过点击以往文章回顾知识点:</emp><h3 id="点击-gt-二分查找"><a href="#点击-gt-二分查找" class="headerlink" title="点击 -&gt; 二分查找"></a>点击 -&gt; <a href="/posts/1893f995f535/">二分查找</a></h3><h3 id="点击-gt-直接插入排序"><a href="#点击-gt-直接插入排序" class="headerlink" title="点击 -&gt; 直接插入排序"></a>点击 -&gt; <a href="/posts/15cc1348375f/">直接插入排序</a></h3><h3 id="算法思想"><a href="#算法思想" class="headerlink" title="算法思想"></a>算法思想</h3><p>在维护一个有序序列的过程中，从左往右看，使用二分查找出第一个比 <code>base</code> 大的数的位置 <code>l</code>，然后将元素后移，在 <code>l</code> 处腾出空间，将 <code>base</code> 插入。</p><p>一个简单的例子：</p><p><img src="https://bu.dusays.com/2023/01/22/63cd56119d7f3.png" alt="image-20230122232426185"></p><h3 id="算法模板"><a href="#算法模板" class="headerlink" title="算法模板"></a>算法模板</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">binary_insert_sort</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-comment">// 维护一个有序序列</span><br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">1</span> ; i &lt; n ; i++)&#123;<br>        <span class="hljs-comment">// 相邻元素顺序情况</span><br>        <span class="hljs-keyword">if</span>(q[i - <span class="hljs-number">1</span>] &lt;= q[i]) <span class="hljs-keyword">continue</span>;<br>        <span class="hljs-comment">// 相邻元素逆序情况</span><br>        <span class="hljs-comment">// 二分，从左往右找到第一个大于 base 的数</span><br>        <span class="hljs-type">int</span> l = <span class="hljs-number">0</span>, r = i, base = q[i];<br>        <span class="hljs-keyword">while</span>(l &lt; r)&#123;<br>            <span class="hljs-type">int</span> mid = l + r &gt;&gt; <span class="hljs-number">1</span>;<br>            <span class="hljs-keyword">if</span>(q[mid] &gt; base) r = mid;<br>            <span class="hljs-keyword">else</span> l = mid + <span class="hljs-number">1</span>;<br>        &#125;<br>        <span class="hljs-comment">// 将 l 空出来</span><br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j = i - <span class="hljs-number">1</span> ; j &gt;= l ; j--)<br>            q[j + <span class="hljs-number">1</span>] = q[j]; <span class="hljs-comment">// 元素后移，空出 l 这个位置</span><br>        <span class="hljs-comment">// 插入</span><br>        q[l] = base;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="折半查找插入排序-VS-直接插入排序"><a href="#折半查找插入排序-VS-直接插入排序" class="headerlink" title="折半查找插入排序  VS  直接插入排序"></a>折半查找插入排序  VS  直接插入排序</h3><p><wavy>时间复杂度</wavy>：</p><ul><li>最好情况：O(n)</li><li>平均情况：理论上来说，折半查找插入排序是比直接插入排序要快的，毕竟是直接插入排序的优化版本。折半查找插入排序通过二分来优化比较次数，时间复杂度是O(nlogn)，但是移动次数并没有优化，因此时间复杂度还是O(n<sup>2</sup>)与直接插入排序一样。</li><li>最坏情况：O(n<sup>2</sup>)</li></ul><p><wavy>空间复杂度</wavy>：O(1)(都是常数额外辅助空间)</p><p><wavy>稳定性</wavy>：稳定（相同大小元素不改变相对位置）</p><h3 id="技术支持"><a href="#技术支持" class="headerlink" title="技术支持"></a>技术支持</h3><p><a href="https://www.acwing.com/problem/content/787/">我自己</a></p>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法模板 </tag>
            
            <tag> 排序算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>二分查找</title>
      <link href="/posts/1893f995f535/"/>
      <url>/posts/1893f995f535/</url>
      
        <content type="html"><![CDATA[<h2 id="二分查找"><a href="#二分查找" class="headerlink" title="二分查找"></a>二分查找</h2><div class="note success simple"><p>本文将使用画图来理解二分，并且介绍了经典的二分查找板子，例题。</p></div><p>能够使用二分查找的两个前提：</p><ul><li><wavy>二分查找仅使用于数组</wavy>，这样才能通过判断大小关系来排除一半的搜索区间；</li><li><wavy>要求输入数据是有序的</wavy>，而在链表中使用效率很低，因为其在循环中需要跳跃式（非连续地）访问元素。</li></ul><h3 id="整数二分"><a href="#整数二分" class="headerlink" title="整数二分"></a>整数二分</h3><p>根据上面两个前提，很多人认为二分的本质是<emp>单调性</emp>，但实际上并不是的，二分的本质是<emp>边界</emp>。</p><p>假设给定一个区间，在这个区间上给定了某种性质，使得在右半区间满足这个性质，左半区间不满足这个性质，那么二分既能够查找左半区间的边界，也可以寻找右半区间的边界。</p><p><img src="https://bu.dusays.com/2023/01/18/63c806098d17f.png" alt="image-20230118203344229"></p><p>现在我们来看一下 <span style="color:red">左半区间二分查找：</span></p><p><img src="https://bu.dusays.com/2023/01/18/63c8060ee4081.png" alt="image-20230118213519331"></p><p>再看一下<span style="color:green">右半区间二分查找：</span></p><p><img src="https://bu.dusays.com/2023/01/18/63c8061474bb0.png" alt="image-20230118214805016"></p><p>那么这里有一个问题，<div class="tip "><p>为什么两种二分，mid的写法有一个 + 1有一个并没有（对应向上取整和向下取整）</p></div></p><p>下面举一个例子：</p><p>看一下为什么要加上1</p><p><img src="https://bu.dusays.com/2023/01/18/63c8061bdaa0f.png" alt="image-20230118221434740"></p><h3 id="整数二分实战思想"><a href="#整数二分实战思想" class="headerlink" title="整数二分实战思想"></a>整数二分实战思想</h3><p>如果你想让<wavy>答案在右边区间</wavy>，<wavy>那么你得让mid满足左区间的性质</wavy>，反之,可求左区间</p><h3 id="整数二分实战模板"><a href="#整数二分实战模板" class="headerlink" title="整数二分实战模板"></a>整数二分实战模板</h3><p>二分模板一共有两个，分别适用于不同情况。</p><h4 id="版本1"><a href="#版本1" class="headerlink" title="版本1"></a>版本1</h4><p>其更新操作是r = mid，计算mid时不需要加1。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">binarySearch</span><span class="hljs-params">(<span class="hljs-type">int</span> l, <span class="hljs-type">int</span> r)</span></span>&#123;<br>    <span class="hljs-keyword">while</span>(l &lt; r)&#123;<br>        <span class="hljs-type">int</span> mid = l + r &gt;&gt; <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-built_in">check</span>(mid)) r = mid;<br>        <span class="hljs-keyword">else</span> l = mid + <span class="hljs-number">1</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> l;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://bu.dusays.com/2023/01/18/63c8061f58820.png" alt="image-20230118224520428"></p><h4 id="版本2"><a href="#版本2" class="headerlink" title="版本2"></a>版本2</h4><p>其更新操作是l = mid，此时为了防止死循环，计算mid时需要加1。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">binarySearch</span><span class="hljs-params">(<span class="hljs-type">int</span> l, <span class="hljs-type">int</span> r)</span></span>&#123;<br>    <span class="hljs-keyword">while</span>(l &lt; r)&#123;<br>        <span class="hljs-type">int</span> mid = l + r + <span class="hljs-number">1</span> &gt;&gt; <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-built_in">check</span>(mid)) l = mid;<br>        <span class="hljs-keyword">else</span> r = mid - <span class="hljs-number">1</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://bu.dusays.com/2023/01/18/63c8062229fdc.png" alt="image-20230118224158712"></p><h3 id="复杂度分析"><a href="#复杂度分析" class="headerlink" title="复杂度分析"></a>复杂度分析</h3><p><emp>时间复杂度：O(logn)</emp>（折半查找树）</p><p><emp>空间复杂度：O(1)</emp>（使用常数大小空间 l, r, mid)</p><div class="tip warning"><p>大数越界处理</p></div><p>当数组长度很大时，加法 (l + r) 的结果可能超出 <code>int</code> 类型的取值范围。可换为：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-type">int</span> mid = l + r &gt;&gt; <span class="hljs-number">1</span>;<br><span class="hljs-comment">// 换成</span><br><span class="hljs-type">int</span> mid = l + (r - l) &gt;&gt; <span class="hljs-number">1</span>;<br></code></pre></td></tr></table></figure><h3 id="整数二分经典例题"><a href="#整数二分经典例题" class="headerlink" title="整数二分经典例题"></a>整数二分经典例题</h3><h4 id="AcWing789-数的范围"><a href="#AcWing789-数的范围" class="headerlink" title="AcWing789.数的范围"></a><a href="https://www.acwing.com/problem/content/791/">AcWing789.数的范围</a></h4><h4 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h4><p>给定一个按照升序排列的长度为 n 的整数数组，以及 q 个查询。</p><p>对于每个查询，返回一个元素 k 的起始位置和终止位置（位置从 0 开始计数）。</p><p>如果数组中不存在该元素，则返回 <code>-1 -1</code>。</p><h4 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式"></a>输入格式</h4><p>第一行包含整数 n 和 q，表示数组长度和询问个数。</p><p>第二行包含 n 个整数（均在 1∼10000 范围内），表示完整数组。</p><p>接下来 q 行，每行包含一个整数 k，表示一个询问元素。</p><h4 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式"></a>输出格式</h4><p>共 q 行，每行包含两个整数，表示所求元素的起始位置和终止位置。</p><p>如果数组中不存在该元素，则返回 <code>-1 -1</code>。</p><h4 id="数据范围"><a href="#数据范围" class="headerlink" title="数据范围"></a>数据范围</h4><p>1 ≤ n ≤ 100000<br>1 ≤ q ≤ 10000<br>1 ≤ k ≤ 10000</p><h4 id="输入样例："><a href="#输入样例：" class="headerlink" title="输入样例："></a>输入样例：</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">6 3<br>1 2 2 3 3 4<br>3<br>4<br>5<br></code></pre></td></tr></table></figure><h4 id="输出样例："><a href="#输出样例：" class="headerlink" title="输出样例："></a>输出样例：</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">3 4<br>5 5<br>-1 -1<br></code></pre></td></tr></table></figure><h4 id="代码："><a href="#代码：" class="headerlink" title="代码："></a>代码：</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;algorithm&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">100010</span>;<br><br><span class="hljs-type">int</span> n, Q; <span class="hljs-comment">// 整数个数、询问个数</span><br><span class="hljs-type">int</span> q[N];<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <br>    cin &gt;&gt; n &gt;&gt; Q;<br>    <br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i ++ ) cin &gt;&gt; q[i];<br>    <br>    <span class="hljs-keyword">while</span>(Q --)&#123;<br>        <span class="hljs-comment">// 需要查找的数</span><br>        <span class="hljs-type">int</span> x; cin &gt;&gt; x;<br>        <br>        <span class="hljs-comment">// 第一次二分</span><br>        <span class="hljs-type">int</span> l = <span class="hljs-number">0</span> , r = n - <span class="hljs-number">1</span>;<br>        <br>        <span class="hljs-comment">// 先找左边开始，第一个出现的 x，那么满足右边性质即可</span><br>        <span class="hljs-keyword">while</span>(l &lt; r)&#123;<br>            <span class="hljs-type">int</span> mid = l + r &gt;&gt; <span class="hljs-number">1</span>;<br>            <span class="hljs-keyword">if</span>(q[mid] &gt;= x) r = mid;<br>            <span class="hljs-keyword">else</span> l = mid + <span class="hljs-number">1</span>;<br>        &#125;<br>        <span class="hljs-comment">// 如果没找到</span><br>        <span class="hljs-keyword">if</span>(q[l] != x) <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;-1 -1&quot;</span>);<br>        <span class="hljs-keyword">else</span>&#123;<br>            <span class="hljs-comment">// 如果找到了</span><br>            cout &lt;&lt; l &lt;&lt; <span class="hljs-string">&quot; &quot;</span>;<br>            <span class="hljs-comment">// 开始找右边开始，第一个出现的x，那么满足左边的性质即可</span><br>            <span class="hljs-type">int</span> l = <span class="hljs-number">0</span> , r = n - <span class="hljs-number">1</span>;<br>            <span class="hljs-keyword">while</span>(l &lt; r)&#123;<br>                <span class="hljs-type">int</span> mid = l + r + <span class="hljs-number">1</span> &gt;&gt; <span class="hljs-number">1</span>;<br>                <span class="hljs-keyword">if</span>(q[mid] &lt;= x) l = mid;<br>                <span class="hljs-keyword">else</span> r = mid - <span class="hljs-number">1</span>;<br>            &#125;<br>            <span class="hljs-comment">//if(q[l] != x) puts(&quot;-1&quot;); </span><br>            <span class="hljs-comment">// else cout &lt;&lt; l &lt;&lt; endl;</span><br>            <span class="hljs-comment">// 就算从右边也一定会找到一个值，它可以是左边开始找，找到的那个x</span><br>            cout &lt;&lt; l &lt;&lt; endl;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="浮点数二分经典例题"><a href="#浮点数二分经典例题" class="headerlink" title="浮点数二分经典例题"></a>浮点数二分经典例题</h3><h4 id="AcWing-790-数的三次方根"><a href="#AcWing-790-数的三次方根" class="headerlink" title="AcWing 790. 数的三次方根"></a><a href="https://www.acwing.com/problem/content/792/">AcWing 790. 数的三次方根</a></h4><h4 id="问题描述-1"><a href="#问题描述-1" class="headerlink" title="问题描述"></a>问题描述</h4><p>给定一个浮点数 n，求它的三次方根。</p><h4 id="输入格式-1"><a href="#输入格式-1" class="headerlink" title="输入格式"></a>输入格式</h4><p>共一行，包含一个浮点数 n 。</p><h4 id="输出格式-1"><a href="#输出格式-1" class="headerlink" title="输出格式"></a>输出格式</h4><p>共一行，包含一个浮点数，表示问题的解。</p><p>注意，结果保留 6 位小数。</p><h4 id="数据范围-1"><a href="#数据范围-1" class="headerlink" title="数据范围"></a>数据范围</h4><p>−10000 ≤ n ≤ 10000</p><h4 id="输入样例：-1"><a href="#输入样例：-1" class="headerlink" title="输入样例："></a>输入样例：</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">1000.00<br></code></pre></td></tr></table></figure><h4 id="输出样例：-1"><a href="#输出样例：-1" class="headerlink" title="输出样例："></a>输出样例：</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">10.000000<br></code></pre></td></tr></table></figure><h4 id="代码：-1"><a href="#代码：-1" class="headerlink" title="代码："></a>代码：</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;algorithm&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <br>    <span class="hljs-type">double</span> n;<br>    cin &gt;&gt; n;<br>    <span class="hljs-comment">// 依据数据范围取[min, max]</span><br>    <span class="hljs-type">double</span> l = <span class="hljs-number">-10000</span> , r = <span class="hljs-number">10000</span>;<br>    <span class="hljs-comment">// 调整精度</span><br>    <span class="hljs-keyword">while</span>(r - l &gt; <span class="hljs-number">1e-8</span>)&#123;<br>        <span class="hljs-type">double</span> mid = (l + r) / <span class="hljs-number">2</span>;<br>        <span class="hljs-keyword">if</span>(mid * mid * mid &gt;= n) r = mid; <span class="hljs-comment">// 重点</span><br>        <span class="hljs-keyword">else</span> l = mid; <span class="hljs-comment">// 重点</span><br>    &#125;<br>    <br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%lf\n&quot;</span> , l);<br>    <br>&#125;<br></code></pre></td></tr></table></figure><h2 id="技术支持"><a href="#技术支持" class="headerlink" title="技术支持"></a>技术支持</h2><p><a href="https://www.hello-algo.com/chapter_searching/binary_search/">hello-algo</a><br><a href="https://www.acwing.com/activity/content/code/content/4690436/">AcWing789.数的范围</a><br><a href="https://www.acwing.com/activity/content/code/content/4690546/">AcWing 790. 数的三次方根</a></p>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法模板 </tag>
            
            <tag> AcWing </tag>
            
            <tag> 查找算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>直接插入排序</title>
      <link href="/posts/a1dd46ab1c25/"/>
      <url>/posts/a1dd46ab1c25/</url>
      
        <content type="html"><![CDATA[<h2 id="直接插入排序"><a href="#直接插入排序" class="headerlink" title="直接插入排序"></a>直接插入排序</h2><div class="note success simple"><p>本文将介绍<strong>基于数组</strong>的直接插入排序</p></div><p><strong>算法的思想</strong>：<strong>维护一个有序序列</strong>，初始时<strong>有序序列只有一个元素</strong>即为<strong>第1个元素</strong>，随后选定数组的<strong>第2个元素</strong>为<strong>待插入元素</strong> <code>base</code> ，将 <code>base</code> 与其左边的元素依次对比大小，并“插入”到正确位置。每次将一个新的元素插入到有序序列中，将有序序列的长度增加 1，直到全部元素都加入到有序序列中。</p><p><strong>一个简单的例子：</strong><br><img src="https://bu.dusays.com/2023/01/14/63c24f0730913.png" alt="image-20230114144248474"></p><h3 id="算法流程"><a href="#算法流程" class="headerlink" title="算法流程"></a>算法流程</h3><ol><li>第1轮先选取排序元素中的<strong>第2个元素</strong>为<code>base</code>，<code>base</code>与它之前的所有元素一一比较，然后执行<span class='p red'>插入</span>操作，至此<strong>元素中前2个元素已完成排序</strong>。</li><li>第2轮先选取排序元素中的<strong>第3个元素</strong>为<code>base</code>，<code>base</code>与它之前的所有元素一一比较，然后执行<span class='p red'>插入</span>操作，至此<strong>元素中前3个元素已完成排序</strong>。</li></ol><p>这样排序就完成了，有序序列长度从1变成了3，这个过程进行了<strong>2轮</strong></p><h3 id="算法特性"><a href="#算法特性" class="headerlink" title="算法特性"></a>算法特性</h3><p><strong>时间复杂度O(n<sup>2</sup>)</strong>：</p><ul><li>最好情况：<strong>O(n)</strong>，比如：[1,2,3,4,5] 有序情况，整个过程<strong>未进行任何插入操作</strong>，<strong>仅进行比较操作</strong></li><li>平均情况：O(n<sup>2</sup>)</li><li>最差情况：各轮插入操作循环n-1，n-2，…，2，1次，求和为 ((n - 1) x n ) / 2，使用<strong>O(n<sup>2</sup>)</strong>时间。</li></ul><p><strong>空间复杂度O(1)</strong>：变量 i , j 使用常数大小的额外空间。</p><p><strong>稳定性</strong>：<strong>稳定</strong>（不交换相等元素）</p><h3 id="直接插入排序-vs-冒泡排序"><a href="#直接插入排序-vs-冒泡排序" class="headerlink" title="直接插入排序 vs 冒泡排序"></a>直接插入排序 vs 冒泡排序</h3><p style="color:red">虽然「直接插入排序」和「冒泡排序」的时间复杂度皆为O(n<sup>2</sup>) ，但实际运行速度却有很大差别，这是为什么呢？</p><p>回顾复杂度分析，两个方法的循环次数都是((n - 1) x n )/2。但不同的是，「冒泡操作」是在做<emp>元素交换</emp>，需要借助一个临时变量实现，共 3 个单元操作；而「插入操作」是在做<emp>赋值</emp>，只需 1 个单元操作；因此，可以粗略估计出冒泡排序的计算开销约为直接插入排序的 3 倍。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">// 冒泡排序的 元素交换</span><br><span class="hljs-built_in">swap</span>(q[j], q[j + <span class="hljs-number">1</span>]); <span class="hljs-comment">// 这个函数实现一下就知道了 共3个单元操作</span><br><span class="hljs-comment">// 直接插入排序的 赋值</span><br>q[j + <span class="hljs-number">1</span>] = q[j];<br></code></pre></td></tr></table></figure><p>直接插入排序运行速度快，并且具有原地（指针变量仅使用常数大小额外空间）、稳定（不交换相等元素）、自适应（最佳情况下，时间复杂度为O(n<sup>2</sup>)的优点，因此很受欢迎。实际上，包括 Java 在内的许多编程语言的排序库函数的实现都用到了直接插入排序。库函数的大致思路：</p><ul><li>对于<strong>长数组</strong>，采用基于分治的排序算法，例如<strong>快速排序</strong>，时间复杂度为O(nlogn)</li><li>对于<strong>短数组</strong>，直接使用<strong>直接插入排序</strong>，时间复杂度为O(n<sup>2</sup>)</li></ul><p>在数组较短时，复杂度中的常数项（即每轮中的单元操作数量）占主导作用，此时插入排序运行地更快。</p><h3 id="算法模板"><a href="#算法模板" class="headerlink" title="算法模板"></a>算法模板</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">insert_sort</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-comment">// 外层循环保证 n - 1 趟的同时</span><br>    <span class="hljs-comment">// 还保证了选取 第2个 元素作为base</span><br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">1</span> ; i &lt; n ; i++)&#123;<br>        <span class="hljs-type">int</span> base = q[i] , j = i;<br>        <span class="hljs-comment">// 如果 j 大于 0 并且 base 比 q[j - 1] 小</span><br>        <span class="hljs-keyword">while</span>(j &amp;&amp; base &lt; q[j - <span class="hljs-number">1</span>])&#123;<br>            q[j] = q[j - <span class="hljs-number">1</span>];<br>            j--;<br>        &#125;<br>        q[j] = base;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="拓展"><a href="#拓展" class="headerlink" title="拓展"></a>拓展</h3><p><a href="/posts/f7271c1a5982">单链表的直接插入排序</a></p><h3 id="技术支持"><a href="#技术支持" class="headerlink" title="技术支持"></a>技术支持</h3><p><a href="https://www.hello-algo.com/chapter_sorting/insertion_sort/">Hello 算法</a><br><a href="https://www.acwing.com/activity/content/code/content/4550243/">我自己</a></p>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法模板 </tag>
            
            <tag> 排序算法 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
