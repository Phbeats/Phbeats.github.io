<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Phbeats-Blog</title>
  
  <subtitle>记录学习历程和生活感悟</subtitle>
  <link href="https://blog.phbeats.cn/atom.xml" rel="self"/>
  
  <link href="https://blog.phbeats.cn/"/>
  <updated>2023-07-31T08:23:01.706Z</updated>
  <id>https://blog.phbeats.cn/</id>
  
  <author>
    <name>Phbeats</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>王道数据结构链表习题</title>
    <link href="https://blog.phbeats.cn/posts/78005f2f1e1c/"/>
    <id>https://blog.phbeats.cn/posts/78005f2f1e1c/</id>
    <published>2023-07-31T05:32:29.000Z</published>
    <updated>2023-07-31T08:23:01.706Z</updated>
    
    <content type="html"><![CDATA[<h3 id="链表经典大题"><a href="#链表经典大题" class="headerlink" title="链表经典大题"></a>链表经典大题</h3><h4 id="递归删除不带头结点的单链表中所有值为-x-的结点"><a href="#递归删除不带头结点的单链表中所有值为-x-的结点" class="headerlink" title="递归删除不带头结点的单链表中所有值为 x 的结点"></a>递归删除不带头结点的单链表中所有值为 x 的结点</h4><p><img src="https://bu.dusays.com/2023/07/31/64c75c76e2b3a.png" alt="image-20230731150204492"></p><p>题目说了是 L 哦。但是我代码写得是 list。偷懒了。</p><h5 id="核心思想"><a href="#核心思想" class="headerlink" title="核心思想"></a>核心思想</h5><p>板子</p><h5 id="核心代码"><a href="#核心代码" class="headerlink" title="核心代码"></a>核心代码</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">// 递归删除不带头结点单链表中 x 的值</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">Del_x</span><span class="hljs-params">(LinkList &amp; list, <span class="hljs-type">int</span> x)</span></span>&#123;<br><span class="hljs-comment">// 出口</span><br><span class="hljs-keyword">if</span>(!list) <span class="hljs-keyword">return</span>;<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(list -&gt; data == x)&#123;<br><span class="hljs-comment">// 如果当前递归中的结点是应该被删除的结点</span><br>LNode * p = list;<br>list = list -&gt; next; <span class="hljs-comment">// 指向下一个结点</span><br><span class="hljs-built_in">free</span>(p);<br><span class="hljs-comment">// 继续寻找</span><br><span class="hljs-built_in">Del_x</span>(list, x);<br><br><span class="hljs-comment">// 下面这三行代码是绝对不能写！！！死循环</span><br><span class="hljs-comment">// LNode * p = list -&gt; next;</span><br><span class="hljs-comment">// free(list);</span><br><span class="hljs-comment">// Del_x(p, x);</span><br>&#125;<span class="hljs-keyword">else</span>&#123;<br><span class="hljs-comment">// 不是应该被删除的结点</span><br><span class="hljs-built_in">Del_x</span>(list -&gt; next, x);<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="附赠无头结点的尾插法代码"><a href="#附赠无头结点的尾插法代码" class="headerlink" title="附赠无头结点的尾插法代码"></a>附赠无头结点的尾插法代码</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">// 无头结点尾插法建立单链表</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">TailInsert</span><span class="hljs-params">(LinkList &amp; list)</span></span>&#123;<br><span class="hljs-built_in">InitList</span>(list);<br><br>LNode * r;<br><br><span class="hljs-type">int</span> x;<br>cin &gt;&gt; x;<br><br><span class="hljs-keyword">while</span>(x != <span class="hljs-number">9999</span>)&#123;<br>LNode * s = (LNode *)<span class="hljs-built_in">malloc</span>(<span class="hljs-built_in">sizeof</span>(LNode));<br>s -&gt; data = x;<br>s -&gt; next = <span class="hljs-literal">NULL</span>;<br><span class="hljs-comment">// 是第一个结点</span><br><span class="hljs-keyword">if</span>(!list) list = s;<br><span class="hljs-keyword">else</span>&#123;<br><span class="hljs-comment">// 平常的尾插</span><br>s -&gt; next = r -&gt; next;<br>r -&gt; next = s;<br>&#125;<br>r = s;<br>cin &gt;&gt; x;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="删除带头结点的单链表中所有值为-x-的结点"><a href="#删除带头结点的单链表中所有值为-x-的结点" class="headerlink" title="删除带头结点的单链表中所有值为 x 的结点"></a>删除带头结点的单链表中所有值为 x 的结点</h4><p><img src="https://bu.dusays.com/2023/07/31/64c76dedf2ece.png" alt="image-20230731161643650"></p><h5 id="核心思想-1"><a href="#核心思想-1" class="headerlink" title="核心思想"></a>核心思想</h5><p>板子</p><h5 id="核心代码-1"><a href="#核心代码-1" class="headerlink" title="核心代码"></a>核心代码</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">// 删除带头结点单链表中 x 的值</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">Del_x</span><span class="hljs-params">(LinkList &amp; list, <span class="hljs-type">int</span> x)</span></span>&#123;<br>LNode * pre = list, * cur = list -&gt; next;<br><br><span class="hljs-keyword">while</span>(cur)&#123;<br><span class="hljs-comment">// 当前结点是应该被删除的结点</span><br><span class="hljs-keyword">if</span>(cur -&gt; data == x)&#123;<br>LNode * q = cur;<br>cur = cur -&gt; next;<br>pre -&gt; next = cur;<br><span class="hljs-built_in">free</span>(q);<br>&#125;<span class="hljs-keyword">else</span>&#123;<br><span class="hljs-comment">// 当前结点不是应该被删除的结点</span><br>pre = cur;<br>cur = cur -&gt; next;<br>&#125;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">王道数据结构链表习题</summary>
    
    
    
    <category term="王道数据结构习题" scheme="https://blog.phbeats.cn/categories/%E7%8E%8B%E9%81%93%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B9%A0%E9%A2%98/"/>
    
    
    <category term="王道数据结构习题" scheme="https://blog.phbeats.cn/tags/%E7%8E%8B%E9%81%93%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B9%A0%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title>浅尝治光师肯尼亚圆豆手冲咖啡</title>
    <link href="https://blog.phbeats.cn/posts/bb95ebed2e97/"/>
    <id>https://blog.phbeats.cn/posts/bb95ebed2e97/</id>
    <published>2023-07-29T22:45:30.000Z</published>
    <updated>2023-07-31T08:23:01.706Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>这是治光师会员限购9.9包邮的，肯尼亚FCS合作社顶级圆豆批次，水洗处理的浅烘豆子。</p><p>9.9元30g，不妨让我来试试水。</p><h3 id="过程记录"><a href="#过程记录" class="headerlink" title="过程记录"></a>过程记录</h3><p><img src="https://bu.dusays.com/2023/07/30/64c5986ae14d5.webp" alt="Screenshot_20230730_064146_com.taobao.taobao"></p><p><img src="https://bu.dusays.com/2023/07/30/64c5987b1a642.webp" alt="IMG_20230730_063602"></p><p><img src="https://bu.dusays.com/2023/07/31/64c74e7532b67.webp" alt="IMG_20230730_063624"></p><h3 id="主观评价"><a href="#主观评价" class="headerlink" title="主观评价"></a>主观评价</h3><p>熟豆闻起来和之前买的<code>菠萝成子危地马拉瑰夏</code>味道差不多。</p><p>喝起来不尽人意。第一口下去是它的酸度和甜度，比较突出，酸度明显高于<code>治光师耶加雪菲</code>，总体风味符合它的风味描述，但同时还有强烈的涩味，第一口下去，我还以为哪的垃圾豆子。之后喝完口腔会有和辛鹿耶加雪菲55开的烟熏感。</p><p>总体评价：烟熏、涩、果酸和甜感突出、性价比一般、不推荐。</p>]]></content>
    
    
    <summary type="html">浅尝治光师肯尼亚圆豆手冲咖啡</summary>
    
    
    
    <category term="生活" scheme="https://blog.phbeats.cn/categories/%E7%94%9F%E6%B4%BB/"/>
    
    
    <category term="生活" scheme="https://blog.phbeats.cn/tags/%E7%94%9F%E6%B4%BB/"/>
    
    <category term="咖啡" scheme="https://blog.phbeats.cn/tags/%E5%92%96%E5%95%A1/"/>
    
  </entry>
  
  <entry>
    <title>浅尝治光师伊迪朵耶加雪菲手冲咖啡</title>
    <link href="https://blog.phbeats.cn/posts/32f6f1e29b78/"/>
    <id>https://blog.phbeats.cn/posts/32f6f1e29b78/</id>
    <published>2023-07-23T00:00:02.000Z</published>
    <updated>2023-07-31T08:23:01.706Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>这款<code>治光师伊迪朵耶加雪菲</code>是群友推荐的，直接无脑买了。<br>写这篇文章，已经过了好些日子了，这是第二次喝的时候写的评价。</p><h3 id="过程记录"><a href="#过程记录" class="headerlink" title="过程记录"></a>过程记录</h3><p><img src="https://bu.dusays.com/2023/07/13/64af5071a51a7.webp" alt="Screenshot_20230713_085908_com.taobao.taobao"></p><p><img src="https://bu.dusays.com/2023/07/23/64bc7cf456c60.webp" alt="IMG_20230723_064938"></p><p><img src="https://bu.dusays.com/2023/07/23/64bc7cf52e837.webp" alt="IMG_20230723_065210"></p><p><img src="https://bu.dusays.com/2023/07/23/64bc7cf44e11f.webp" alt="IMG_20230714_081733"></p><h3 id="主观评价"><a href="#主观评价" class="headerlink" title="主观评价"></a>主观评价</h3><p>首先，从豆子品控来看，是十分优秀的。</p><p>高温下，酸很<code>明亮</code>，基本无涩感，值得一提的是<code>茶感</code>很明显，有些许回甘，带<code>清香的甜</code>。</p><p>低温下，酸更加明显，有<code>SeeSaw 甜橙子</code>那味了。<code>茶感</code>更上一层楼。</p><p>目前喝过<code>最棒的耶加雪菲</code>。</p><p>缺点可能就是100g需要45元，喝几次就无了吧。真的，它就是优秀，挑不出什么刺。非要说的话，喝完后还是有些许烟熏感，不过能够接受。</p><p>不过我觉得这种价格配得上这种品质。</p><p>总体评价：浅烘、水果清香、茶感浓郁、性价比适中、推荐回购。</p>]]></content>
    
    
    <summary type="html">浅尝治光师伊迪朵耶加雪菲手冲咖啡</summary>
    
    
    
    <category term="生活" scheme="https://blog.phbeats.cn/categories/%E7%94%9F%E6%B4%BB/"/>
    
    
    <category term="生活" scheme="https://blog.phbeats.cn/tags/%E7%94%9F%E6%B4%BB/"/>
    
    <category term="咖啡" scheme="https://blog.phbeats.cn/tags/%E5%92%96%E5%95%A1/"/>
    
  </entry>
  
  <entry>
    <title>浅尝菠萝成子危地马拉瑰夏手冲咖啡</title>
    <link href="https://blog.phbeats.cn/posts/fcab5f014e92/"/>
    <id>https://blog.phbeats.cn/posts/fcab5f014e92/</id>
    <published>2023-07-21T23:18:45.000Z</published>
    <updated>2023-07-31T08:23:01.706Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>瑰夏！瑰夏！瑰夏！</p><p>啊，我终于也能喝上瑰夏了，不过这款瑰夏不是出自<code>巴拿马的翡翠庄园</code>的瑰夏。</p><p>而是出自<code>危地马拉的庄园</code>。</p><h3 id="过程记录"><a href="#过程记录" class="headerlink" title="过程记录"></a>过程记录</h3><p><img src="https://bu.dusays.com/2023/07/22/64bb06f93ff84.jpg" alt="Screenshot_20230722_062419_com.taobao.taobao"></p><p><img src="https://bu.dusays.com/2023/07/22/64bb0705f2398.jpg" alt="IMG_20230713_190844"></p><p><img src="https://bu.dusays.com/2023/07/22/64bb070c95363.jpg" alt="IMG_20230713_200015"></p><h3 id="主观评价"><a href="#主观评价" class="headerlink" title="主观评价"></a>主观评价</h3><p>根据<code>菠萝成子</code>介绍，入手了这款瑰夏，他说这款瑰夏一定是真的瑰夏。</p><p>这款瑰夏是中烘的，开包后香味给我的感觉是没有之前的豆子香，我层怀疑是不是豆子不新鲜了，密封罐好像很容易就打开了，是否起到了密封效果？嚼了两粒，确定一下，是<code>大麦茶</code>的味道，香香脆脆的。</p><p><code>瑰夏</code>为什么是瑰夏呢？不仅是指品种，还有风味。</p><p>即使是中烘，苦味一点儿也不明显，突出的更多是水果风味，属于那种真的很清香的，带草莓的酸的感觉，有焦糖味，有一点红茶茶感，喝完后给我的感觉是很均衡，<code>为什么感觉刚刚喝的是水？</code>。喝完后，还是能够感觉到明显的烘焙味，喉咙还是有点不太舒服，也许这也就是之前口嚼大麦茶味的缘由吧。</p><p>真的！这尼玛就是水吧，尝试了各种不同的水粉比，果然是水…</p><p>和闻起来一样，喝起来也是如此清淡，好喝倒是一言难尽，不过我不喜欢那种喝完后那种喉咙被烟熏的感觉。</p><p>总体评价：中烘、清淡、烟熏、性价比低。</p>]]></content>
    
    
    <summary type="html">浅尝菠萝成子危地马拉瑰夏手冲咖啡</summary>
    
    
    
    <category term="生活" scheme="https://blog.phbeats.cn/categories/%E7%94%9F%E6%B4%BB/"/>
    
    
    <category term="生活" scheme="https://blog.phbeats.cn/tags/%E7%94%9F%E6%B4%BB/"/>
    
    <category term="咖啡" scheme="https://blog.phbeats.cn/tags/%E5%92%96%E5%95%A1/"/>
    
  </entry>
  
  <entry>
    <title>王道数据结构算法设计大题汇总</title>
    <link href="https://blog.phbeats.cn/posts/ba547e211266/"/>
    <id>https://blog.phbeats.cn/posts/ba547e211266/</id>
    <published>2023-07-18T08:53:20.000Z</published>
    <updated>2023-07-31T08:23:01.706Z</updated>
    
    <content type="html"><![CDATA[<h3 id="第一章-线性表"><a href="#第一章-线性表" class="headerlink" title="第一章 线性表"></a>第一章 线性表</h3><ol><li><a href="/posts/f57f98d1b5f4">顺序表</a></li></ol>]]></content>
    
    
    <summary type="html">王道数据结构算法设计大题汇总</summary>
    
    
    
    <category term="置顶汇总" scheme="https://blog.phbeats.cn/categories/%E7%BD%AE%E9%A1%B6%E6%B1%87%E6%80%BB/"/>
    
    
    <category term="置顶汇总" scheme="https://blog.phbeats.cn/tags/%E7%BD%AE%E9%A1%B6%E6%B1%87%E6%80%BB/"/>
    
  </entry>
  
  <entry>
    <title>王道数据结构顺序表习题</title>
    <link href="https://blog.phbeats.cn/posts/f57f98d1b5f4/"/>
    <id>https://blog.phbeats.cn/posts/f57f98d1b5f4/</id>
    <published>2023-07-18T08:53:00.000Z</published>
    <updated>2023-07-31T08:23:01.706Z</updated>
    
    <content type="html"><![CDATA[<h3 id="顺序表经典大题"><a href="#顺序表经典大题" class="headerlink" title="顺序表经典大题"></a>顺序表经典大题</h3><h4 id="删除顺序表中的最小值"><a href="#删除顺序表中的最小值" class="headerlink" title="删除顺序表中的最小值"></a>删除顺序表中的最小值</h4><p><img src="https://bu.dusays.com/2023/07/18/64b6140d7eb70.png" alt="image-20230718122418457"></p><h5 id="核心思想"><a href="#核心思想" class="headerlink" title="核心思想"></a>核心思想</h5><p>遍历表，查找最小值，并记住位置 </p><h5 id="核心代码"><a href="#核心代码" class="headerlink" title="核心代码"></a>核心代码</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">Del_Min</span><span class="hljs-params">(SqList &amp; list, <span class="hljs-type">int</span> &amp; value)</span></span>&#123;<br><span class="hljs-comment">// 表空</span><br><span class="hljs-keyword">if</span>(list.length == <span class="hljs-number">0</span>) <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br><br><span class="hljs-comment">// 假定最小值是第1个元素</span><br>value = list.data[<span class="hljs-number">0</span>];<br><span class="hljs-type">int</span> pos = <span class="hljs-number">0</span>;<br><br><span class="hljs-comment">// 遍历表，尝试找到更小的元素（从第2个元素开始找起）</span><br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt; list.length; i++)&#123;<br><span class="hljs-keyword">if</span>(list.data[i] &lt; value)&#123;<br>value = list.data[i];<br>pos = i;<br>&#125;<br>&#125;<br><br><span class="hljs-comment">// 题目要求：空出的位置由最后一个元素顶替</span><br>list.data[pos] = list.data[list.length - <span class="hljs-number">1</span>];<br><br>list.length--; <span class="hljs-comment">// 这一步是最最最容易忘记的！！！</span><br><br><span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="逆置顺序表"><a href="#逆置顺序表" class="headerlink" title="逆置顺序表"></a>逆置顺序表</h4><p><img src="https://bu.dusays.com/2023/07/18/64b619073eeab.png" alt="image-20230718124559870"></p><h5 id="核心思想-1"><a href="#核心思想-1" class="headerlink" title="核心思想"></a>核心思想</h5><p>算法板子…</p><h5 id="核心代码-1"><a href="#核心代码-1" class="headerlink" title="核心代码"></a>核心代码</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">Reverse</span><span class="hljs-params">(SqList &amp; list, <span class="hljs-type">int</span> from, <span class="hljs-type">int</span> to)</span></span>&#123;<br><span class="hljs-comment">// 空表</span><br><span class="hljs-keyword">if</span>(list.length == <span class="hljs-number">0</span>) <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br><br>    <span class="hljs-comment">// 输入非法</span><br>    <span class="hljs-keyword">if</span>(from &gt;= to) <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    <br>    <span class="hljs-comment">// 向上取整</span><br><span class="hljs-type">int</span> mid = (to - from + <span class="hljs-number">1</span>) / <span class="hljs-number">2</span>;<br><br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; mid; i++)&#123;<br><span class="hljs-type">int</span> temp = list.data[from + i];<br>list.data[from + i] = list.data[to - i];<br>list.data[to - i] = temp;<br>&#125;<br><br><span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="顺序表批量删除指定值-x-元素"><a href="#顺序表批量删除指定值-x-元素" class="headerlink" title="顺序表批量删除指定值 x 元素"></a>顺序表批量删除指定值 x 元素</h4><p><img src="https://bu.dusays.com/2023/07/18/64b61b50f028c.png" alt="image-20230718125544632"></p><h5 id="核心思想-2"><a href="#核心思想-2" class="headerlink" title="核心思想"></a>核心思想</h5><p>利用变量<code>k</code>，从0开始，遍历表，只保留<code>非 x</code> 元素</p><h5 id="核心代码-2"><a href="#核心代码-2" class="headerlink" title="核心代码"></a>核心代码</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">Del_x</span><span class="hljs-params">(SqList &amp; list, <span class="hljs-type">int</span> x)</span></span>&#123;<br><span class="hljs-comment">// 空表</span><br><span class="hljs-keyword">if</span>(list.length == <span class="hljs-number">0</span>) <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br><br><span class="hljs-type">int</span> k = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; list.length; i++)<br><span class="hljs-keyword">if</span>(list.data[i] != x)<br>list.data[k++] = list.data[i];<br><br><span class="hljs-comment">// k 才是有效表长</span><br>list.length = k;<br><br><span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="顺序表在某条件下的批量删除"><a href="#顺序表在某条件下的批量删除" class="headerlink" title="顺序表在某条件下的批量删除"></a>顺序表在某条件下的批量删除</h4><p><img src="https://bu.dusays.com/2023/07/18/64b626805f0ac.png" alt="image-20230718134328974"></p><h5 id="核心思想-3"><a href="#核心思想-3" class="headerlink" title="核心思想"></a>核心思想</h5><p>算法板子…</p><p><img src="https://bu.dusays.com/2023/07/18/64b629de5c63b.png" alt="image-20230718135751532"></p><h5 id="核心代码-3"><a href="#核心代码-3" class="headerlink" title="核心代码"></a>核心代码</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">Del_range</span><span class="hljs-params">(SqList &amp; list, <span class="hljs-type">int</span> s, <span class="hljs-type">int</span> t)</span></span>&#123;<br><span class="hljs-comment">// 空表</span><br><span class="hljs-keyword">if</span>(list.length == <span class="hljs-number">0</span>) <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br><br><span class="hljs-comment">// 题目要求，非法输入判定</span><br><span class="hljs-keyword">if</span>(s &gt;= t) <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br><br><span class="hljs-type">int</span> i = <span class="hljs-number">0</span>, k = <span class="hljs-number">0</span>;<br><br><span class="hljs-keyword">while</span>(i &lt; list.length)&#123;<br><span class="hljs-comment">// 值在[s,t]这个范围内 k++</span><br><span class="hljs-keyword">if</span>(list.data[i] &gt;= s &amp;&amp; list.data[i] &lt;= t) k++;<br><span class="hljs-keyword">else</span> list.data[i - k] = list.data[i]; <span class="hljs-comment">// 不在这个范围则直接位移</span><br>i++;<br>&#125;<br><br><span class="hljs-comment">// 更新表长，删除了 k 个</span><br>list.length -= k;<br><br><span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="删除顺序表中重复元素"><a href="#删除顺序表中重复元素" class="headerlink" title="删除顺序表中重复元素"></a>删除顺序表中重复元素</h4><p><img src="https://bu.dusays.com/2023/07/18/64b62c656f8fc.png" alt="image-20230718140838298"></p><h5 id="核心思想-4"><a href="#核心思想-4" class="headerlink" title="核心思想"></a>核心思想</h5><p>经典的双指针算法。</p><h5 id="核心代码-4"><a href="#核心代码-4" class="headerlink" title="核心代码"></a>核心代码</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">Del_repeat</span><span class="hljs-params">(SqList &amp; list)</span></span>&#123;<br><span class="hljs-comment">// 空表</span><br><span class="hljs-keyword">if</span>(list.length == <span class="hljs-number">0</span>) <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br><br><span class="hljs-type">int</span> i,j;<br><br><span class="hljs-keyword">for</span>(i = <span class="hljs-number">0</span>, j = <span class="hljs-number">1</span>; j &lt; list.length; j++)<br><span class="hljs-comment">// 出现不同元素</span><br><span class="hljs-keyword">if</span>(list.data[i] != list.data[j])<br><span class="hljs-comment">// 前移 不能写 i++ 必须要写 ++i ！！！！</span><br>             <span class="hljs-comment">// 不同的元素要放在 i 的下一个位置(保证)</span><br>list.data[++i] = list.data[j];<br><br><br>list.length = i + <span class="hljs-number">1</span>;<br><br><span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="线性表的-AB-gt-BA-问题"><a href="#线性表的-AB-gt-BA-问题" class="headerlink" title="线性表的 AB =&gt; BA 问题"></a>线性表的 AB =&gt; BA 问题</h4><p><img src="https://bu.dusays.com/2023/07/18/64b631f37d5fe.png" alt="image-20230718143153144"></p><h5 id="核心思想-5"><a href="#核心思想-5" class="headerlink" title="核心思想"></a>核心思想</h5><p><img src="https://bu.dusays.com/2023/07/18/64b6372246520.png" alt="image-20230718145427110"></p><h5 id="核心代码-5"><a href="#核心代码-5" class="headerlink" title="核心代码"></a>核心代码</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">Reverse</span><span class="hljs-params">(SqList &amp; list, <span class="hljs-type">int</span> from, <span class="hljs-type">int</span> to)</span></span>&#123;<br><span class="hljs-comment">// 空表</span><br><span class="hljs-keyword">if</span>(list.length == <span class="hljs-number">0</span>) <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br><br><span class="hljs-comment">// 输入非法</span><br><span class="hljs-keyword">if</span>(from &gt;= to) <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br><br><span class="hljs-comment">// 向上取整</span><br><span class="hljs-type">int</span> mid = (to - from + <span class="hljs-number">1</span>) / <span class="hljs-number">2</span>;<br><br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; mid; i++)&#123;<br><span class="hljs-type">int</span> temp = list.data[from + i];<br>list.data[from + i] = list.data[to - i];<br>list.data[to - i] = temp;<br>&#125;<br><br><span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">Converse</span><span class="hljs-params">(SqList &amp; list, <span class="hljs-type">int</span> m, <span class="hljs-type">int</span> n)</span></span>&#123;<br><span class="hljs-built_in">Reverse</span>(list, <span class="hljs-number">0</span>, m + n - <span class="hljs-number">1</span>);<br><span class="hljs-built_in">Reverse</span>(list, <span class="hljs-number">0</span>, n - <span class="hljs-number">1</span>);<br><span class="hljs-built_in">Reverse</span>(list, n, m + n - <span class="hljs-number">1</span>);<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="顺序表的二分查找"><a href="#顺序表的二分查找" class="headerlink" title="顺序表的二分查找"></a>顺序表的二分查找</h4><p><img src="https://bu.dusays.com/2023/07/18/64b6380c82626.png" alt="image-20230718145821268"></p><h5 id="核心思想-6"><a href="#核心思想-6" class="headerlink" title="核心思想"></a>核心思想</h5><p>使用<code>折半查找</code>。</p><h5 id="核心代码-6"><a href="#核心代码-6" class="headerlink" title="核心代码"></a>核心代码</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">SearchExchangeInsert</span><span class="hljs-params">(SqList &amp; list, <span class="hljs-type">int</span> x)</span></span>&#123;<br><span class="hljs-comment">// 二分</span><br><span class="hljs-type">int</span> left = <span class="hljs-number">0</span>, right = list.length - <span class="hljs-number">1</span>, mid;<br><br><span class="hljs-keyword">while</span>(left &lt;= right)&#123;<br><span class="hljs-comment">// 防溢出</span><br>mid = left + (right - left) / <span class="hljs-number">2</span>;<br><br><span class="hljs-keyword">if</span>(list.data[mid] == x) <span class="hljs-keyword">break</span>;<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(list.data[mid] &lt; x) left = mid + <span class="hljs-number">1</span>;<br><span class="hljs-keyword">else</span> right = mid - <span class="hljs-number">1</span>;<br>&#125;<br><br><span class="hljs-comment">// 找到了，与它后面那个元素进行交换（要有的话）</span><br><span class="hljs-keyword">if</span>(list.data[mid] == x &amp;&amp; mid != list.length - <span class="hljs-number">1</span>)&#123;<br><span class="hljs-built_in">swap</span>(list.data[mid],list.data[mid + <span class="hljs-number">1</span>]); <span class="hljs-comment">// 偷懒了</span><br>&#125;<br><br><span class="hljs-comment">// 没找到</span><br><span class="hljs-keyword">if</span>(left &gt; right)&#123;<br><span class="hljs-type">int</span> i;<br><span class="hljs-keyword">for</span>(i = list.length - <span class="hljs-number">1</span>; i &gt; right; i--)&#123;<br>list.data[i + <span class="hljs-number">1</span>] = list.data[i];<br>&#125;<br>list.data[i + <span class="hljs-number">1</span>] = x;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="顺序表的主元（摩尔投票法）"><a href="#顺序表的主元（摩尔投票法）" class="headerlink" title="顺序表的主元（摩尔投票法）"></a>顺序表的主元（摩尔投票法）</h4><p>题目太长了，就不给了。</p><p>大概意思是<code>主元的数量大于总数量的一半</code></p><h5 id="核心思想-7"><a href="#核心思想-7" class="headerlink" title="核心思想"></a>核心思想</h5><p>算法板子…</p><h5 id="核心代码-7"><a href="#核心代码-7" class="headerlink" title="核心代码"></a>核心代码</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">MoreThanHalfNum_Solution</span><span class="hljs-params">(SqList list)</span></span>&#123;<br><span class="hljs-type">int</span> cnt = <span class="hljs-number">0</span>;<br><span class="hljs-type">int</span> val;<br><br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; list.length; i++)&#123;<br><span class="hljs-keyword">if</span>(!cnt) val = list.data[i], cnt++;<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(val == list.data[i]) cnt++;<br><span class="hljs-keyword">else</span> cnt--;<br>&#125;<br><br><span class="hljs-comment">// 如果有主元。统计出主元实际出现次数</span><br><span class="hljs-keyword">if</span>(cnt &gt; <span class="hljs-number">0</span>)&#123;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = cnt = <span class="hljs-number">0</span>; i &lt; list.length; i++)<br><span class="hljs-keyword">if</span>(list.data[i] == val) cnt++;<br>&#125;<br><br><span class="hljs-comment">// 主元超过总元素长度的一半</span><br><span class="hljs-keyword">if</span>(cnt &gt; list.length / <span class="hljs-number">2</span>) <span class="hljs-keyword">return</span> val;<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>; <span class="hljs-comment">// 不存在主元</span><br>&#125;<br></code></pre></td></tr></table></figure><h4 id="顺序表中未出现的最小正整数"><a href="#顺序表中未出现的最小正整数" class="headerlink" title="顺序表中未出现的最小正整数"></a>顺序表中未出现的最小正整数</h4><p><img src="https://bu.dusays.com/2023/07/18/64b64e770a249.png" alt="image-20230718163359493"></p><h5 id="核心思想-8"><a href="#核心思想-8" class="headerlink" title="核心思想"></a>核心思想</h5><p>桶计数</p><h5 id="核心代码-8"><a href="#核心代码-8" class="headerlink" title="核心代码"></a>核心代码</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">FindMissMin</span><span class="hljs-params">(SqList list)</span></span>&#123;<br><span class="hljs-type">int</span> i;<br><br><span class="hljs-type">int</span> * B; <span class="hljs-comment">// 桶</span><br>B = (<span class="hljs-type">int</span> *)<span class="hljs-built_in">malloc</span>(<span class="hljs-built_in">sizeof</span>(<span class="hljs-type">int</span>) * list.length);<br><span class="hljs-built_in">memset</span>(B, <span class="hljs-number">0</span>, <span class="hljs-built_in">sizeof</span>(<span class="hljs-type">int</span>) * list.length); <span class="hljs-comment">// 赋初始值为0</span><br><br><span class="hljs-comment">// 计数</span><br><span class="hljs-keyword">for</span>(i = <span class="hljs-number">0</span>; i &lt; list.length; i++)<br><span class="hljs-comment">// 合法的范围</span><br><span class="hljs-keyword">if</span>(list.data[i] &gt; <span class="hljs-number">0</span> &amp;&amp; list.data[i] &lt;= list.length)<br>B[list.data[i] - <span class="hljs-number">1</span>] = <span class="hljs-number">1</span>; <span class="hljs-comment">// 标记出现过</span><br><span class="hljs-comment">// 从桶里面找最小整数</span><br><span class="hljs-keyword">for</span>(i = <span class="hljs-number">0</span>; i &lt; list.length; i++)<br><span class="hljs-keyword">if</span>(!B[i]) <span class="hljs-keyword">break</span>;<br><br><span class="hljs-keyword">return</span> i + <span class="hljs-number">1</span>;<br><br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">王道数据结构顺序表习题</summary>
    
    
    
    <category term="王道数据结构习题" scheme="https://blog.phbeats.cn/categories/%E7%8E%8B%E9%81%93%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B9%A0%E9%A2%98/"/>
    
    
    <category term="王道数据结构习题" scheme="https://blog.phbeats.cn/tags/%E7%8E%8B%E9%81%93%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B9%A0%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title>浅尝手冲咖啡汇总</title>
    <link href="https://blog.phbeats.cn/posts/7da784530acd/"/>
    <id>https://blog.phbeats.cn/posts/7da784530acd/</id>
    <published>2023-07-18T03:52:53.000Z</published>
    <updated>2023-07-31T08:23:01.706Z</updated>
    
    <content type="html"><![CDATA[<h3 id="浅尝手冲咖啡汇总"><a href="#浅尝手冲咖啡汇总" class="headerlink" title="浅尝手冲咖啡汇总"></a>浅尝手冲咖啡汇总</h3><ol><li><a href="/posts/8635f45e7775">SeeSaw 甜橙子</a></li><li><a href="/posts/cb40af96710f">八平方 晴天娃娃</a></li><li><a href="/posts/c19e2a8a5f1a">辛鹿 SOE 耶加雪菲</a></li><li><a href="/posts/fcab5f014e92">菠萝成子 危地马拉 瑰夏</a></li><li><a href="/posts/32f6f1e29b78">治光师 伊迪朵 耶加雪菲</a></li><li><a href="/posts/bb95ebed2e97">治光师 肯尼亚圆豆</a></li></ol>]]></content>
    
    
    <summary type="html">浅尝手冲咖啡汇总</summary>
    
    
    
    <category term="置顶汇总" scheme="https://blog.phbeats.cn/categories/%E7%BD%AE%E9%A1%B6%E6%B1%87%E6%80%BB/"/>
    
    
    <category term="置顶汇总" scheme="https://blog.phbeats.cn/tags/%E7%BD%AE%E9%A1%B6%E6%B1%87%E6%80%BB/"/>
    
  </entry>
  
  <entry>
    <title>考研笔试自用算法大题模板汇总</title>
    <link href="https://blog.phbeats.cn/posts/f2bd1d8d0430/"/>
    <id>https://blog.phbeats.cn/posts/f2bd1d8d0430/</id>
    <published>2023-07-18T03:52:53.000Z</published>
    <updated>2023-07-31T08:23:01.706Z</updated>
    
    <content type="html"><![CDATA[<h3 id="第一章代码模板"><a href="#第一章代码模板" class="headerlink" title="第一章代码模板"></a>第一章代码模板</h3><ol><li><a href="/posts/b854574263bd">静态分配的顺序表</a></li><li><a href="/posts/634af820198d">带头结点的单链表</a></li><li><a href="/posts/ff21019310ee">带头结点的双链表</a></li><li><a href="/posts/ac441d04cb46">循环链表</a></li></ol><h3 id="第二章代码模板"><a href="#第二章代码模板" class="headerlink" title="第二章代码模板"></a>第二章代码模板</h3><wavy>待更新...</wavy>]]></content>
    
    
    <summary type="html">考研笔试自用算法大题模板汇总</summary>
    
    
    
    <category term="置顶汇总" scheme="https://blog.phbeats.cn/categories/%E7%BD%AE%E9%A1%B6%E6%B1%87%E6%80%BB/"/>
    
    
    <category term="置顶汇总" scheme="https://blog.phbeats.cn/tags/%E7%BD%AE%E9%A1%B6%E6%B1%87%E6%80%BB/"/>
    
  </entry>
  
  <entry>
    <title>循环链表</title>
    <link href="https://blog.phbeats.cn/posts/ac441d04cb46/"/>
    <id>https://blog.phbeats.cn/posts/ac441d04cb46/</id>
    <published>2023-07-13T12:45:43.000Z</published>
    <updated>2023-07-31T08:23:01.710Z</updated>
    
    <content type="html"><![CDATA[<h3 id="循环链表前言"><a href="#循环链表前言" class="headerlink" title="循环链表前言"></a>循环链表前言</h3><p>之前写了，<code>双链表</code>和<code>单链表</code>的代码模板，基于此结构的循环链表代码具体实现想偷懒了，主要是因为我觉得考的可能性不大。</p><h3 id="循环单链表的类型描述"><a href="#循环单链表的类型描述" class="headerlink" title="循环单链表的类型描述"></a>循环单链表的类型描述</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">struct</span> <span class="hljs-title class_">LNode</span>&#123;    <span class="hljs-comment">//定义循环链表结点类型</span><br><span class="hljs-type">int</span> data;            <span class="hljs-comment">//数据域</span><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">LNode</span> * next;  <span class="hljs-comment">//指针域</span><br>&#125;LNode, * LinkList;<br></code></pre></td></tr></table></figure><h3 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">//初始化</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">InitList</span><span class="hljs-params">(LinkList &amp; list)</span></span>&#123;<br>    <span class="hljs-comment">// 头结点初始化</span><br>    list = (LNode *)<span class="hljs-built_in">malloc</span>(<span class="hljs-built_in">sizeof</span>(LinkList));<br>    list -&gt; next = list; <span class="hljs-comment">// 指向自己</span><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="判空"><a href="#判空" class="headerlink" title="判空"></a>判空</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">//判空</span><br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">Empty</span><span class="hljs-params">(LinkList list)</span></span>&#123;<br>    <span class="hljs-comment">// 如果头结点的下一个结点，依旧是头结点，那么说明是空表</span><br>    <span class="hljs-keyword">if</span>(list -&gt; next == list) <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="判断表尾节点"><a href="#判断表尾节点" class="headerlink" title="判断表尾节点"></a>判断表尾节点</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">//判断结点p是否是表尾结点</span><br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">isTail</span><span class="hljs-params">(LinkList list, LNode * p)</span></span>&#123;<br>    <span class="hljs-comment">// 如果是表尾节点，它的next一定指向头结点</span><br>    <span class="hljs-keyword">if</span>(p -&gt; next == list) <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="插入和删除"><a href="#插入和删除" class="headerlink" title="插入和删除"></a>插入和删除</h3><p>循环单链表的插入、删除算法与单链表几乎一样，不同的是如果在表尾进行，那么要让单链表继续<strong>保持循环的性质</strong>，即<strong>让尾结点的next域指向头结点</strong>。</p><h3 id="循环双链表的类型描述"><a href="#循环双链表的类型描述" class="headerlink" title="循环双链表的类型描述"></a>循环双链表的类型描述</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">struct</span> <span class="hljs-title class_">DNode</span>&#123;<br>    <span class="hljs-type">int</span> data;  <span class="hljs-comment">//数据域</span><br>    <span class="hljs-keyword">struct</span> <span class="hljs-title class_">DNode</span> * prior, * next;  <span class="hljs-comment">//前驱和后继指针</span><br>&#125;DNode, * DLinkList;<br></code></pre></td></tr></table></figure><h3 id="初始化-1"><a href="#初始化-1" class="headerlink" title="初始化"></a>初始化</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">InitList</span><span class="hljs-params">(DLinkList &amp; list)</span></span>&#123;<br>    list = (LNode *)<span class="hljs-built_in">malloc</span>(<span class="hljs-built_in">sizeof</span>(LNode));<br>    list -&gt; prior = list;<br>    list -&gt; next = list;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="判空-1"><a href="#判空-1" class="headerlink" title="判空"></a>判空</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">//判空</span><br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">Empty</span><span class="hljs-params">(DLinkList list)</span></span>&#123;<br>    <span class="hljs-comment">// 如果头结点的下一个结点，依旧是头结点，那么说明是空表</span><br>    <span class="hljs-keyword">if</span>(list -&gt; next == list) <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="判断表尾节点-1"><a href="#判断表尾节点-1" class="headerlink" title="判断表尾节点"></a>判断表尾节点</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">//判断结点p是否是表尾结点</span><br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">isTail</span><span class="hljs-params">(DLinkList list, LNode * p)</span></span>&#123;<br>    <span class="hljs-comment">// 如果是表尾节点，它的next一定指向头结点</span><br>    <span class="hljs-keyword">if</span>(p -&gt; next == list) <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="插入和删除-1"><a href="#插入和删除-1" class="headerlink" title="插入和删除"></a>插入和删除</h3><p>循环双链表的插入、删除算法与双链表几乎一样，不同的是如果在表尾进行，那么要让双链表继续<strong>保持循环的性质</strong>，即<strong>让尾结点的next域指向头结点，同时让头结点的prior域指向尾结点</strong>。</p>]]></content>
    
    
    <summary type="html">循环链表</summary>
    
    
    
    <category term="考研笔试自用算法大题模板" scheme="https://blog.phbeats.cn/categories/%E8%80%83%E7%A0%94%E7%AC%94%E8%AF%95%E8%87%AA%E7%94%A8%E7%AE%97%E6%B3%95%E5%A4%A7%E9%A2%98%E6%A8%A1%E6%9D%BF/"/>
    
    
    <category term="考研笔试自用算法大题模板" scheme="https://blog.phbeats.cn/tags/%E8%80%83%E7%A0%94%E7%AC%94%E8%AF%95%E8%87%AA%E7%94%A8%E7%AE%97%E6%B3%95%E5%A4%A7%E9%A2%98%E6%A8%A1%E6%9D%BF/"/>
    
  </entry>
  
  <entry>
    <title>双链表</title>
    <link href="https://blog.phbeats.cn/posts/ff21019310ee/"/>
    <id>https://blog.phbeats.cn/posts/ff21019310ee/</id>
    <published>2023-07-13T08:45:32.000Z</published>
    <updated>2023-07-31T08:23:01.706Z</updated>
    
    <content type="html"><![CDATA[<h3 id="双链表的实现方式"><a href="#双链表的实现方式" class="headerlink" title="双链表的实现方式"></a>双链表的实现方式</h3><p>实现方式：<code>不带头结点</code>和<code>带头结点</code>。</p><p>同理，使用<code>带头结点</code>的策略。</p><wavy>个人认为，双链表考算法大题可能性不大，但是以防万一还是写一个模板</wavy><p>双链表的重难点应该是<code>边界判断</code>，比如它的<code>指定位置插入元素</code>、<code>指定位置删除元素</code>。</p><h3 id="双链表的基本操作（带头结点）"><a href="#双链表的基本操作（带头结点）" class="headerlink" title="双链表的基本操作（带头结点）"></a>双链表的基本操作（带头结点）</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">InitList</span><span class="hljs-params">(DLinkList &amp; list)</span> <span class="hljs-comment">// 初始化</span></span><br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">Empty</span><span class="hljs-params">(DLinkList list)</span><span class="hljs-comment">// 空表判断</span></span><br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">InsertNextNode</span><span class="hljs-params">(DNode * p, <span class="hljs-type">int</span> x)</span><span class="hljs-comment">// 将元素x后插到节点p</span></span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">TailInsert</span><span class="hljs-params">(DLinkList &amp; list)</span><span class="hljs-comment">// 尾插法</span></span><br><span class="hljs-function">DNode * <span class="hljs-title">GetElem</span><span class="hljs-params">(DLinkList list, <span class="hljs-type">int</span> i)</span><span class="hljs-comment">// 按位查找</span></span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">Insert</span><span class="hljs-params">(DLinkList &amp; list, <span class="hljs-type">int</span> i, <span class="hljs-type">int</span> x)</span><span class="hljs-comment">// 在第 i 个位置，插入元素 x</span></span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">Length</span><span class="hljs-params">(DLinkList list)</span><span class="hljs-comment">// 双链表表长</span></span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">Delete</span><span class="hljs-params">(DLinkList &amp; list, <span class="hljs-type">int</span> i)</span><span class="hljs-comment">// 删除第 i 个位置的元素</span></span><br></code></pre></td></tr></table></figure><h3 id="双链表的类型描述"><a href="#双链表的类型描述" class="headerlink" title="双链表的类型描述"></a>双链表的类型描述</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">struct</span> <span class="hljs-title class_">DNode</span>&#123;<br><span class="hljs-type">int</span> data;<span class="hljs-comment">// 数据域</span><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">DNode</span> * prior,* next;<span class="hljs-comment">// 前驱和后继指针</span><br>&#125;DNode, * DLinkList;<br></code></pre></td></tr></table></figure><h3 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">// 初始化</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">InitList</span><span class="hljs-params">(DLinkList &amp; list)</span></span>&#123;<br><span class="hljs-comment">// 给头结点分配内存</span><br>list = (DNode *)<span class="hljs-built_in">malloc</span>(<span class="hljs-built_in">sizeof</span>(DNode));<br><br><span class="hljs-comment">// 张开双手的双链表的空表状态</span><br>list -&gt; prior = <span class="hljs-literal">NULL</span>;<br>list -&gt; next = <span class="hljs-literal">NULL</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="判空"><a href="#判空" class="headerlink" title="判空"></a>判空</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">// 空表判断</span><br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">Empty</span><span class="hljs-params">(DLinkList list)</span></span>&#123;<br><span class="hljs-comment">// 如果头结点指向的下一个结点是NULL</span><br><span class="hljs-keyword">if</span>(!list -&gt; next) <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="后插操作"><a href="#后插操作" class="headerlink" title="后插操作"></a>后插操作</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">// 将元素x后插到节点p</span><br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">InsertNextNode</span><span class="hljs-params">(DNode * p, <span class="hljs-type">int</span> x)</span></span>&#123;<br><span class="hljs-comment">// 不能插入到NULL后面</span><br><span class="hljs-keyword">if</span>(!p) <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br><br><span class="hljs-comment">// 创建元素x的载体，并且初始化</span><br>DNode * s = (DNode *)<span class="hljs-built_in">malloc</span>(<span class="hljs-built_in">sizeof</span>(DNode));<br>s -&gt; data = x;<br><br><span class="hljs-comment">// 双链表最后一个节点插入比较特殊，因此需要特判</span><br><span class="hljs-comment">// 只有当不是双链表最后一个节点才操作 p -&gt; next -&gt; prior</span><br><span class="hljs-keyword">if</span>(p -&gt; next) p -&gt; next -&gt; prior = s;<br>s -&gt; next = p -&gt; next;<br>p -&gt; next = s;<br>s -&gt; prior = p;<br><br><span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="尾插法"><a href="#尾插法" class="headerlink" title="尾插法"></a>尾插法</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">// 尾插法</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">TailInsert</span><span class="hljs-params">(DLinkList &amp; list)</span></span>&#123;<br><span class="hljs-built_in">InitList</span>(list);<br><br><span class="hljs-comment">// 记录尾指针（一开始是指向头结点）</span><br>DNode * r = list;<br><br><span class="hljs-type">int</span> x;<br>cin &gt;&gt; x;<br><br><span class="hljs-keyword">while</span>(x != <span class="hljs-number">9999</span>)&#123;<br><span class="hljs-comment">// 1.创建新节点</span><br>DNode * p = (DNode *)<span class="hljs-built_in">malloc</span>(<span class="hljs-built_in">sizeof</span>(DNode));<br>p -&gt; data = x;<br><span class="hljs-comment">// 2.插入</span><br>p -&gt; next = r -&gt; next;<br>r -&gt; next = p;<br>p -&gt; prior = r;<br><span class="hljs-comment">// 3.更新尾指针</span><br>r = p;<br>cin &gt;&gt; x;<br>&#125;<br><br><span class="hljs-comment">// 尾指针置空</span><br>r -&gt; next = <span class="hljs-literal">NULL</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="按位查找"><a href="#按位查找" class="headerlink" title="按位查找"></a>按位查找</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">// 按位查找</span><br><span class="hljs-function">DNode * <span class="hljs-title">GetElem</span><span class="hljs-params">(DLinkList list, <span class="hljs-type">int</span> i)</span></span>&#123;<br><span class="hljs-comment">// 如果是第0个位置返回头结点</span><br><span class="hljs-keyword">if</span>(i == <span class="hljs-number">0</span>) <span class="hljs-keyword">return</span> list;<br><span class="hljs-comment">// 非法输入</span><br><span class="hljs-keyword">if</span>(i &lt; <span class="hljs-number">0</span>) <span class="hljs-keyword">return</span> <span class="hljs-literal">NULL</span>;<br><br><span class="hljs-comment">// 从第一个节点开始计数（可能为空）</span><br><span class="hljs-type">int</span> j = <span class="hljs-number">1</span>;<br>DNode * p = list -&gt; next;<br><br><span class="hljs-comment">// 查找（不为空，且小于要找到的位序）</span><br><span class="hljs-keyword">while</span>(p &amp;&amp; j &lt; i)&#123;<br>p = p -&gt; next;<br>j++;<br>&#125;<br><span class="hljs-comment">// 如果没那么长，也会返回p，此时p为NULL</span><br><span class="hljs-keyword">return</span> p;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="在指定位置插入元素"><a href="#在指定位置插入元素" class="headerlink" title="在指定位置插入元素"></a>在指定位置插入元素</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">// 在第 i 个位置，插入元素 x</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">Insert</span><span class="hljs-params">(DLinkList &amp; list, <span class="hljs-type">int</span> i, <span class="hljs-type">int</span> x)</span></span>&#123;<br><span class="hljs-comment">// 找到第 i - 1 个节点执行后插操作</span><br>DNode * p = <span class="hljs-built_in">GetElem</span>(list, i - <span class="hljs-number">1</span>);<br><span class="hljs-built_in">InsertNextNode</span>(p, x);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="在指定位置删除元素"><a href="#在指定位置删除元素" class="headerlink" title="在指定位置删除元素"></a>在指定位置删除元素</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">// 删除第 i 个位置的元素</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">Delete</span><span class="hljs-params">(DLinkList &amp; list, <span class="hljs-type">int</span> i)</span></span>&#123;<br><span class="hljs-comment">// 删除位置是否合法</span><br><span class="hljs-keyword">if</span>(i &lt; <span class="hljs-number">1</span> || i &gt; <span class="hljs-built_in">Length</span>(list))&#123;<br>cout&lt;&lt;<span class="hljs-string">&quot;delete failed: index is wrong.&quot;</span>&lt;&lt;endl;<br><span class="hljs-keyword">return</span>;<br>&#125;<br><br><span class="hljs-comment">// 找到第 i - 1 个元素</span><br>DNode * p = <span class="hljs-built_in">GetElem</span>(list, i - <span class="hljs-number">1</span>);<br><span class="hljs-comment">// 被删除的元素</span><br>DNode * q = p -&gt; next;<br><br><span class="hljs-comment">// 警惕！如果删除的是最后一个节点，那么需要特判</span><br><span class="hljs-comment">// 只有删除的不是最后一个节点</span><br><span class="hljs-keyword">if</span>(q -&gt; next)&#123;<br>q -&gt; next -&gt; prior = p;<br>&#125;<br>p -&gt; next = q -&gt; next;<br><span class="hljs-built_in">free</span>(q);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="全部代码"><a href="#全部代码" class="headerlink" title="全部代码"></a>全部代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">struct</span> <span class="hljs-title class_">DNode</span>&#123;<br><span class="hljs-type">int</span> data;<span class="hljs-comment">// 数据域</span><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">DNode</span> * prior,* next;<span class="hljs-comment">// 前驱和后继指针</span><br>&#125;DNode, * DLinkList;<br><br><span class="hljs-comment">// 初始化</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">InitList</span><span class="hljs-params">(DLinkList &amp; list)</span></span>&#123;<br><span class="hljs-comment">// 给头结点分配内存</span><br>list = (DNode *)<span class="hljs-built_in">malloc</span>(<span class="hljs-built_in">sizeof</span>(DNode));<br><br><span class="hljs-comment">// 张开双手的双链表的空表状态</span><br>list -&gt; prior = <span class="hljs-literal">NULL</span>;<br>list -&gt; next = <span class="hljs-literal">NULL</span>;<br>&#125;<br><br><span class="hljs-comment">// 空表判断</span><br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">Empty</span><span class="hljs-params">(DLinkList list)</span></span>&#123;<br><span class="hljs-comment">// 如果头结点指向的下一个结点是NULL</span><br><span class="hljs-keyword">if</span>(!list -&gt; next) <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>&#125;<br><br><span class="hljs-comment">// 将元素x后插到节点p</span><br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">InsertNextNode</span><span class="hljs-params">(DNode * p, <span class="hljs-type">int</span> x)</span></span>&#123;<br><span class="hljs-comment">// 不能插入到NULL后面</span><br><span class="hljs-keyword">if</span>(!p) <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br><br><span class="hljs-comment">// 创建元素x的载体，并且初始化</span><br>DNode * s = (DNode *)<span class="hljs-built_in">malloc</span>(<span class="hljs-built_in">sizeof</span>(DNode));<br>s -&gt; data = x;<br><br><span class="hljs-comment">// 双链表最后一个节点插入比较特殊，因此需要特判</span><br><span class="hljs-comment">// 只有当不是双链表最后一个节点才操作 p -&gt; next -&gt; prior</span><br><span class="hljs-keyword">if</span>(p -&gt; next) p -&gt; next -&gt; prior = s;<br>s -&gt; next = p -&gt; next;<br>p -&gt; next = s;<br>s -&gt; prior = p;<br><br><span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br><br><span class="hljs-comment">// 尾插法</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">TailInsert</span><span class="hljs-params">(DLinkList &amp; list)</span></span>&#123;<br><span class="hljs-built_in">InitList</span>(list);<br><br><span class="hljs-comment">// 记录尾指针（一开始是指向头结点）</span><br>DNode * r = list;<br><br><span class="hljs-type">int</span> x;<br>cin &gt;&gt; x;<br><br><span class="hljs-keyword">while</span>(x != <span class="hljs-number">9999</span>)&#123;<br><span class="hljs-comment">// 1.创建新节点</span><br>DNode * p = (DNode *)<span class="hljs-built_in">malloc</span>(<span class="hljs-built_in">sizeof</span>(DNode));<br>p -&gt; data = x;<br><span class="hljs-comment">// 2.插入</span><br>p -&gt; next = r -&gt; next;<br>r -&gt; next = p;<br>p -&gt; prior = r;<br><span class="hljs-comment">// 3.更新尾指针</span><br>r = p;<br>cin &gt;&gt; x;<br>&#125;<br><br><span class="hljs-comment">// 尾指针置空</span><br>r -&gt; next = <span class="hljs-literal">NULL</span>;<br>&#125;<br><br><span class="hljs-comment">// 按位查找</span><br><span class="hljs-function">DNode * <span class="hljs-title">GetElem</span><span class="hljs-params">(DLinkList list, <span class="hljs-type">int</span> i)</span></span>&#123;<br><span class="hljs-comment">// 如果是第0个位置返回头结点</span><br><span class="hljs-keyword">if</span>(i == <span class="hljs-number">0</span>) <span class="hljs-keyword">return</span> list;<br><span class="hljs-comment">// 非法输入</span><br><span class="hljs-keyword">if</span>(i &lt; <span class="hljs-number">0</span>) <span class="hljs-keyword">return</span> <span class="hljs-literal">NULL</span>;<br><br><span class="hljs-comment">// 从第一个节点开始计数（可能为空）</span><br><span class="hljs-type">int</span> j = <span class="hljs-number">1</span>;<br>DNode * p = list -&gt; next;<br><br><span class="hljs-comment">// 查找（不为空，且小于要找到的位序）</span><br><span class="hljs-keyword">while</span>(p &amp;&amp; j &lt; i)&#123;<br>p = p -&gt; next;<br>j++;<br>&#125;<br><span class="hljs-comment">// 如果没那么长，也会返回p，此时p为NULL</span><br><span class="hljs-keyword">return</span> p;<br>&#125;<br><br><span class="hljs-comment">// 在第 i 个位置，插入元素 x</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">Insert</span><span class="hljs-params">(DLinkList &amp; list, <span class="hljs-type">int</span> i, <span class="hljs-type">int</span> x)</span></span>&#123;<br><span class="hljs-comment">// 找到第 i - 1 个节点执行后插操作</span><br>DNode * p = <span class="hljs-built_in">GetElem</span>(list, i - <span class="hljs-number">1</span>);<br><span class="hljs-built_in">InsertNextNode</span>(p, x);<br>&#125;<br><br><span class="hljs-comment">// 双链表表长</span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">Length</span><span class="hljs-params">(DLinkList list)</span></span>&#123;<br><span class="hljs-type">int</span> i = <span class="hljs-number">0</span>;<br>DNode * p = list -&gt; next;<br><br><span class="hljs-keyword">while</span>(p)&#123;<br>i++;<br>p = p -&gt; next;<br>&#125;<br><br><span class="hljs-keyword">return</span> i;<br>&#125;<br><br><span class="hljs-comment">// 删除第 i 个位置的元素</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">Delete</span><span class="hljs-params">(DLinkList &amp; list, <span class="hljs-type">int</span> i)</span></span>&#123;<br><span class="hljs-comment">// 删除位置是否合法</span><br><span class="hljs-keyword">if</span>(i &lt; <span class="hljs-number">1</span> || i &gt; <span class="hljs-built_in">Length</span>(list))&#123;<br>cout&lt;&lt;<span class="hljs-string">&quot;delete failed: index is wrong.&quot;</span>&lt;&lt;endl;<br><span class="hljs-keyword">return</span>;<br>&#125;<br><br><span class="hljs-comment">// 找到第 i - 1 个元素</span><br>DNode * p = <span class="hljs-built_in">GetElem</span>(list, i - <span class="hljs-number">1</span>);<br><span class="hljs-comment">// 被删除的元素</span><br>DNode * q = p -&gt; next;<br><br><span class="hljs-comment">// 警惕！如果删除的是最后一个节点，那么需要特判</span><br><span class="hljs-comment">// 只有删除的不是最后一个节点</span><br><span class="hljs-keyword">if</span>(q -&gt; next)&#123;<br>q -&gt; next -&gt; prior = p;<br>&#125;<br>p -&gt; next = q -&gt; next;<br><span class="hljs-built_in">free</span>(q);<br>&#125;<br><br><span class="hljs-comment">// 顺序输出双链表</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">PrintList</span><span class="hljs-params">(DLinkList list)</span></span>&#123;<br><span class="hljs-comment">// 找到第一个元素</span><br>DNode * p = list -&gt; next;<br><br><span class="hljs-keyword">while</span>(p)&#123;<br>cout &lt;&lt; p -&gt; data &lt;&lt; <span class="hljs-string">&quot; &quot;</span>;<br>p = p -&gt; next;<br>&#125;<br><br>cout &lt;&lt; endl;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br><br>DLinkList list;<br><br><span class="hljs-built_in">InitList</span>(list);<br><br>cout &lt;&lt; <span class="hljs-string">&quot;当前双链表是否是空表？(1:是,0:不是)&quot;</span> &lt;&lt; endl &lt;&lt; <span class="hljs-built_in">Empty</span>(list) &lt;&lt; endl;<br><br>cout &lt;&lt; <span class="hljs-string">&quot;现在往双链表的头结点插入第一个元素：&quot;</span> &lt;&lt; endl;<br><br><span class="hljs-built_in">InsertNextNode</span>(list, <span class="hljs-number">1</span>);<br><br>cout &lt;&lt; <span class="hljs-string">&quot;现在表中的元素有：&quot;</span> &lt;&lt; endl;<br><br><span class="hljs-built_in">PrintList</span>(list);<br><br>DLinkList tail_list;<br><br>cout &lt;&lt; <span class="hljs-string">&quot;使用尾插法初始化新的双链表tail_list&quot;</span> &lt;&lt; endl;<br><br><span class="hljs-built_in">TailInsert</span>(tail_list);<span class="hljs-comment">// 输入：11 22 33 44 55</span><br><br>cout &lt;&lt; <span class="hljs-string">&quot;现在表中的元素有：&quot;</span> &lt;&lt; endl;<br><br><span class="hljs-built_in">PrintList</span>(tail_list);<br><br>DNode * p = <span class="hljs-built_in">GetElem</span>(tail_list, <span class="hljs-number">3</span>);<br>cout &lt;&lt; <span class="hljs-string">&quot;双链表中第 3 个位置的元素是：&quot;</span> &lt;&lt; p -&gt; data &lt;&lt; endl;<br><br>cout &lt;&lt; <span class="hljs-string">&quot;往双链表第 1 个位置插入0：&quot;</span> &lt;&lt; endl;<br><span class="hljs-built_in">Insert</span>(tail_list, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>);<br><br>cout &lt;&lt; <span class="hljs-string">&quot;现在表中的元素有：&quot;</span> &lt;&lt; endl;<br><br><span class="hljs-built_in">PrintList</span>(tail_list);<br><br>cout &lt;&lt; <span class="hljs-string">&quot;删除第6个位置上的元素&quot;</span> &lt;&lt; endl;<br><br><span class="hljs-built_in">Delete</span>(tail_list, <span class="hljs-number">6</span>);<br><br>cout &lt;&lt; <span class="hljs-string">&quot;现在表中的元素有：&quot;</span> &lt;&lt; endl;<br><br><span class="hljs-built_in">PrintList</span>(tail_list);<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="运行结果"><a href="#运行结果" class="headerlink" title="运行结果"></a>运行结果</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs shell">当前双链表是否是空表？(1:是,0:不是)<br>1<br>现在往双链表的头结点插入第一个元素：<br>现在表中的元素有：<br>1<br>使用尾插法初始化新的双链表tail_list<br>11 22 33 44 55 9999<br>现在表中的元素有：<br>11 22 33 44 55<br>双链表中第 3 个位置的元素是：33<br>往双链表第 1 个位置插入0：<br>现在表中的元素有：<br>0 11 22 33 44 55<br>删除第6个位置上的元素<br>现在表中的元素有：<br>0 11 22 33 44<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">带头结点的双链表</summary>
    
    
    
    <category term="考研笔试自用算法大题模板" scheme="https://blog.phbeats.cn/categories/%E8%80%83%E7%A0%94%E7%AC%94%E8%AF%95%E8%87%AA%E7%94%A8%E7%AE%97%E6%B3%95%E5%A4%A7%E9%A2%98%E6%A8%A1%E6%9D%BF/"/>
    
    
    <category term="考研笔试自用算法大题模板" scheme="https://blog.phbeats.cn/tags/%E8%80%83%E7%A0%94%E7%AC%94%E8%AF%95%E8%87%AA%E7%94%A8%E7%AE%97%E6%B3%95%E5%A4%A7%E9%A2%98%E6%A8%A1%E6%9D%BF/"/>
    
  </entry>
  
  <entry>
    <title>浅尝辛鹿SOE耶加雪菲手冲咖啡</title>
    <link href="https://blog.phbeats.cn/posts/c19e2a8a5f1a/"/>
    <id>https://blog.phbeats.cn/posts/c19e2a8a5f1a/</id>
    <published>2023-07-13T01:10:02.000Z</published>
    <updated>2023-07-31T08:23:01.706Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>不同品牌的不同耶加雪菲差别是不是很大呢？性价比之王的<code>辛鹿</code>和其它品牌的耶加雪菲差别是不是巨大呢？</p><p>这篇是<code>辛鹿SOE耶加雪菲</code>的评测，这篇只写主观评价，作为以后我是否会回购的依据。</p><p>其它品牌，这里选择了口碑不错的<code>治光师</code>。</p><p><img src="https://bu.dusays.com/2023/07/13/64af5071a51a7.webp" alt="Screenshot_20230713_085908_com.taobao.taobao"></p><h3 id="过程记录"><a href="#过程记录" class="headerlink" title="过程记录"></a>过程记录</h3><p><img src="https://bu.dusays.com/2023/07/13/64af50880a611.webp" alt="IMG_20230713_081516"></p><p><img src="https://bu.dusays.com/2023/07/13/64af5091cfebd.webp" alt="IMG_20230713_081713"></p><h3 id="主观评价"><a href="#主观评价" class="headerlink" title="主观评价"></a>主观评价</h3><p><code>辛鹿耶加雪菲</code>喝起来让我十分不舒服，回味充满了烟熏味，不久这种感觉就能占领你的口腔，令我喉咙十分不舒服。</p><p>有水果风味，但还能感觉到明显涩味和木质感。入口前半段表现还是不错的，但是后半段表现糟糕。不过放冷之后，整体变得比一开始好喝多了。</p><p>个人不喜欢这款<code>辛鹿耶加雪菲</code>，但是考虑到日常提神需求，以及它的价格，会否回购可以进行考虑。</p><p>总体评价：浅中烘焙、烟熏、木质、涩、性价比高。</p>]]></content>
    
    
    <summary type="html">浅尝辛鹿SOE耶加雪菲手冲咖啡</summary>
    
    
    
    <category term="生活" scheme="https://blog.phbeats.cn/categories/%E7%94%9F%E6%B4%BB/"/>
    
    
    <category term="生活" scheme="https://blog.phbeats.cn/tags/%E7%94%9F%E6%B4%BB/"/>
    
    <category term="咖啡" scheme="https://blog.phbeats.cn/tags/%E5%92%96%E5%95%A1/"/>
    
  </entry>
  
  <entry>
    <title>浅尝八平方晴天娃娃手冲咖啡</title>
    <link href="https://blog.phbeats.cn/posts/cb40af96710f/"/>
    <id>https://blog.phbeats.cn/posts/cb40af96710f/</id>
    <published>2023-07-09T06:20:32.000Z</published>
    <updated>2023-07-31T08:23:01.706Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>这是我的第二篇关于咖啡的主观评测。</p><p>这篇文章的意义主要是作为以后我是否会回购的依据。</p><h3 id="过程记录"><a href="#过程记录" class="headerlink" title="过程记录"></a>过程记录</h3><p><img src="https://bu.dusays.com/2023/07/09/64aa52eceb0b8.webp" alt="IMG_20230709_135823"></p><p><img src="https://bu.dusays.com/2023/07/09/64aa52f922f15.webp" alt="IMG_20230709_140302"></p><p><img src="https://bu.dusays.com/2023/07/09/64aa53037427f.webp" alt="IMG_20230709_140331"></p><p><img src="https://bu.dusays.com/2023/07/09/64aa530a5b14d.webp" alt="IMG_20230709_140918"></p><h3 id="主观评价"><a href="#主观评价" class="headerlink" title="主观评价"></a>主观评价</h3><p>这次一打开包装，猛吸一口，瞬间是很舒服的咖啡香味，随后带给我的感觉有点刺鼻（吸得太猛了），还有除咖啡豆味其它的味道，是独特的香味。</p><p><code>八平方晴天娃娃</code>的处理法是<code>厌氧日晒</code>处理，第一次喝厌氧日晒处理法的手冲咖啡。</p><p><code>八平方晴天娃娃</code>相比<code>SeeSaw甜橙子</code>，它的酸味并没有那么突出，酸味和苦味是比较均衡的。让我感觉：<code>哦，这款咖啡一定是浅烘的</code>。能明显感受到甜味，不愧是厌氧处理的。</p><p><code>八平方晴天娃娃</code>的缺点也很明显（瑕疵豆有点多，希望是我倒霉吧），喝下去我能明显感受到它的<code>木质感</code>，<code>烟熏味</code>，<code>涩味</code>。因为个人不是很喜欢<code>烟熏味</code>太重的咖啡。</p><p>这次应该翻车了吧，豆子品控不太好，瑕疵豆很影响口感。<code>倘若筛掉瑕疵豆，应该会很好喝</code>。</p><p>总体评价：浅烘、酸质均衡、水果风味、烟熏、性价比低，不推荐。</p>]]></content>
    
    
    <summary type="html">浅尝八平方晴天娃娃手冲咖啡</summary>
    
    
    
    <category term="生活" scheme="https://blog.phbeats.cn/categories/%E7%94%9F%E6%B4%BB/"/>
    
    
    <category term="生活" scheme="https://blog.phbeats.cn/tags/%E7%94%9F%E6%B4%BB/"/>
    
    <category term="咖啡" scheme="https://blog.phbeats.cn/tags/%E5%92%96%E5%95%A1/"/>
    
  </entry>
  
  <entry>
    <title>单链表</title>
    <link href="https://blog.phbeats.cn/posts/634af820198d/"/>
    <id>https://blog.phbeats.cn/posts/634af820198d/</id>
    <published>2023-07-05T18:52:44.000Z</published>
    <updated>2023-07-31T08:23:01.706Z</updated>
    
    <content type="html"><![CDATA[<h3 id="单链表的实现方式"><a href="#单链表的实现方式" class="headerlink" title="单链表的实现方式"></a>单链表的实现方式</h3><p>实现方式：<code>不带头结点</code>和<code>带头结点</code></p><p>为了写代码方便，使用<code>带头结点</code>的策略作为我的算法模板</p><h3 id="单链表的基本操作"><a href="#单链表的基本操作" class="headerlink" title="单链表的基本操作"></a>单链表的基本操作</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">InitList</span><span class="hljs-params">(LinkList &amp; list)</span><span class="hljs-comment">// 初始化</span></span><br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">Empty</span><span class="hljs-params">(LinkList list)</span><span class="hljs-comment">// 判空</span></span><br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">InsertNextNode</span><span class="hljs-params">(LNode * p, <span class="hljs-type">int</span> e)</span><span class="hljs-comment">// 后插操作：在p结点之后插入元素e</span></span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">HeadInsert</span><span class="hljs-params">(LinkList &amp; list)</span><span class="hljs-comment">// 头插法建立单链表</span></span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">TailInsert</span><span class="hljs-params">(LinkList &amp; list)</span><span class="hljs-comment">// 尾插法建立单链表</span></span><br><span class="hljs-function">LNode * <span class="hljs-title">GetElem</span><span class="hljs-params">(LinkList list, <span class="hljs-type">int</span> i)</span> <span class="hljs-comment">// 按位查找</span></span><br><span class="hljs-function">LNode * <span class="hljs-title">LocateElem</span><span class="hljs-params">(LinkList list, <span class="hljs-type">int</span> e)</span><span class="hljs-comment">// 按值查找（太简单省略）</span></span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">Insert</span><span class="hljs-params">(LinkList &amp; list, <span class="hljs-type">int</span> i, <span class="hljs-type">int</span> x)</span><span class="hljs-comment">// 将x插入到单链表的第i个位置上</span></span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">Delete</span><span class="hljs-params">(LinkList &amp; list, <span class="hljs-type">int</span> i)</span><span class="hljs-comment">// 将单链表中的第i个结点删除</span></span><br><span class="hljs-function">省略Length，Print.......</span><br></code></pre></td></tr></table></figure><h3 id="单链表的类型描述"><a href="#单链表的类型描述" class="headerlink" title="单链表的类型描述"></a>单链表的类型描述</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">struct</span> <span class="hljs-title class_">LNode</span>&#123;<br><span class="hljs-type">int</span> data;<br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">LNode</span> * next;<br>&#125;LNode, * LinkList;<br></code></pre></td></tr></table></figure><h3 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">// 初始化</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">InitList</span><span class="hljs-params">(LinkList &amp; list)</span></span>&#123;<br><span class="hljs-comment">// 1. 给头结点分配内存</span><br>list = (LNode *)<span class="hljs-built_in">malloc</span>(<span class="hljs-built_in">sizeof</span>(LNode));<br><span class="hljs-comment">// 2. 头结点指向的下一个结点地址为NULL</span><br>list -&gt; next = <span class="hljs-literal">NULL</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="判空"><a href="#判空" class="headerlink" title="判空"></a>判空</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">// 判空</span><br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">Empty</span><span class="hljs-params">(LinkList list)</span></span>&#123;<br><span class="hljs-comment">// 如果头结点下一个结点指向NULL，则为空</span><br><span class="hljs-keyword">if</span>(!list -&gt; next) <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="后插操作"><a href="#后插操作" class="headerlink" title="后插操作"></a>后插操作</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">// 在p结点之后插入元素e</span><br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">InsertNextNode</span><span class="hljs-params">(LNode * p, <span class="hljs-type">int</span> e)</span></span>&#123;<br><span class="hljs-comment">// 1.不能在NULL后面插入元素</span><br><span class="hljs-keyword">if</span>(!p) <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br><span class="hljs-comment">// 2.创建新节点承载元素e</span><br>LNode * s = (LNode *)<span class="hljs-built_in">malloc</span>(<span class="hljs-built_in">sizeof</span>(LNode));<br>s -&gt; data = e;<br><span class="hljs-comment">// 3.后插</span><br>s -&gt; next = p -&gt; next;<br>p -&gt; next = s;<br><br><span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="头插法建立单链表"><a href="#头插法建立单链表" class="headerlink" title="头插法建立单链表"></a>头插法建立单链表</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">HeadInsert</span><span class="hljs-params">(LinkList &amp; list)</span></span>&#123;<br><span class="hljs-comment">// 初始化单链表</span><br><span class="hljs-built_in">InitList</span>(list);<br><span class="hljs-comment">// 批量插入</span><br><span class="hljs-type">int</span> x;<br>cin &gt;&gt; x;<br><br><span class="hljs-keyword">while</span>(x != <span class="hljs-number">9999</span>)&#123;<br><span class="hljs-built_in">InsertNextNode</span>(list, x);<br>cin &gt;&gt; x;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="尾插法建立单链表"><a href="#尾插法建立单链表" class="headerlink" title="尾插法建立单链表"></a>尾插法建立单链表</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">// 尾插法建立单链表</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">TailInsert</span><span class="hljs-params">(LinkList &amp; list)</span></span>&#123;<br><span class="hljs-comment">// 初始化单链表</span><br><span class="hljs-built_in">InitList</span>(list);<br><span class="hljs-comment">// 需要一个尾指针指向当前单链表的最后一个有效节点</span><br>LNode * r = list; <span class="hljs-comment">// 最初是头结点</span><br><span class="hljs-comment">// 批量输入</span><br><span class="hljs-type">int</span> x;<br>cin &gt;&gt; x;<br><br><span class="hljs-keyword">while</span>(x != <span class="hljs-number">9999</span>)&#123;<br>LNode * s = (LNode *)<span class="hljs-built_in">malloc</span>(<span class="hljs-built_in">sizeof</span>(LNode));<br>s -&gt; data = x;<br><span class="hljs-comment">// 在尾指针指向的节点后面插入新元素</span><br>s -&gt; next = r -&gt; next;<br>r -&gt; next = s;<br>r = s; <span class="hljs-comment">// 更新尾指针</span><br>cin &gt;&gt; x;<br>&#125;<br><span class="hljs-comment">// 非常重要！！！！</span><br>r -&gt; next = <span class="hljs-literal">NULL</span>;<span class="hljs-comment">// 尾指针指向的节点的next置空</span><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="按位查找"><a href="#按位查找" class="headerlink" title="按位查找"></a>按位查找</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">// 按位查找</span><br><span class="hljs-function">LNode * <span class="hljs-title">GetElem</span><span class="hljs-params">(LinkList list, <span class="hljs-type">int</span> i)</span></span>&#123;<br><span class="hljs-comment">// 1. 位置判断(0:取出头结点)</span><br><span class="hljs-keyword">if</span>(i == <span class="hljs-number">0</span>) <span class="hljs-keyword">return</span> list;<br><span class="hljs-comment">// 无效非法的位置i</span><br><span class="hljs-keyword">if</span>(i &lt; <span class="hljs-number">1</span>) <span class="hljs-keyword">return</span> <span class="hljs-literal">NULL</span>;<br><br><span class="hljs-comment">// 2. 查找</span><br><span class="hljs-comment">// 计数器</span><br><span class="hljs-type">int</span> j = <span class="hljs-number">1</span>;<br><span class="hljs-comment">// 第一个元素（可能为空）</span><br>LNode * p = list -&gt; next;<br><br><span class="hljs-keyword">while</span>(p &amp;&amp; j &lt; i)&#123; <span class="hljs-comment">// 循环次数为：相距 i - 1 次(从第1位置找到第4位置需要移动3个单位）</span><br>j++;<br>p = p -&gt; next;<br>&#125;<br><br><span class="hljs-keyword">return</span> p;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="插入"><a href="#插入" class="headerlink" title="插入"></a>插入</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">//将x插入到单链表list的第i个位置上</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">Insert</span><span class="hljs-params">(LinkList &amp; list, <span class="hljs-type">int</span> i, <span class="hljs-type">int</span> x)</span></span>&#123;<br><span class="hljs-comment">// 插入操作需要先找到第 i - 1 个位置的节点，再插入</span><br>LNode * p = <span class="hljs-built_in">GetElem</span>(list,i<span class="hljs-number">-1</span>);<br><span class="hljs-comment">// 在 p 节点后面插入元素x</span><br><span class="hljs-built_in">InsertNextNode</span>(p, x);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">// 将单链表中的第i个结点删除</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">Delete</span><span class="hljs-params">(LinkList &amp; list, <span class="hljs-type">int</span> i)</span></span>&#123;<br><span class="hljs-keyword">if</span>(i&lt;<span class="hljs-number">1</span> || i &gt; <span class="hljs-built_in">Length</span>(list))&#123;<br>cout&lt;&lt;<span class="hljs-string">&quot;delete failed: index is wrong.&quot;</span>&lt;&lt;endl;<br><span class="hljs-keyword">return</span>;<br>&#125;<br><span class="hljs-comment">// 找到第 i - 1 个节点</span><br>LNode * p = <span class="hljs-built_in">GetElem</span>(list,i<span class="hljs-number">-1</span>);<br><span class="hljs-comment">// 删除</span><br>LNode * q = p-&gt;next;<br>p-&gt;next = q-&gt;next;<br><span class="hljs-built_in">free</span>(q);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="另外：前插操作"><a href="#另外：前插操作" class="headerlink" title="另外：前插操作"></a>另外：前插操作</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">//前插操作：在p结点之前插入元素e</span><br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">InsertPriorNode</span><span class="hljs-params">(LNode * p, <span class="hljs-type">int</span> e)</span></span>&#123;<br>    <span class="hljs-comment">// 不能在NULL之前插入元素</span><br>    <span class="hljs-keyword">if</span>(!p) <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    <span class="hljs-comment">// 前插</span><br>    <span class="hljs-comment">// 创建新节点，在p节点后插</span><br>    LNode * s = (LNode *)<span class="hljs-built_in">malloc</span>(<span class="hljs-built_in">sizeof</span>(LNode));<br>    s-&gt;next = p-&gt;next;<br>    p-&gt;next = s;<br>    <span class="hljs-comment">// p给s，e给p</span><br>    s-&gt;data = p-&gt;data;<br>    p-&gt;data = e;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="全部代码"><a href="#全部代码" class="headerlink" title="全部代码"></a>全部代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">struct</span> <span class="hljs-title class_">LNode</span>&#123;<br><span class="hljs-type">int</span> data;<br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">LNode</span> * next;<br>&#125;LNode, * LinkList;<br><br><span class="hljs-comment">// 初始化</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">InitList</span><span class="hljs-params">(LinkList &amp; list)</span></span>&#123;<br><span class="hljs-comment">// 1. 给头结点分配内存</span><br>list = (LNode *)<span class="hljs-built_in">malloc</span>(<span class="hljs-built_in">sizeof</span>(LNode));<br><span class="hljs-comment">// 2. 头结点指向的下一个结点地址为NULL</span><br>list -&gt; next = <span class="hljs-literal">NULL</span>;<br>&#125;<br><br><span class="hljs-comment">// 判空</span><br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">Empty</span><span class="hljs-params">(LinkList list)</span></span>&#123;<br><span class="hljs-comment">// 如果头结点下一个结点指向NULL，则为空</span><br><span class="hljs-keyword">if</span>(!list -&gt; next) <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>&#125;<br><br><span class="hljs-comment">// 在p结点之后插入元素e</span><br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">InsertNextNode</span><span class="hljs-params">(LNode * p, <span class="hljs-type">int</span> e)</span></span>&#123;<br><span class="hljs-comment">// 1.不能在NULL后面插入元素</span><br><span class="hljs-keyword">if</span>(!p) <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br><span class="hljs-comment">// 2.创建新节点承载元素e</span><br>LNode * s = (LNode *)<span class="hljs-built_in">malloc</span>(<span class="hljs-built_in">sizeof</span>(LNode));<br>s -&gt; data = e;<br><span class="hljs-comment">// 3.后插</span><br>s -&gt; next = p -&gt; next;<br>p -&gt; next = s;<br><br><span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br><br><span class="hljs-comment">// 头插法建立单链表</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">HeadInsert</span><span class="hljs-params">(LinkList &amp; list)</span></span>&#123;<br><span class="hljs-comment">// 初始化单链表</span><br><span class="hljs-built_in">InitList</span>(list);<br><span class="hljs-comment">// 批量插入</span><br><span class="hljs-type">int</span> x;<br>cin &gt;&gt; x;<br><br><span class="hljs-keyword">while</span>(x != <span class="hljs-number">9999</span>)&#123;<br><span class="hljs-built_in">InsertNextNode</span>(list, x);<br>cin &gt;&gt; x;<br>&#125;<br>&#125;<br><br><span class="hljs-comment">// 尾插法建立单链表</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">TailInsert</span><span class="hljs-params">(LinkList &amp; list)</span></span>&#123;<br><span class="hljs-comment">// 初始化单链表</span><br><span class="hljs-built_in">InitList</span>(list);<br><span class="hljs-comment">// 需要一个尾指针指向当前单链表的最后一个有效节点</span><br>LNode * r = list; <span class="hljs-comment">// 最初是头结点</span><br><span class="hljs-comment">// 批量输入</span><br><span class="hljs-type">int</span> x;<br>cin &gt;&gt; x;<br><br><span class="hljs-keyword">while</span>(x != <span class="hljs-number">9999</span>)&#123;<br>LNode * s = (LNode *)<span class="hljs-built_in">malloc</span>(<span class="hljs-built_in">sizeof</span>(LNode));<br>s -&gt; data = x;<br><span class="hljs-comment">// 在尾指针指向的节点后面插入新元素</span><br>s -&gt; next = r -&gt; next;<br>r -&gt; next = s;<br>r = s; <span class="hljs-comment">// 更新尾指针</span><br>cin &gt;&gt; x;<br>&#125;<br><span class="hljs-comment">// 非常重要！！！！</span><br>r -&gt; next = <span class="hljs-literal">NULL</span>;<span class="hljs-comment">// 尾指针指向的节点的next置空</span><br>&#125;<br><br><span class="hljs-comment">// 按位查找</span><br><span class="hljs-function">LNode * <span class="hljs-title">GetElem</span><span class="hljs-params">(LinkList list, <span class="hljs-type">int</span> i)</span></span>&#123;<br><span class="hljs-comment">// 1. 位置判断(0:取出头结点)</span><br><span class="hljs-keyword">if</span>(i == <span class="hljs-number">0</span>) <span class="hljs-keyword">return</span> list;<br><span class="hljs-comment">// 无效非法的位置i</span><br><span class="hljs-keyword">if</span>(i &lt; <span class="hljs-number">1</span>) <span class="hljs-keyword">return</span> <span class="hljs-literal">NULL</span>;<br><br><span class="hljs-comment">// 2. 查找</span><br><span class="hljs-comment">// 计数器</span><br><span class="hljs-type">int</span> j = <span class="hljs-number">1</span>;<br><span class="hljs-comment">// 第一个元素（可能为空）</span><br>LNode * p = list -&gt; next;<br><br><span class="hljs-keyword">while</span>(p &amp;&amp; j &lt; i)&#123; <span class="hljs-comment">// 循环次数为：相距 i - 1 次(从第1位置找到第4位置需要移动3个单位）</span><br>j++;<br>p = p -&gt; next;<br>&#125;<br><br><span class="hljs-keyword">return</span> p;<br>&#125;<br><br><span class="hljs-comment">//将x插入到单链表list的第i个位置上</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">Insert</span><span class="hljs-params">(LinkList &amp; list, <span class="hljs-type">int</span> i, <span class="hljs-type">int</span> x)</span></span>&#123;<br><span class="hljs-comment">// 插入操作需要先找到第 i - 1 个位置的节点，再插入</span><br>LNode * p = <span class="hljs-built_in">GetElem</span>(list,i<span class="hljs-number">-1</span>);<br><span class="hljs-comment">// 在 p 节点后面插入元素x</span><br><span class="hljs-built_in">InsertNextNode</span>(p, x);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">Length</span><span class="hljs-params">(LinkList list)</span></span>&#123;<br><span class="hljs-type">int</span> i = <span class="hljs-number">0</span>;<br>LNode * p = list -&gt; next;<br><br><span class="hljs-keyword">while</span>(p)&#123;<br>i++;<br>p = p -&gt; next;<br>&#125;<br><br><span class="hljs-keyword">return</span> i;<br>&#125;<br><br><span class="hljs-comment">// 将单链表中的第i个结点删除</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">Delete</span><span class="hljs-params">(LinkList &amp; list, <span class="hljs-type">int</span> i)</span></span>&#123;<br><span class="hljs-keyword">if</span>(i&lt;<span class="hljs-number">1</span> || i &gt; <span class="hljs-built_in">Length</span>(list))&#123;<br>cout&lt;&lt;<span class="hljs-string">&quot;delete failed: index is wrong.&quot;</span>&lt;&lt;endl;<br><span class="hljs-keyword">return</span>;<br>&#125;<br><span class="hljs-comment">// 找到第 i - 1 个节点</span><br>LNode * p = <span class="hljs-built_in">GetElem</span>(list,i<span class="hljs-number">-1</span>);<br><span class="hljs-comment">// 删除</span><br>LNode * q = p-&gt;next;<br>p-&gt;next = q-&gt;next;<br><span class="hljs-built_in">free</span>(q);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">PrintList</span><span class="hljs-params">(LinkList list)</span></span>&#123;<br><span class="hljs-comment">//头结点指向第一个元素（可能为空）</span><br>LNode * p = list -&gt; next;<br><span class="hljs-keyword">while</span>(p)&#123;<br>cout &lt;&lt; p -&gt; data &lt;&lt; <span class="hljs-string">&quot; &quot;</span>;<br>p = p -&gt; next;<br>&#125;<br>cout &lt;&lt; endl;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br><br>LinkList list;<br><br><span class="hljs-comment">// 初始化</span><br><span class="hljs-built_in">InitList</span>(list);<br><br><span class="hljs-comment">// 判空</span><br>cout &lt;&lt; <span class="hljs-string">&quot;此时单链表是否为空？(1代表是，0代表不是)&quot;</span> &lt;&lt; endl &lt;&lt; <span class="hljs-built_in">Empty</span>(list) &lt;&lt; endl;<br><br><span class="hljs-built_in">InsertNextNode</span>(list, <span class="hljs-number">1</span>);<br>cout &lt;&lt; <span class="hljs-string">&quot;成功在头结点之后插入元素1&quot;</span> &lt;&lt; endl;<br><span class="hljs-built_in">InsertNextNode</span>(list, <span class="hljs-number">2</span>);<br>cout &lt;&lt; <span class="hljs-string">&quot;成功在头结点之后插入元素2&quot;</span> &lt;&lt; endl;<br><br><span class="hljs-comment">// 遍历</span><br>cout &lt;&lt; <span class="hljs-string">&quot;当前单链表元素：&quot;</span> &lt;&lt; endl;<br><span class="hljs-built_in">PrintList</span>(list);<br>cout &lt;&lt; <span class="hljs-string">&quot;==========================================&quot;</span> &lt;&lt; endl;<br>cout &lt;&lt; <span class="hljs-string">&quot;熟悉以上几个操作，下面介绍头插法创建单链表:&quot;</span> &lt;&lt; endl;<br><br>LinkList head_list;<br><br><span class="hljs-comment">// 使用头插法创建单链表</span><br><span class="hljs-built_in">HeadInsert</span>(head_list); <span class="hljs-comment">// 假如输入：3 2 1</span><br><span class="hljs-comment">// 遍历</span><br>cout &lt;&lt; <span class="hljs-string">&quot;当前单链表元素：&quot;</span> &lt;&lt; endl;<br><span class="hljs-built_in">PrintList</span>(head_list); <span class="hljs-comment">// 输出：1 2 3</span><br><br>cout &lt;&lt; <span class="hljs-string">&quot;==========================================&quot;</span> &lt;&lt; endl;<br>cout &lt;&lt; <span class="hljs-string">&quot;再介绍一种尾插法创建单链表:&quot;</span> &lt;&lt; endl;<br><br>LinkList tail_list;<br><br><span class="hljs-comment">// 使用尾插法创建单链表</span><br><span class="hljs-built_in">TailInsert</span>(tail_list);<span class="hljs-comment">// 假如输入：1 2 3</span><br><span class="hljs-comment">// 遍历</span><br>cout &lt;&lt; <span class="hljs-string">&quot;当前单链表元素：&quot;</span> &lt;&lt; endl;<br><span class="hljs-built_in">PrintList</span>(tail_list); <span class="hljs-comment">// 输出：1 2 3</span><br><br>LNode * p1 = <span class="hljs-built_in">GetElem</span>(tail_list, <span class="hljs-number">3</span>);<br>cout &lt;&lt; <span class="hljs-string">&quot;第3个位置的元素是：&quot;</span> &lt;&lt; p1 -&gt; data &lt;&lt; endl;<br><br><span class="hljs-comment">// 在第4个位置上插入元素4</span><br><span class="hljs-built_in">Insert</span>(tail_list, <span class="hljs-number">4</span>, <span class="hljs-number">4</span>);<br>cout &lt;&lt; <span class="hljs-string">&quot;在第4个位置上插入元素4&quot;</span> &lt;&lt; endl;<br>cout &lt;&lt; <span class="hljs-string">&quot;当前单链表元素：&quot;</span> &lt;&lt; endl;<br><span class="hljs-built_in">PrintList</span>(tail_list); <span class="hljs-comment">// 输出：1 2 3 4</span><br><br><span class="hljs-comment">// 删除第4个位置上的元素</span><br><span class="hljs-built_in">Delete</span>(tail_list, <span class="hljs-number">4</span>);<br>cout &lt;&lt; <span class="hljs-string">&quot;删除单链表中第4个位置的元素&quot;</span> &lt;&lt; endl;<br>cout &lt;&lt; <span class="hljs-string">&quot;当前单链表元素：&quot;</span> &lt;&lt; endl;<br><span class="hljs-built_in">PrintList</span>(tail_list); <span class="hljs-comment">// 输出：1 2 3</span><br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="运行结果"><a href="#运行结果" class="headerlink" title="运行结果"></a>运行结果</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs shell">此时单链表是否为空？(1代表是，0代表不是)<br>1<br>成功在头结点之后插入元素1<br>成功在头结点之后插入元素2<br>当前单链表元素：<br>2 1<br>==========================================<br>熟悉以上几个操作，下面介绍头插法创建单链表:<br>3 2 1 9999<br>当前单链表元素：<br>1 2 3<br>==========================================<br>再介绍一种尾插法创建单链表:<br>1 2 3 9999<br>当前单链表元素：<br>1 2 3<br>第3个位置的元素是：3<br>在第4个位置上插入元素4<br>当前单链表元素：<br>1 2 3 4<br>删除单链表中第4个位置的元素<br>当前单链表元素：<br>1 2 3<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">带头结点的单链表</summary>
    
    
    
    <category term="考研笔试自用算法大题模板" scheme="https://blog.phbeats.cn/categories/%E8%80%83%E7%A0%94%E7%AC%94%E8%AF%95%E8%87%AA%E7%94%A8%E7%AE%97%E6%B3%95%E5%A4%A7%E9%A2%98%E6%A8%A1%E6%9D%BF/"/>
    
    
    <category term="考研笔试自用算法大题模板" scheme="https://blog.phbeats.cn/tags/%E8%80%83%E7%A0%94%E7%AC%94%E8%AF%95%E8%87%AA%E7%94%A8%E7%AE%97%E6%B3%95%E5%A4%A7%E9%A2%98%E6%A8%A1%E6%9D%BF/"/>
    
  </entry>
  
  <entry>
    <title>顺序表</title>
    <link href="https://blog.phbeats.cn/posts/b854574263bd/"/>
    <id>https://blog.phbeats.cn/posts/b854574263bd/</id>
    <published>2023-07-05T17:35:17.000Z</published>
    <updated>2023-07-31T08:23:01.710Z</updated>
    
    <content type="html"><![CDATA[<h3 id="顺序表的实现方式"><a href="#顺序表的实现方式" class="headerlink" title="顺序表的实现方式"></a>顺序表的实现方式</h3><p>实现方式：<code>静态分配</code>和<code>动态分配</code></p><wavy>根据观察，包括王道书上的算法设计题，绝大部分使用的是静态分配的顺序表，因此我使用同样的策略作为我的算法模板</wavy><h3 id="顺序表的基本操作"><a href="#顺序表的基本操作" class="headerlink" title="顺序表的基本操作"></a>顺序表的基本操作</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">InitList</span><span class="hljs-params">(SqList &amp; list)</span><span class="hljs-comment">// 初始化顺序表</span></span><br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">ListInsert</span><span class="hljs-params">(SqList &amp; list, <span class="hljs-type">int</span> i, <span class="hljs-type">int</span> e)</span><span class="hljs-comment">// 在顺序表的第i个(位序)上插入值e</span></span><br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">ListDelete</span><span class="hljs-params">(SqList &amp; list, <span class="hljs-type">int</span> i, <span class="hljs-type">int</span> &amp; e)</span><span class="hljs-comment">// 删除顺序表中第i个元素并返回其元素值e</span></span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">GetElem</span><span class="hljs-params">(SqList list, <span class="hljs-type">int</span> i)</span><span class="hljs-comment">// 按位查找</span></span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">LocateElem</span><span class="hljs-params">(SqList list, <span class="hljs-type">int</span> e)</span><span class="hljs-comment">// 按值查找</span></span><br></code></pre></td></tr></table></figure><h3 id="顺序表的类型描述"><a href="#顺序表的类型描述" class="headerlink" title="顺序表的类型描述"></a>顺序表的类型描述</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">define</span> MaxSize 10; <span class="hljs-comment">//定义最大长度</span></span><br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">struct</span>&#123;<br>    <span class="hljs-type">int</span> data[MaxSize];       <span class="hljs-comment">//“静态”的数组存数据，存int数据</span><br>    <span class="hljs-type">int</span> length;              <span class="hljs-comment">//顺序表的当前长度</span><br>&#125;SqList;<br></code></pre></td></tr></table></figure><h3 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">// 初始化顺序表</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">InitList</span><span class="hljs-params">(SqList &amp; list)</span></span>&#123;<br><span class="hljs-comment">// 1.将表中所有元素赋值为0</span><br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; list.length; i++)&#123;<br>list.data[i] = <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-comment">// 2.将表的当前长度赋值为0</span><br>list.length = <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="插入"><a href="#插入" class="headerlink" title="插入"></a>插入</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">// 在顺序表的第i个(位序)上插入值e</span><br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">ListInsert</span><span class="hljs-params">(SqList &amp; list, <span class="hljs-type">int</span> i, <span class="hljs-type">int</span> e)</span></span>&#123;<br><span class="hljs-comment">// 1.判断插入位置合法性</span><br><span class="hljs-keyword">if</span>(i &lt; <span class="hljs-number">1</span> || i &gt; list.length + <span class="hljs-number">1</span>)<br><span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br><span class="hljs-comment">// 2.判断表是否已经满了</span><br><span class="hljs-keyword">if</span>(list.length &gt;= MaxSize)<br><span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br><span class="hljs-comment">// 3.合法插入</span><br><span class="hljs-comment">// 3.1 由于传入的是位序，因此插入时是在下标为 i - 1 的地方插入元素</span><br><span class="hljs-comment">// 3.2 将未插入前的表中，从 i - 1 开始，所有元素后移，给新元素腾出位置</span><br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j = list.length; j &gt;=i; j--)&#123;<br>list.data[j] = list.data[j - <span class="hljs-number">1</span>];<br>&#125;<br><span class="hljs-comment">// 3.3 此时 i - 1 位置是空的，可以直接插入了</span><br>list.data[i - <span class="hljs-number">1</span>] = e;<br><span class="hljs-comment">// 插入成功，表长+1</span><br>list.length++;<br><br><span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">// 删除顺序表中第i个元素并返回其元素值e</span><br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">ListDelete</span><span class="hljs-params">(SqList &amp; list, <span class="hljs-type">int</span> i, <span class="hljs-type">int</span> &amp; e)</span></span>&#123;<br><span class="hljs-comment">// 1.判断删除位置合法性，同时可以判断掉空表可能性</span><br><span class="hljs-keyword">if</span>(i &lt; <span class="hljs-number">1</span> || i &gt; list.length)<br><span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br><span class="hljs-comment">// 2.记录删除元素</span><br>e = list.data[i - <span class="hljs-number">1</span>];<br><span class="hljs-comment">// 3.覆盖</span><br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j = i; j &lt; list.length; j++)&#123;<br>list.data[j - <span class="hljs-number">1</span>] = list.data[j];<br>&#125;<br><span class="hljs-comment">// 4.删除成功</span><br>list.length--;<br><br><span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="按位查找"><a href="#按位查找" class="headerlink" title="按位查找"></a>按位查找</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">// 按位查找</span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">GetElem</span><span class="hljs-params">(SqList list, <span class="hljs-type">int</span> i)</span></span>&#123;<br><span class="hljs-keyword">return</span> list.data[i - <span class="hljs-number">1</span>];<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="按值查找"><a href="#按值查找" class="headerlink" title="按值查找"></a>按值查找</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">// 按值查找</span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">LocateElem</span><span class="hljs-params">(SqList list, <span class="hljs-type">int</span> e)</span></span>&#123;<br><span class="hljs-comment">// 1.遍历全表，找到该元素为止</span><br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; list.length; i++)&#123;<br><span class="hljs-keyword">if</span>(list.data[i] == e)<br><span class="hljs-keyword">return</span> i + <span class="hljs-number">1</span>;<span class="hljs-comment">// 返回的注意是位序哦！！！！</span><br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>; <span class="hljs-comment">// 查找失败！</span><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="完整代码"><a href="#完整代码" class="headerlink" title="完整代码"></a>完整代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> MaxSize 10</span><br><br><span class="hljs-comment">// 静态分配的顺序表</span><br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">struct</span>&#123;<br><span class="hljs-type">int</span> data[MaxSize];<br><span class="hljs-type">int</span> length; <span class="hljs-comment">// 顺序表当前长度</span><br>&#125;SqList;<br><br><span class="hljs-comment">// 初始化顺序表</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">InitList</span><span class="hljs-params">(SqList &amp; list)</span></span>&#123;<br><span class="hljs-comment">// 1.将表中所有元素赋值为0</span><br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; list.length; i++)&#123;<br>list.data[i] = <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-comment">// 2.将表的当前长度赋值为0</span><br>list.length = <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-comment">// 在顺序表的第i个(位序)上插入值e</span><br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">ListInsert</span><span class="hljs-params">(SqList &amp; list, <span class="hljs-type">int</span> i, <span class="hljs-type">int</span> e)</span></span>&#123;<br><span class="hljs-comment">// 1.判断插入位置合法性</span><br><span class="hljs-keyword">if</span>(i &lt; <span class="hljs-number">1</span> || i &gt; list.length + <span class="hljs-number">1</span>)<br><span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br><span class="hljs-comment">// 2.判断表是否已经满了</span><br><span class="hljs-keyword">if</span>(list.length &gt;= MaxSize)<br><span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br><span class="hljs-comment">// 3.合法插入</span><br><span class="hljs-comment">// 3.1 由于传入的是位序，因此插入时是在下标为 i - 1 的地方插入元素</span><br><span class="hljs-comment">// 3.2 将未插入前的表中，从 i - 1 开始，所有元素后移，给新元素腾出位置</span><br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j = list.length; j &gt;=i; j--)&#123;<br>list.data[j] = list.data[j - <span class="hljs-number">1</span>];<br>&#125;<br><span class="hljs-comment">// 3.3 此时 i - 1 位置是空的，可以直接插入了</span><br>list.data[i - <span class="hljs-number">1</span>] = e;<br><span class="hljs-comment">// 插入成功，表长+1</span><br>list.length++;<br><br><span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br><br><span class="hljs-comment">// 删除顺序表中第i个元素并返回其元素值e</span><br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">ListDelete</span><span class="hljs-params">(SqList &amp; list, <span class="hljs-type">int</span> i, <span class="hljs-type">int</span> &amp; e)</span></span>&#123;<br><span class="hljs-comment">// 1.判断删除位置合法性，同时可以判断掉空表可能性</span><br><span class="hljs-keyword">if</span>(i &lt; <span class="hljs-number">1</span> || i &gt; list.length)<br><span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br><span class="hljs-comment">// 2.记录删除元素</span><br>e = list.data[i - <span class="hljs-number">1</span>];<br><span class="hljs-comment">// 3.覆盖</span><br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j = i; j &lt; list.length; j++)&#123;<br>list.data[j - <span class="hljs-number">1</span>] = list.data[j];<br>&#125;<br><span class="hljs-comment">// 4.删除成功</span><br>list.length--;<br><br><span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br><br><span class="hljs-comment">// 按位查找</span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">GetElem</span><span class="hljs-params">(SqList list, <span class="hljs-type">int</span> i)</span></span>&#123;<br><span class="hljs-keyword">return</span> list.data[i - <span class="hljs-number">1</span>];<br>&#125;<br><br><span class="hljs-comment">// 按值查找</span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">LocateElem</span><span class="hljs-params">(SqList list, <span class="hljs-type">int</span> e)</span></span>&#123;<br><span class="hljs-comment">// 1.遍历全表，找到该元素为止</span><br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; list.length; i++)&#123;<br><span class="hljs-keyword">if</span>(list.data[i] == e)<br><span class="hljs-keyword">return</span> i + <span class="hljs-number">1</span>;<span class="hljs-comment">// 返回的注意是位序哦！！！！</span><br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>; <span class="hljs-comment">// 查找失败！</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">PrintList</span><span class="hljs-params">(SqList list)</span></span>&#123;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; list.length; i++) cout &lt;&lt; list.data[i] &lt;&lt; <span class="hljs-string">&quot; &quot;</span>;<br>cout &lt;&lt; endl;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br><br>SqList list;<br><br><span class="hljs-comment">// 初始化顺序表</span><br><span class="hljs-built_in">InitList</span>(list);<br><br><span class="hljs-comment">// 将元素插入顺序表中（将1这个元素插入顺序表中第一个位置）</span><br><span class="hljs-built_in">ListInsert</span>(list, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>);<br><span class="hljs-built_in">ListInsert</span>(list, <span class="hljs-number">2</span>, <span class="hljs-number">2</span>);<br><span class="hljs-built_in">ListInsert</span>(list, <span class="hljs-number">3</span>, <span class="hljs-number">3</span>);<br><span class="hljs-built_in">ListInsert</span>(list, <span class="hljs-number">4</span>, <span class="hljs-number">4</span>);<br><br>cout &lt;&lt; <span class="hljs-string">&quot;插入元素过后的顺序表中的元素有：&quot;</span> &lt;&lt; endl;<br><span class="hljs-built_in">PrintList</span>(list);<br><br><span class="hljs-comment">// 删除指定位序的元素，并返回被删除元素（删除第1个位置的元素）</span><br><span class="hljs-type">int</span> deletedElem;<br><span class="hljs-built_in">ListDelete</span>(list, <span class="hljs-number">1</span>, deletedElem);<br>cout &lt;&lt; <span class="hljs-string">&quot;被删除的元素是：&quot;</span> &lt;&lt; deletedElem &lt;&lt; endl;<br><br><span class="hljs-comment">// 按位查找</span><br>cout &lt;&lt; <span class="hljs-string">&quot;现在第一个元素是：&quot;</span>&lt;&lt; <span class="hljs-built_in">GetElem</span>(list, <span class="hljs-number">1</span>) &lt;&lt; endl;<br><br><span class="hljs-comment">// 按值查找</span><br>cout &lt;&lt; <span class="hljs-string">&quot;现在4这个元素在第 &quot;</span> &lt;&lt; <span class="hljs-built_in">LocateElem</span>(list, <span class="hljs-number">4</span>) &lt;&lt; <span class="hljs-string">&quot; 个位置上&quot;</span> &lt;&lt; endl;<br><br><span class="hljs-comment">// 打印顺序表</span><br><span class="hljs-built_in">PrintList</span>(list);<br>    <br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="运行结果"><a href="#运行结果" class="headerlink" title="运行结果"></a>运行结果</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs shell">插入元素过后的顺序表中的元素有：<br>1 2 3 4<br>被删除的元素是：1<br>现在第一个元素是：2<br>现在4这个元素在第 3 个位置上<br>2 3 4<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">静态分配的顺序表</summary>
    
    
    
    <category term="考研笔试自用算法大题模板" scheme="https://blog.phbeats.cn/categories/%E8%80%83%E7%A0%94%E7%AC%94%E8%AF%95%E8%87%AA%E7%94%A8%E7%AE%97%E6%B3%95%E5%A4%A7%E9%A2%98%E6%A8%A1%E6%9D%BF/"/>
    
    
    <category term="考研笔试自用算法大题模板" scheme="https://blog.phbeats.cn/tags/%E8%80%83%E7%A0%94%E7%AC%94%E8%AF%95%E8%87%AA%E7%94%A8%E7%AE%97%E6%B3%95%E5%A4%A7%E9%A2%98%E6%A8%A1%E6%9D%BF/"/>
    
  </entry>
  
  <entry>
    <title>浅尝SeeSaw甜橙子手冲咖啡</title>
    <link href="https://blog.phbeats.cn/posts/8635f45e7775/"/>
    <id>https://blog.phbeats.cn/posts/8635f45e7775/</id>
    <published>2023-06-27T06:18:50.000Z</published>
    <updated>2023-07-31T08:23:01.706Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>毕业季，最近比较忙，总算回家了。手冲器具都在家里，在学校搞不了手冲咖啡。</p><p>所以一回来，我就马上就买了两款咖啡豆，看咖啡评测似乎不错，但是自己不试试是不知道的。</p><p>这篇是<code>SeeSaw甜橙子</code>的评测，这篇只写主观评价，作为以后我是否会回购的依据。</p><p><img src="https://bu.dusays.com/2023/06/27/649a8529c469f.webp" alt="Screenshot_20230627_134637_com.taobao.taobao_edit"></p><p><img src="https://bu.dusays.com/2023/06/27/649a855845dd9.webp" alt="IMG_20230626_182450"></p><h3 id="过程记录"><a href="#过程记录" class="headerlink" title="过程记录"></a>过程记录</h3><p><img src="https://bu.dusays.com/2023/06/27/649a8696b728d.webp" alt="IMG_20230627_135220"></p><p><img src="https://bu.dusays.com/2023/06/27/649a869c2ac12.webp" alt="IMG_20230627_135128"></p><p><img src="https://bu.dusays.com/2023/06/27/649a86a3a3585.webp" alt="IMG_20230627_135250"></p><p><img src="https://bu.dusays.com/2023/06/27/649a86e515e15.webp" alt="IMG_20230627_140635"></p><h3 id="主观评价"><a href="#主观评价" class="headerlink" title="主观评价"></a>主观评价</h3><p>香味十分浓郁，包装一打开我就猛一吸，我开心地笑了，因为很久没闻咖啡豆了（真该死，在学校带了豆子没带器具）。</p><p><code>SeeSaw甜橙子</code>它的酸味十分突出，有细微柑橘的苦味（至于包装说的乌龙茶我倒是没感觉到），在强烈的酸味刺激下，会有回甘。涩味不是很明显，全部喝完，还是能感觉到微微涩味，但还是在能够接受的范围内。</p><p><code>SeeSaw甜橙子</code>作为一款浅烘焙的咖啡豆，我个人觉得还是太有个性了，让我怀疑它真的不是极浅烘焙咖啡豆？这也太酸了吧，<code>甜橙子</code>的<code>甜</code>是极酸作用产生的甜味，这种<code>个性</code>是把双刃剑。</p><p><code>SeeSaw甜橙子</code>总体评价：极浅烘，过酸，性价比一般。</p>]]></content>
    
    
    <summary type="html">浅尝SeeSaw甜橙子手冲咖啡</summary>
    
    
    
    <category term="生活" scheme="https://blog.phbeats.cn/categories/%E7%94%9F%E6%B4%BB/"/>
    
    
    <category term="生活" scheme="https://blog.phbeats.cn/tags/%E7%94%9F%E6%B4%BB/"/>
    
    <category term="咖啡" scheme="https://blog.phbeats.cn/tags/%E5%92%96%E5%95%A1/"/>
    
  </entry>
  
  <entry>
    <title>[AcWing]34. 链表中环的入口结点</title>
    <link href="https://blog.phbeats.cn/posts/35d2359e9b06/"/>
    <id>https://blog.phbeats.cn/posts/35d2359e9b06/</id>
    <published>2023-06-06T14:07:19.000Z</published>
    <updated>2023-07-31T08:23:01.706Z</updated>
    
    <content type="html"><![CDATA[<h1 id="AcWing-34-链表中环的入口结点"><a href="#AcWing-34-链表中环的入口结点" class="headerlink" title="[AcWing]34. 链表中环的入口结点"></a><a href="https://www.acwing.com/problem/content/86/">[AcWing]34. 链表中环的入口结点</a></h1><p>给定一个链表，若其中包含环，则输出环的入口节点。</p><p>若其中不包含环，则输出<code>null</code>。</p><h4 id="数据范围"><a href="#数据范围" class="headerlink" title="数据范围"></a>数据范围</h4><p>节点 val 值取值范围 <code>[1,1000]</code>。<br>节点 val 值各不相同。<br>链表长度 <code>[0,500]</code>。</p><h4 id="样例"><a href="#样例" class="headerlink" title="样例"></a>样例</h4><p><a href="https://www.acwing.com/media/article/image/2018/12/02/19_69ba6d14f5-QQ%E6%88%AA%E5%9B%BE20181202023846.png">!QQ截图20181202023846.png</a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">给定如上所示的链表：<br>[1, 2, 3, 4, 5, 6]<br>2<br>注意，这里的2表示编号是2的节点，节点编号从0开始。所以编号是2的节点就是val等于3的节点。<br><br>则输出环的入口节点3.<br></code></pre></td></tr></table></figure><h3 id="算法思想"><a href="#算法思想" class="headerlink" title="算法思想"></a>算法思想</h3><p>y总讲这个题，听得我云里雾里，最终我放弃思考了，直接记住结论，开始写代码。</p><ol><li><code>慢指针一步一步走，快指针两步两步走</code></li><li><code>无环：快指针必定会先到达终点（NULL）</code></li><li><code>有环：俩指针会相遇，相遇之后，让慢指针回到起点，再让快慢指针同步速度，一步一步走</code></li><li><code>当再次相遇的时候，那个点就是环的入口</code></li></ol><h3 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Definition for singly-linked list.</span><br><span class="hljs-comment"> * struct ListNode &#123;</span><br><span class="hljs-comment"> *     int val;</span><br><span class="hljs-comment"> *     ListNode *next;</span><br><span class="hljs-comment"> *     ListNode(int x) : val(x), next(NULL) &#123;&#125;</span><br><span class="hljs-comment"> * &#125;;</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function">ListNode *<span class="hljs-title">entryNodeOfLoop</span><span class="hljs-params">(ListNode *head)</span> </span>&#123;<br>        ListNode * slow = head , * fast = head;<br>        <br>        <span class="hljs-keyword">while</span>(fast &amp;&amp; fast-&gt;next)&#123;<br>            fast = fast-&gt;next-&gt;next;<br>            slow = slow-&gt;next;<br>            <span class="hljs-comment">// 有环，相遇了</span><br>            <span class="hljs-keyword">if</span>(slow == fast) <span class="hljs-keyword">break</span>;<br>        &#125;<br>        <span class="hljs-comment">// 如果fast是空，那么代表无环，否则代表有环，并且slow == fast成立</span><br>        <span class="hljs-comment">// 而且，如果while循环条件一开始就没满足，那么代表head是空节点亦或者长度为1</span><br>        <span class="hljs-keyword">if</span>(!fast || !fast-&gt;next) <span class="hljs-keyword">return</span> <span class="hljs-literal">NULL</span>;<br>        <span class="hljs-comment">// slow == fast ， 有环</span><br>        <span class="hljs-comment">// 让slow回去，fast和slow以同样的速度走，再次相遇就是环的入口结点</span><br>        slow = head;<br>        <span class="hljs-keyword">while</span>(slow != fast)&#123;<br>            slow = slow -&gt; next;<br>            fast = fast -&gt; next;<br>        &#125;<br>        <span class="hljs-comment">// 再次相遇了</span><br>        <span class="hljs-keyword">return</span> slow;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">[AcWing]34. 链表中环的入口结点</summary>
    
    
    
    <category term="算法" scheme="https://blog.phbeats.cn/categories/%E7%AE%97%E6%B3%95/"/>
    
    
    <category term="AcWing" scheme="https://blog.phbeats.cn/tags/AcWing/"/>
    
    <category term="链表" scheme="https://blog.phbeats.cn/tags/%E9%93%BE%E8%A1%A8/"/>
    
  </entry>
  
  <entry>
    <title>[AcWing]29. 删除链表中重复的节点</title>
    <link href="https://blog.phbeats.cn/posts/448d550da686/"/>
    <id>https://blog.phbeats.cn/posts/448d550da686/</id>
    <published>2023-05-12T13:27:09.000Z</published>
    <updated>2023-07-31T08:23:01.706Z</updated>
    
    <content type="html"><![CDATA[<h1 id="AcWing-29-删除链表中重复的节点"><a href="#AcWing-29-删除链表中重复的节点" class="headerlink" title="[AcWing]29. 删除链表中重复的节点"></a><a href="https://www.acwing.com/problem/content/27/">[AcWing]29. 删除链表中重复的节点</a></h1><p>在一个排序的链表中，存在重复的节点，请删除该链表中重复的节点，重复的节点不保留。</p><h4 id="数据范围"><a href="#数据范围" class="headerlink" title="数据范围"></a>数据范围</h4><p>链表中节点 val 值取值范围 <code>[0,100]</code>。<br>链表长度 <code>[0,100]</code>。</p><h4 id="样例1"><a href="#样例1" class="headerlink" title="样例1"></a>样例1</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">输入：1-&gt;2-&gt;3-&gt;3-&gt;4-&gt;4-&gt;5<br><br>输出：1-&gt;2-&gt;5<br></code></pre></td></tr></table></figure><h4 id="样例2"><a href="#样例2" class="headerlink" title="样例2"></a>样例2</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">输入：1-&gt;1-&gt;1-&gt;2-&gt;3<br><br>输出：2-&gt;3<br></code></pre></td></tr></table></figure><h3 id="算法思想"><a href="#算法思想" class="headerlink" title="算法思想"></a>算法思想</h3><p><img src="https://bu.dusays.com/2023/05/12/645e40746c07e.png" alt="image-20230512213440430"></p><p><img src="https://bu.dusays.com/2023/05/12/645e412839dba.png" alt="image-20230512213751300"></p><h3 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Definition for singly-linked list.</span><br><span class="hljs-comment"> * struct ListNode &#123;</span><br><span class="hljs-comment"> *     int val;</span><br><span class="hljs-comment"> *     ListNode *next;</span><br><span class="hljs-comment"> *     ListNode(int x) : val(x), next(NULL) &#123;&#125;</span><br><span class="hljs-comment"> * &#125;;</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function">ListNode* <span class="hljs-title">deleteDuplication</span><span class="hljs-params">(ListNode* head)</span> </span>&#123;<br>        ListNode * dummy = <span class="hljs-keyword">new</span> <span class="hljs-built_in">ListNode</span>(<span class="hljs-number">-1</span>);<br>        dummy -&gt; next = head;<br>        <br>        ListNode * p = dummy;<br>        <br>        <span class="hljs-comment">// 保证节点都不为空</span><br>        <span class="hljs-keyword">while</span>(p -&gt; next)&#123;<br>            <span class="hljs-comment">// 被检查的节点</span><br>            ListNode * q = p -&gt; next;<br>            <span class="hljs-comment">// 由于这是一个已被排序的链表，因此可以通过while循环筛掉一连串的节点</span><br>            <span class="hljs-comment">// 循环跳出的时候 q -&gt; next 就是新的需要被检查的元素，与 q 的值不同</span><br>            <span class="hljs-keyword">while</span>(q -&gt; next &amp;&amp; q -&gt; val == q -&gt; next -&gt; val) q = q -&gt; next;<br>            <span class="hljs-comment">// 如果没有重复的元素，while循环体不会执行，会出现下面这种情况</span><br>            <span class="hljs-comment">// 那么 q 元素是没有重复元素的，就让 p 前进</span><br>            <span class="hljs-comment">// 否则，被筛选了，p 直接跳跃至 q -&gt; next 这个新的需要被筛选元素</span><br>            <span class="hljs-keyword">if</span>(p -&gt; next == q) p = p -&gt; next;<br>            <span class="hljs-keyword">else</span> p -&gt; next = q -&gt; next;<br>        &#125;<br>        <br>        <span class="hljs-keyword">return</span> dummy -&gt; next;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">[AcWing]29. 删除链表中重复的节点</summary>
    
    
    
    <category term="算法" scheme="https://blog.phbeats.cn/categories/%E7%AE%97%E6%B3%95/"/>
    
    
    <category term="AcWing" scheme="https://blog.phbeats.cn/tags/AcWing/"/>
    
    <category term="链表" scheme="https://blog.phbeats.cn/tags/%E9%93%BE%E8%A1%A8/"/>
    
  </entry>
  
  <entry>
    <title>[AcWing]28. 在O(1)时间删除链表结点</title>
    <link href="https://blog.phbeats.cn/posts/766b1c104395/"/>
    <id>https://blog.phbeats.cn/posts/766b1c104395/</id>
    <published>2023-05-11T13:28:58.000Z</published>
    <updated>2023-07-31T08:23:01.706Z</updated>
    
    <content type="html"><![CDATA[<h1 id="AcWing-28-在O-1-时间删除链表结点"><a href="#AcWing-28-在O-1-时间删除链表结点" class="headerlink" title="[AcWing]28. 在O(1)时间删除链表结点"></a><a href="https://www.acwing.com/problem/content/85/">[AcWing]28. 在O(1)时间删除链表结点</a></h1><p>给定单向链表的一个节点指针，定义一个函数在O(1)时间删除该结点。</p><p>假设链表一定存在，并且该节点一定不是尾节点。</p><h4 id="数据范围"><a href="#数据范围" class="headerlink" title="数据范围"></a>数据范围</h4><p>链表长度 <code>[1,500]</code>。</p><h4 id="样例"><a href="#样例" class="headerlink" title="样例"></a>样例</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">输入：链表 1-&gt;4-&gt;6-&gt;8<br>      删掉节点：第2个节点即6（头节点为第0个节点）<br><br>输出：新链表 1-&gt;4-&gt;8<br></code></pre></td></tr></table></figure><h3 id="算法思想"><a href="#算法思想" class="headerlink" title="算法思想"></a>算法思想</h3><p><img src="https://bu.dusays.com/2023/05/11/645cf4ee045e4.png" alt="image-20230511213718985"></p><p><img src="https://bu.dusays.com/2023/05/11/645cf4f1ea571.png" alt="image-20230511214024756"></p><p><img src="https://bu.dusays.com/2023/05/11/645cf4e63b40d.png" alt="image-20230511214110079"></p><h3 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Definition for singly-linked list.</span><br><span class="hljs-comment"> * struct ListNode &#123;</span><br><span class="hljs-comment"> *     int val;</span><br><span class="hljs-comment"> *     ListNode *next;</span><br><span class="hljs-comment"> *     ListNode(int x) : val(x), next(NULL) &#123;&#125;</span><br><span class="hljs-comment"> * &#125;;</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">deleteNode</span><span class="hljs-params">(ListNode* node)</span> </span>&#123;<br>        ListNode * q = node -&gt; next;<br>        ListNode * p = q -&gt; next;<br>        <br>        node -&gt; val = q -&gt; val;<br>        node -&gt; next = p;<br>        <span class="hljs-keyword">delete</span> q;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">[AcWing]28. 在O(1)时间删除链表结点</summary>
    
    
    
    <category term="算法" scheme="https://blog.phbeats.cn/categories/%E7%AE%97%E6%B3%95/"/>
    
    
    <category term="AcWing" scheme="https://blog.phbeats.cn/tags/AcWing/"/>
    
    <category term="链表" scheme="https://blog.phbeats.cn/tags/%E9%93%BE%E8%A1%A8/"/>
    
  </entry>
  
  <entry>
    <title>[AcWing]17. 从尾到头打印链表</title>
    <link href="https://blog.phbeats.cn/posts/7cd2155b1ef6/"/>
    <id>https://blog.phbeats.cn/posts/7cd2155b1ef6/</id>
    <published>2023-05-11T12:18:01.000Z</published>
    <updated>2023-07-31T08:23:01.706Z</updated>
    
    <content type="html"><![CDATA[<div class="note success simple"><p>你凭什么让别人相信你？</p></div><h1 id="AcWing-17-从尾到头打印链表"><a href="#AcWing-17-从尾到头打印链表" class="headerlink" title="[AcWing]17. 从尾到头打印链表"></a><a href="https://www.acwing.com/problem/content/18/">[AcWing]17. 从尾到头打印链表</a></h1><p>输入一个链表的头结点，按照 <strong>从尾到头</strong> 的顺序返回节点的值。</p><p>返回的结果用数组存储。</p><h4 id="数据范围"><a href="#数据范围" class="headerlink" title="数据范围"></a>数据范围</h4><p><code>0 ≤</code> 链表长度 <code>≤ 1000</code>。</p><h4 id="样例"><a href="#样例" class="headerlink" title="样例"></a>样例</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">输入：[2, 3, 5]<br>返回：[5, 3, 2]<br></code></pre></td></tr></table></figure><h3 id="算法思想"><a href="#算法思想" class="headerlink" title="算法思想"></a>算法思想</h3><p>最简单的方法就是，直接遍历链表，然后存入<code>vector</code>，再利用库函数将其反转输出。<br>所以此处只写一下，递归函数法。<br>还是利用递归栈，出栈的时候将节点值塞入<code>vector</code>，这样就是逆序的了。</p><h3 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Definition for singly-linked list.</span><br><span class="hljs-comment"> * struct ListNode &#123;</span><br><span class="hljs-comment"> *     int val;</span><br><span class="hljs-comment"> *     ListNode *next;</span><br><span class="hljs-comment"> *     ListNode(int x) : val(x), next(NULL) &#123;&#125;</span><br><span class="hljs-comment"> * &#125;;</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    vector&lt;<span class="hljs-type">int</span>&gt; res;<br>    <br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">dfs</span><span class="hljs-params">(ListNode * head)</span></span>&#123;<br>        <span class="hljs-comment">// 出口</span><br>        <span class="hljs-keyword">if</span>(!head) <span class="hljs-keyword">return</span>;<br>        <span class="hljs-comment">// 找到尾</span><br>        <span class="hljs-built_in">dfs</span>(head -&gt; next);<br>        <span class="hljs-comment">// 从尾到头放入res</span><br>        res.<span class="hljs-built_in">push_back</span>(head -&gt; val);<br>    &#125;<br><br>    <span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">printListReversingly</span><span class="hljs-params">(ListNode* head)</span> </span>&#123;<br>        <span class="hljs-built_in">dfs</span>(head);<br>        <span class="hljs-keyword">return</span> res;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">[AcWing]17. 从尾到头打印链表</summary>
    
    
    
    <category term="算法" scheme="https://blog.phbeats.cn/categories/%E7%AE%97%E6%B3%95/"/>
    
    
    <category term="AcWing" scheme="https://blog.phbeats.cn/tags/AcWing/"/>
    
    <category term="链表" scheme="https://blog.phbeats.cn/tags/%E9%93%BE%E8%A1%A8/"/>
    
  </entry>
  
  <entry>
    <title>判断子序列</title>
    <link href="https://blog.phbeats.cn/posts/8dc10c9dd9e8/"/>
    <id>https://blog.phbeats.cn/posts/8dc10c9dd9e8/</id>
    <published>2023-05-05T12:08:34.000Z</published>
    <updated>2023-07-31T08:23:01.706Z</updated>
    
    <content type="html"><![CDATA[<h1 id="2816-判断子序列"><a href="#2816-判断子序列" class="headerlink" title="2816. 判断子序列"></a><a href="https://www.acwing.com/problem/content/2818/">2816. 判断子序列</a></h1><p>给定一个长度为 <code>n</code> 的整数序列 <code>a1,a2,…,an</code> 以及一个长度为 <code>m</code> 的整数序列 <code>b1,b2,…,bm</code>。</p><p>请你判断 <code>a</code> 序列是否为 <code>b</code> 序列的子序列。</p><p>子序列指序列的一部分项按<strong>原有次序排列</strong>而得的序列，例如序列 <code>&#123;a1,a3,a5&#125;</code> 是序列 <code>&#123;a1,a2,a3,a4,a5&#125;</code> 的一个子序列。</p><h4 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式"></a>输入格式</h4><p>第一行包含两个整数 <code>n,m</code>。</p><p>第二行包含 <code>n</code> 个整数，表示 <code>a1,a2,…,an</code>。</p><p>第三行包含 <code>m</code> 个整数，表示 <code>b1,b2,…,bm</code>。</p><h4 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式"></a>输出格式</h4><p>如果 <code>a</code> 序列是 <code>b</code> 序列的子序列，输出一行 <code>Yes</code>。</p><p>否则，输出 <code>No</code>。</p><h4 id="数据范围"><a href="#数据范围" class="headerlink" title="数据范围"></a>数据范围</h4><p><code>1 ≤ n ≤ m ≤ 10^5</code>,<br><code>-10^9 ≤ ai,bi ≤ 10^9</code></p><h4 id="输入样例："><a href="#输入样例：" class="headerlink" title="输入样例："></a>输入样例：</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">3 5<br>1 3 5<br>1 2 3 4 5<br></code></pre></td></tr></table></figure><h4 id="输出样例："><a href="#输出样例：" class="headerlink" title="输出样例："></a>输出样例：</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">Yes<br></code></pre></td></tr></table></figure><h3 id="算法思想"><a href="#算法思想" class="headerlink" title="算法思想"></a>算法思想</h3><p><code>a</code>序列和<code>b</code>序列同时进行遍历，直到某一个序列遍历完毕。</p><p>在这个过程中，如果<code>a</code>序列游标<code>i</code>和它长度相等，说明全部匹配，<code>a</code>序列是<code>b</code>的子序列</p><h3 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;algorithm&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">100010</span>;<br><span class="hljs-type">int</span> a[N], b[N], s[N];<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    <br>    <span class="hljs-type">int</span> n, m;<br>    cin &gt;&gt; n &gt;&gt; m;<br>    <br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++) cin &gt;&gt; a[i];<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; m; i++) cin &gt;&gt; b[i];<br>    <br>    <span class="hljs-type">int</span> i = <span class="hljs-number">0</span>, j = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">while</span>(i &lt; n &amp;&amp; j &lt; m)&#123;<br>        <span class="hljs-keyword">if</span>(a[i] == b[j]) i++;<br>        <span class="hljs-comment">// 不敢怎样，j都要往后走，保证</span><br>        j++;<br>    &#125;<br>    <br>    <span class="hljs-keyword">if</span>(i == n) <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;Yes&quot;</span>);<br>    <span class="hljs-keyword">else</span> <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;No&quot;</span>);<br>    <br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">判断子序列</summary>
    
    
    
    <category term="算法" scheme="https://blog.phbeats.cn/categories/%E7%AE%97%E6%B3%95/"/>
    
    
    <category term="算法模板" scheme="https://blog.phbeats.cn/tags/%E7%AE%97%E6%B3%95%E6%A8%A1%E6%9D%BF/"/>
    
    <category term="双指针" scheme="https://blog.phbeats.cn/tags/%E5%8F%8C%E6%8C%87%E9%92%88/"/>
    
  </entry>
  
</feed>
